#!/usr/bin/env node

// @ts-nocheck
const pkg = require("../package.json");
const main = require("../dist/node.js");
const meowModule = import("meow");

meowModule.then(
  /** @param meow {import('meow/build/index')} */
  (meow) => {
    const cli = meow.default(
      `
    Usage
      $ tact [...flags] (--config CONFIG | FILE)

    Flags
      -c, --config CONFIG         Specify path to config file (tact.config.json)
      -p, --project ...names      Build only the specified project name(s) from the config file
      --func                      Output intermediate FunC code and exit
      --check                     Perform syntax and type checking, then exit
      -v, --version               Print Tact compiler version and exit
      -h, --help                  Display this text and exit

    Examples
      $ tact --version
      ${pkg.version}

    Learn more about Tact:        https://docs.tact-lang.org
    Join Telegram group:          https://t.me/tactlang
    Follow X/Twitter account:     https://twitter.com/tact_language`,
      {
        importMeta: {
          url: new URL("file://" + __dirname + __filename).toString(),
        },
        description: `Command-line utility for the Tact compiler:\n${pkg.description}`,
        flags: {
          config: {
            shortFlag: "c",
            type: "string",
            isRequired: (flags, _) => {
              // Require a config when the projects are specified AND version/help are not specified
              if (
                flags.projects.length !== 0 &&
                !flags.version &&
                !flags.help
              ) {
                return true;
              }
              // Don't require it otherwise
              return false;
            },
          },
          projects: { shortFlag: "p", type: "string", isMultiple: true },
          func: { type: "boolean", default: false },
          check: { type: "boolean", default: false },
          version: { shortFlag: "v", type: "boolean" },
          help: { shortFlag: "h", type: "boolean" },
        },
        allowUnknownFlags: false,
      },
    );

    // Helper function to write less in following checks
    const isEmptyConfigAndInput = () => {
      if (cli.flags.config === undefined && cli.input.length === 0) {
        return true;
      }
      return false;
    };

    // Show help regardless of other flags
    if (cli.flags.help) {
      cli.showHelp(0);
    }

    // Show version regardless of other flags
    if (cli.flags.version) {
      cli.showVersion();
    }

    // Disallow specifying both config or Tact source file at the same time
    if (cli.flags.config !== undefined && cli.input.length > 0) {
      console.log(
        "Error: Both config and Tact file can't be simultaneously specified, pick one!",
      );
      cli.showHelp();
    }

    // Disallow specifying both --func and --check flags at the same time
    if (cli.flags.check && cli.flags.func) {
      console.log("Error: Flags --func and --check are mutually exclusive!");
      cli.showHelp();
    }

    // Disallow running --func and --check flags without a config or a file specified
    if (isEmptyConfigAndInput() && (cli.flags.check || cli.flags.func)) {
      console.log("Error: Either config or Tact file have to be specified!");
      cli.showHelp();
    }

    // Disallow specifying more than one Tact file
    if (cli.input.length > 1) {
      console.log(
        "Error: Only one Tact file can be specified at a time. If you want more, provide a config!",
      );
      cli.showHelp();
    }

    // Show help when all flags and inputs are empty
    // Note, that version/help flags are already processed above and don't need to be mentioned here
    if (
      isEmptyConfigAndInput() &&
      !cli.flags.check &&
      !cli.flags.func &&
      cli.flags.projects.length === 0
    ) {
      cli.showHelp(0);
    }

    // Compilation mode
    const mode = cli.flags.check
      ? "checkOnly"
      : cli.flags.func
        ? "funcOnly"
        : undefined;

    // TODO: all flags on the cli should take precedence over flags in the config
    // Make a nice model for it in the src/node.ts instead of the current mess
    // Consider making overwrites right here or something.

    // Main command
    main
      .run({
        fileName: cli.input.at(0),
        configPath: cli.flags.config,
        projectNames: cli.flags.projects ?? [],
        additionalCliOptions: { mode },
      })
      .then((success) => {
        // https://nodejs.org/docs/v20.12.1/api/process.html#exit-codes
        process.exit(success ? 0 : 30);
      });
  },
);
