{
  "$schema": "https://raw.githubusercontent.com/streetsidesoftware/cspell/main/cspell.schema.json",
  "version": "0.2",
  "language": "en",
  "dictionaryDefinitions": [
    {
      "name": "fift-words",
      "path": "./cspell-fift-words-adjusted.txt"
    },
    {
      "name": "tvm-instructions",
      "path": "./cspell-tvm-instructions.txt"
    }
  ],
  "dictionaries": ["fift-words", "tvm-instructions"],
  "words": [
    "alnum",
    "assgn",
    "augmentedassign",
    "basechain",
    "bitcode",
    "bitstring",
    "blockstore",
    "bounceable",
    "Brujin",
    "cleanall",
    "codegen",
    "comptime",
    "Daniil",
    "decompilation",
    "decompile",
    "Decompiled",
    "decompiler",
    "decompiles",
    "decompiling",
    "dentry",
    "Descr",
    "disasm",
    "divmod",
    "dnsresolve",
    "Domínguez",
    "elseifnot",
    "forall",
    "formedness",
    "funcfiftlib",
    "funcid",
    "funs",
    "frontmatter",
    "Georgiy",
    "getsimpleforwardfee",
    "gettest",
    "Héctor",
    "infixl",
    "infixr",
    "initof",
    "ipfs",
    "ipld",
    "Jesús",
    "jettons",
    "jsxdev",
    "keccak",
    "knip",
    "Komarov",
    "Korshakov",
    "Laika",
    "langle",
    "lparen",
    "lvalue",
    "lvalues",
    "masterchain",
    "maxint",
    "Merkle",
    "minmax",
    "mintable",
    "mktemp",
    "multiformats",
    "nanotons",
    "Neovim",
    "nocheck",
    "noexcept",
    "nonterminal",
    "Nonterminal",
    "Novus",
    "Offchain",
    "Parens",
    "pinst",
    "POSIX",
    "postpack",
    "prando",
    "rangle",
    "rawslice",
    "renamer",
    "replaceget",
    "rparen",
    "rugpull",
    "rugpulled",
    "Sánchez",
    "sctx",
    "Sedov",
    "seqno",
    "shiki",
    "Stateinit",
    "stdlib",
    "stmts",
    "Ston",
    "struct",
    "structs",
    "subtyping",
    "Tarjan",
    "testdata",
    "Topup",
    "Toncoin",
    "Toncoins",
    "Trunov",
    "typechecker",
    "uintptr",
    "uninit",
    "unixfs",
    "varuint",
    "workchain",
    "xffff",
    "привет"
  ],
  "ignoreRegExpList": [
    "\\b[xB]\\{[a-fA-F0-9]*_?\\}", // binary literals in Fift-asm
    "\\b0[xX][a-fA-F0-9_]*\\b", // hexadecimal numbers
    "\\b(?:address|crc32|cell|slice|rawSlice)\\(\".+\"\\)" // some comptime functions
  ],
  "flagWords": [],
  "ignorePaths": [
    "*.boc",
    "*.fif",
    "**/*/output",
    "*.spec.ts.snap",
    "node_modules",
    "dist",
    "func",
    "grammar/sample.json",
    "src/generator/writers/writeStdlib.ts",
    "src/grammar/grammar.ohm-bundle.d.ts",
    "src/grammar/test/items-native-fun-funcid.tact",
    "src/grammar/test/items-asm-funs.tact",
    "src/grammar/test-asm/*.tact",
    "src/grammar/test-failed/funcid-*.tact",
    "src/imports/stdlib.ts",
    "/src/test/compilation-failed/const-eval-failed.spec.ts",
    "src/test/e2e-emulated/address.spec.ts",
    "src/test/e2e-emulated/intrinsics.spec.ts",
    "src/test/e2e-emulated/optionals.spec.ts",
    "src/test/e2e-emulated/strings.spec.ts",
    "src/test/e2e-emulated/contracts/intrinsics.tact",
    "src/test/e2e-emulated/contracts/strings.tact",
    "src/test/e2e-emulated/contracts/dns.tact",
    "src/test/compilation-fail/fail-const-eval.spec.ts",
    "src/test/e2e-emulated/getter-names-conflict.spec.ts",
    "src/test/exit-codes/contracts/compute-phase-errors.tact",
    "stdlib/stdlib.fc",
    "/docs"
  ]
}
