{
  "$schema": "https://raw.githubusercontent.com/streetsidesoftware/cspell/main/cspell.schema.json",
  "version": "0.2",
  "language": "en",
  "dictionaryDefinitions": [
    {
      "name": "main-list",
      "path": "./spell/cspell-list.txt"
    },
    {
      "name": "fift-words",
      "path": "./spell/cspell-fift-words-adjusted.txt"
    },
    {
      "name": "tvm-instructions",
      "path": "./spell/cspell-tvm-instructions.txt"
    }
  ],
  "dictionaries": ["main-list", "fift-words", "tvm-instructions"],
  "ignoreRegExpList": [
    "\\b[xB]\\{[a-fA-F0-9]*_?\\}", // binary literals in Fift-asm
    "\\b0[xX][a-fA-F0-9_]*\\b", // hexadecimal numbers
    "\\b(?:address|crc32|cell|slice|rawSlice)\\(\".+?\"\\)", // some comptime functions
    "ince Tact ", // regex in RELEASE.md
    "core-contextstate"
  ],
  "flagWords": [],
  "ignorePaths": [
    "*.boc",
    "*.fif",
    "*.fc",
    "_/",
    "**/*/output",
    "*.spec.ts.snap",
    "node_modules",
    "dist",
    "grammar/sample.json",
    "src/generator/writers/writeStdlib.ts",
    "src/func/funcfiftlib.*",
    "src/grammar/test/items-native-fun-funcid.tact",
    "src/grammar/test/items-asm-funs.tact",
    "src/grammar/test-asm/*.tact",
    "src/grammar/test-failed/funcid-*.tact",
    "src/grammar/grammar.peggy",
    "src/grammar/grammar.ts",
    "src/stdlib/stdlib.ts",
    "src/stdlib/stdlib/std/stdlib.fc",
    "src/test/compilation-failed/const-eval-failed.spec.ts",
    "src/test/e2e-emulated/builtins/intrinsics.spec.ts",
    "src/test/e2e-emulated/optionals/optionals.spec.ts",
    "src/test/e2e-emulated/expressions/strings.spec.ts",
    "src/test/e2e-emulated/builtins/intrinsics.tact",
    "src/test/e2e-emulated/expressions/strings.tact",
    "src/test/compilation-fail/fail-const-eval.spec.ts",
    "src/test/exit-codes/contracts/compute-phase-errors.tact",
    "src/test/e2e-slow/map-property-tests/map-properties-key-value-types.ts",
    "src/test/e2e-slow/map-property-tests/build",
    "/docs",
    "src/utils/change-case/*",
    "src/fmt/cst/cst-parser.ts",
    "src/asm/text/convert.ts",
    "src/asm/text/printer-gen.ts",
    "src/asm/runtime/types.ts",
    "src/asm/runtime/test/*",
    "src/asm/runtime/stack-signatures-data.json",
    "src/asm/runtime/stack-signatures-schema.ts",
    "src/asm/runtime/stack-signatures-schema.json",
    "src/asm/runtime/instr-gen.ts",
    "src/asm/runtime/constructors.ts",
    "src/asm/generator/*",
    "coverage",
    "coverage.html",
    "coverage-*.html"
  ]
}
