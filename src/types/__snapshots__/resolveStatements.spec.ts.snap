// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resolveStatements should fail statements for case-0 1`] = `
"<unknown>:9:5: Type mismatch: "Int" is not assignable to "Bool"
Line 9, col 5:
   8 | fun isZero(x: Int): Bool {
>  9 |     return x;
           ^~~~~~~~~
  10 | }
"
`;

exports[`resolveStatements should fail statements for case-1 1`] = `
"<unknown>:9:5: Type mismatch: "Bool" is not assignable to "Int"
Line 9, col 5:
   8 | fun isZero(x: Int): Bool {
>  9 |     repeat(true) {
           ^~~~~~~~~~~~~~
  10 |         x = x + 1;
"
`;

exports[`resolveStatements should fail statements for case-2 1`] = `
"<unknown>:9:5: Type mismatch: "Int" is not assignable to "Bool"
Line 9, col 5:
   8 | fun isZero(x: Int): Bool {
>  9 |     while(x) {
           ^~~~~~~~~~
  10 |         x = x + 1;
"
`;

exports[`resolveStatements should fail statements for case-3 1`] = `
"<unknown>:9:5: Type mismatch: "Int" is not assignable to "Bool"
Line 9, col 5:
   8 | fun isZero(x: Int): Bool {
>  9 |     do {
           ^~~~
  10 |         x = x + 1;
"
`;

exports[`resolveStatements should fail statements for case-4 1`] = `
"<unknown>:9:5: Type mismatch: "Int" is not assignable to "Bool"
Line 9, col 5:
   8 | fun isZero(x: Int): Bool {
>  9 |     if (x) {
           ^~~~~~~~
  10 |         x = x + 1;
"
`;

exports[`resolveStatements should fail statements for case-5 1`] = `
"<unknown>:9:5: Type mismatch: "String" is not assignable to "Int"
Line 9, col 5:
   8 | fun isZero(x: Int): Bool {
>  9 |     x = "hello world";
           ^~~~~~~~~~~~~~~~~~
  10 |     return true;
"
`;

exports[`resolveStatements should fail statements for case-6 1`] = `
"<unknown>:13:12: Function "f1" expects 2 arguments, got 1
Line 13, col 12:
  12 | fun f2(a: Int): Int {
> 13 |     return f1(a);
                  ^~~~~
  14 | }
"
`;

exports[`resolveStatements should fail statements for case-7 1`] = `
"<unknown>:20:16: Function "f1" expects 2 arguments, got 1
Line 20, col 16:
  19 |     fun f2(a: Int): Int {
> 20 |         return self.f1(a);
                      ^~~~~~~~~~
  21 |     }
"
`;

exports[`resolveStatements should fail statements for case-8 1`] = `
"<unknown>:13:18: Invalid type "Bool" for argument "b"
Line 13, col 18:
  12 | fun f2(a: Int): Int {
> 13 |     return f1(a, true);
                        ^~~~
  14 | }
"
`;

exports[`resolveStatements should fail statements for case-9 1`] = `
"<unknown>:20:27: Invalid type "Bool" for argument "b"
Line 20, col 27:
  19 |     fun f2(a: Int): Int {
> 20 |         return self.f1(a, true);
                                 ^~~~
  21 |     }
"
`;

exports[`resolveStatements should fail statements for case-10 1`] = `
"<unknown>:10:5: Type mismatch: "Int" is not assignable to "Bool"
Line 10, col 5:
   9 |     let a: Int = 0;
> 10 |     let b: Bool = 0;
           ^~~~~~~~~~~~~~~~
  11 | }
"
`;

exports[`resolveStatements should fail statements for case-11 1`] = `
"<unknown>:17:9: Invalid type "Bool" for fields "b" with type "Int" in type "SomeStruct"
Line 17, col 9:
  16 |         a: 1,
> 17 |         b: false // Invalid type
               ^~~~~~~~
  18 |     };
"
`;

exports[`resolveStatements should fail statements for case-12 1`] = `
"<unknown>:17:9: Duplicate fields "a"
Line 17, col 9:
  16 |         a: 1,
> 17 |         a: 2,
               ^~~~
  18 |         b: 3
"
`;

exports[`resolveStatements should fail statements for case-13 1`] = `
"<unknown>:16:25: Missing fields "c" in type "SomeStruct"
Line 16, col 25:
  15 | fun main() {
> 16 |     let a: SomeStruct = SomeStruct{
                               ^~~~~~~~~~~
  17 |         a: 1,
"
`;

exports[`resolveStatements should fail statements for case-14 1`] = `
"<unknown>:26:25: Invalid type "String" for argument "owner"
Line 26, col 25:
  25 |     get fun newInit(): StateInit {
> 26 |         return initOf A("hello");
                               ^~~~~~~
  27 |     }
"
`;

exports[`resolveStatements should fail statements for case-15 1`] = `
"<unknown>:10:5: Field "value" is not set
Line 10, col 5:
   9 |     value: Int;
> 10 |     init() {
           ^~~~~~~~
  11 | 
"
`;

exports[`resolveStatements should fail statements for case-16 1`] = `
"<unknown>:10:5: Field "value" is not set
Line 10, col 5:
   9 |     value: Int;
> 10 |     init(arg: Bool) {
           ^~~~~~~~~~~~~~~~~
  11 |         if (arg) {
"
`;

exports[`resolveStatements should fail statements for case-17 1`] = `
"<unknown>:10:5: Field "value" is not set
Line 10, col 5:
   9 |     value: Int;
> 10 |     init(arg: Bool) {
           ^~~~~~~~~~~~~~~~~
  11 |         if (arg) {
"
`;

exports[`resolveStatements should fail statements for case-18 1`] = `
"<unknown>:10:5: Field "value" is not set
Line 10, col 5:
   9 |     value: Int;
> 10 |     init(arg: Bool) {
           ^~~~~~~~~~~~~~~~~
  11 |         if (arg) {
"
`;

exports[`resolveStatements should fail statements for case-19 1`] = `
"<unknown>:12:22: Field "value2" is not initialized
Line 12, col 22:
  11 |     init(arg: Bool) {
> 12 |         self.value = self.value2 + 1;
                            ^~~~~~~~~~~
  13 |         self.value2 = 10;
"
`;

exports[`resolveStatements should fail statements for case-20 1`] = `
"<unknown>:17:22: Field "value2" is not initialized
Line 17, col 22:
  16 |     init(arg: Bool) {
> 17 |         self.value = self.value2.a + 1;
                            ^~~~~~~~~~~
  18 |         self.value2 = A{ a: 1, b: 2 };
"
`;

exports[`resolveStatements should fail statements for case-21 1`] = `
"<unknown>:17:35: Field "value" is not initialized
Line 17, col 35:
  16 |     init(arg: Bool) {
> 17 |         self.value2 = A{ a: 1, b: self.value };
                                         ^~~~~~~~~~
  18 |         self.value = self.value2.a + 1;
"
`;

exports[`resolveStatements should fail statements for case-22 1`] = `
"<unknown>:16:9: Cannot access self before init
Line 16, col 9:
  15 |     init(arg: Bool) {
> 16 |         self.update();
               ^~~~~~~~~~~~~
  17 |         self.value = 1;
"
`;

exports[`resolveStatements should fail statements for case-23 1`] = `
"<unknown>:15:9: Cannot access self before init
Line 15, col 9:
  14 |     init(arg: Bool) {
> 15 |         self.update();
               ^~~~~~~~~~~~~
  16 |         self.value = 1;
"
`;

exports[`resolveStatements should fail statements for case-24 1`] = `
"<unknown>:23:18: Type bounced<"A"> does not have a field named "c"
Line 23, col 18:
  22 |     let y: Bool = src.b;
> 23 |     let z: Int = src.c;
                        ^~~~~
  24 |   }
"
`;

exports[`resolveStatements should fail statements for case-25 1`] = `
"<unknown>:5:12: Incompatible types "Int" and "Bool" for binary operator "=="
Line 5, col 12:
  4 | fun foo(x: Int): Bool {
> 5 |     return x == true;
                 ^~~~~~~~~
  6 | }
"
`;

exports[`resolveStatements should fail statements for case-26 1`] = `
"<unknown>:5:24: Non-matching types "Int" and "Bool" for ternary branches
Line 5, col 24:
  4 | fun sample(): Int {
> 5 |     return (true ? 1 : false) ? 2 : 3;
                             ^~~~~
  6 | }
"
`;

exports[`resolveStatements should fail statements for case-27 1`] = `
"<unknown>:5:43: Non-matching types "Bool" and "Int" for ternary branches
Line 5, col 43:
  4 | fun sample(): Int {
> 5 |     return (true ? true : false) ? true : 3;
                                                ^
  6 | }
"
`;

exports[`resolveStatements should fail statements for case-28 1`] = `
"<unknown>:5:5: Type mismatch: "Bool" is not assignable to "Int"
Line 5, col 5:
  4 | fun sample(): Int {
> 5 |     return (true ? true : false) ? true : false;
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  6 | }
"
`;

exports[`resolveStatements should fail statements for case-29 1`] = `
"<unknown>:5:39: Non-matching types "Bool" and "Int" for ternary branches
Line 5, col 39:
  4 | fun sample(): Int {
> 5 |     return true ? 1 : (false ? true : 2);
                                            ^
  6 | }
"
`;

exports[`resolveStatements should fail statements for case-30 1`] = `
"<unknown>:7:9: Static function "toString" does not exist
Line 7, col 9:
  6 |     init() {
> 7 |         toString(); // non-existent function
              ^~~~~~~~~~
  8 |     }
"
`;

exports[`resolveStatements should fail statements for case-31 1`] = `
"<unknown>:9:12: Unable to resolve id c
Line 9, col 12:
   8 |     }
>  9 |     return c;
                  ^
  10 | }
"
`;

exports[`resolveStatements should fail statements for case-32 1`] = `
"<unknown>:9:12: Unable to resolve id e
Line 9, col 12:
   8 |     }
>  9 |     return e;
                  ^
  10 | }
"
`;

exports[`resolveStatements should fail statements for case-33 1`] = `
"<unknown>:5:16: Unable to resolve id e
Line 5, col 16:
  4 |     try {
> 5 |         return e;
                     ^
  6 |     } catch (e) {
"
`;

exports[`resolveStatements should fail statements for case-34 1`] = `
"<unknown>:6:5: Variable already exists: "e"
Line 6, col 5:
  5 |     let e: String = "qwe";
> 6 |     try {
          ^~~~~
  7 |         return e;
"
`;

exports[`resolveStatements should fail statements for case-35 1`] = `
"<unknown>:8:9: Type mismatch: "Int" is not assignable to "String"
Line 8, col 9:
  7 |     } catch (e) {
> 8 |         return e;
              ^~~~~~~~~
  9 |     }
"
`;

exports[`resolveStatements should fail statements for case-36 1`] = `
"<unknown>:14:26: Unknown fields "b" in type "A"
Line 14, col 26:
  13 | fun function() {
> 14 |     let D: A = A { x: a, b };
                                ^
  15 | }
"
`;

exports[`resolveStatements should fail statements for case-37 1`] = `
"<unknown>:6:5: Type mismatch: "Bool" is not assignable to "<void>"
Line 6, col 5:
  5 |     m.set(1, 2);
> 6 |     return m.del(1);
          ^~~~~~~~~~~~~~~~
  7 | }
"
`;

exports[`resolveStatements should fail statements for case-38 1`] = `
"<unknown>:6:5: Function does not always return a result. Adding 'return' statement(s) should fix the issue.
Line 6, col 5:
  5 | contract Foo {
> 6 |     get fun noReturn(): Int {
          ^~~~~~~~~~~~~~~~~~~~~~~~~
  7 |         // ERROR: no return statement
"
`;

exports[`resolveStatements should fail statements for case-39 1`] = `
"<unknown>:6:5: Function does not always return a result. Adding 'return' statement(s) should fix the issue.
Line 6, col 5:
  5 | contract Foo {
> 6 |     get fun noReturn(): Int {
          ^~~~~~~~~~~~~~~~~~~~~~~~~
  7 |         let x: Int = 42;
"
`;

exports[`resolveStatements should fail statements for case-40 1`] = `
"<unknown>:6:5: Function does not always return a result. Adding 'return' statement(s) should fix the issue.
Line 6, col 5:
  5 | contract Foo {
> 6 |     get fun notAlwaysReachableReturn(b: Bool): Int {
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  7 |         if b {
"
`;

exports[`resolveStatements should fail statements for case-41 1`] = `
"<unknown>:4:1: Function does not always return a result. Adding 'return' statement(s) should fix the issue.
Line 4, col 1:
  3 | 
> 4 | fun notAlwaysReachableReturn(b: Bool): Int {
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  5 |     if (b) {
"
`;

exports[`resolveStatements should fail statements for case-42 1`] = `
"<unknown>:4:1: Function does not always return a result. Adding 'return' statement(s) should fix the issue.
Line 4, col 1:
  3 | 
> 4 | fun notAlwaysReachableReturn(b: Bool): Int {
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  5 |     try {
"
`;

exports[`resolveStatements should fail statements for case-43 1`] = `
"<unknown>:4:1: Function does not always return a result. Adding 'return' statement(s) should fix the issue.
Line 4, col 1:
  3 | 
> 4 | fun notAlwaysReachableReturn(b: Bool): Int {
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  5 |     try {
"
`;

exports[`resolveStatements should fail statements for case-44 1`] = `
"<unknown>:4:1: Function does not always return a result. Adding 'return' statement(s) should fix the issue.
Line 4, col 1:
  3 | 
> 4 | fun notAlwaysReachableReturn(b: Bool): Int {
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  5 |     while (b) {
"
`;

exports[`resolveStatements should fail statements for case-45 1`] = `
"<unknown>:4:1: Function does not always return a result. Adding 'return' statement(s) should fix the issue.
Line 4, col 1:
  3 | 
> 4 | fun notAlwaysReachableReturn(n: Int): Int {
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  5 |     repeat (n) {
"
`;

exports[`resolveStatements should fail statements for case-46 1`] = `
"<unknown>:4:1: Function does not always return a result. Adding 'return' statement(s) should fix the issue.
Line 4, col 1:
  3 | 
> 4 | fun notAlwaysReachableReturn(b: Bool): Int {
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  5 |     do {
"
`;

exports[`resolveStatements should fail statements for case-47 1`] = `
"<unknown>:5:5: Variable already exists: "k"
Line 5, col 5:
  4 |     let m: map<Int, Int> = emptyMap();
> 5 |     foreach (k, k in m) {
          ^~~~~~~~~~~~~~~~~~~~~
  6 |         // something
"
`;

exports[`resolveStatements should fail statements for case-48 1`] = `
"<unknown>:5:5: Variable already exists: "m"
Line 5, col 5:
  4 |     let m: map<Int, Int> = emptyMap();
> 5 |     foreach (k, m in m) {
          ^~~~~~~~~~~~~~~~~~~~~
  6 |         // something
"
`;

exports[`resolveStatements should fail statements for case-49 1`] = `
"<unknown>:8:12: Unable to resolve id v
Line 8, col 12:
  7 |     }
> 8 |     return v;
                 ^
  9 | }
"
`;

exports[`resolveStatements should fail statements for case-50 1`] = `
"<unknown>:8:12: Unable to resolve id x
Line 8, col 12:
  7 |     }
> 8 |     return x;
                 ^
  9 | }
"
`;

exports[`resolveStatements should fail statements for case-51 1`] = `
"<unknown>:5:5: Type error: Augmented assignment is only allowed for Int type
Line 5, col 5:
  4 |     let a: Bool = false;
> 5 |     a %= true;
          ^~~~~~~~~~
  6 |     return a;
"
`;

exports[`resolveStatements should fail statements for case-52 1`] = `
"<unknown>:5:5: Type error: Augmented assignment is only allowed for Int type
Line 5, col 5:
  4 |     let a: String = "foo";
> 5 |     a %= "bar";
          ^~~~~~~~~~~
  6 |     return a;
"
`;

exports[`resolveStatements should resolve statements for case-0 1`] = `
[
  [
    "x",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "x == 0",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-1 1`] = `
[
  [
    "123",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "123 + 10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "123 + 10 == x",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-2 1`] = `
[
  [
    "123",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "123 + 10",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "(123 + 10) / 10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "(123 + 10) / 10 == x",
    "Bool",
  ],
  [
    "y",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "y > 0",
    "Bool",
  ],
  [
    "(123 + 10) / 10 == x && y > 0",
    "Bool",
  ],
  [
    "z",
    "Bool",
  ],
  [
    "(123 + 10) / 10 == x && y > 0 || z",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-3 1`] = `
[
  [
    "x",
    "Int",
  ],
  [
    "y",
    "Int",
  ],
  [
    "x + y",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "b + 1",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "b > 0",
    "Bool",
  ],
  [
    "z",
    "Bool",
  ],
  [
    "b > 0 || z",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-4 1`] = `
[
  [
    "x",
    "Int",
  ],
  [
    "y",
    "Int",
  ],
  [
    "x + y",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "b + 1",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "b > 0",
    "Bool",
  ],
  [
    "z",
    "Bool",
  ],
  [
    "b > 0 || z",
    "Bool",
  ],
  [
    "w",
    "Int?",
  ],
  [
    "w!!",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "w!! > 0",
    "Bool",
  ],
  [
    "b > 0 || z || (w!! > 0)",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-5 1`] = `
[
  [
    "p",
    "Point",
  ],
  [
    "p.x",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "p.x == 0",
    "Bool",
  ],
  [
    "p",
    "Point",
  ],
  [
    "p.y",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "p.y == 0",
    "Bool",
  ],
  [
    "p.x == 0 && p.y == 0",
    "Bool",
  ],
  [
    "p",
    "Point",
  ],
  [
    "p.toCell()",
    "Cell",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-6 1`] = `
[
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "a > 0",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "-10",
    "Int",
  ],
  [
    "a < -10",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "-1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-7 1`] = `
[
  [
    "1",
    "Int",
  ],
  [
    "2",
    "Int",
  ],
  [
    "SomeStruct{
        a: 1,
        b: 2
    }",
    "SomeStruct",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-8 1`] = `
[
  [
    "arg",
    "Bool",
  ],
  [
    "self.",
    "Contract",
  ],
  [
    "value",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "arg",
    "Bool",
  ],
  [
    "!arg",
    "Bool",
  ],
  [
    "self.",
    "Contract",
  ],
  [
    "value",
    "Int",
  ],
  [
    "2",
    "Int",
  ],
  [
    "self.",
    "Contract",
  ],
  [
    "value",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "self.",
    "Contract2",
  ],
  [
    "value",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "self.",
    "Contract2",
  ],
  [
    "value2",
    "S",
  ],
  [
    "1",
    "Int",
  ],
  [
    "self",
    "Contract2",
  ],
  [
    "self.value",
    "Int",
  ],
  [
    "S{ a: 1, b: self.value }",
    "S",
  ],
  [
    "self.",
    "Contract3",
  ],
  [
    "value",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "self",
    "Contract3",
  ],
  [
    "self.update()",
    "<void>",
  ],
  [
    "self.",
    "Contract3",
  ],
  [
    "value",
    "Int",
  ],
  [
    "self",
    "Contract3",
  ],
  [
    "self.value",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "self.value + 1",
    "Int",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-9 1`] = `
[
  [
    "src",
    "bounced<A>",
  ],
  [
    "src.a",
    "Int",
  ],
  [
    "src",
    "bounced<A>",
  ],
  [
    "src.b",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-10 1`] = `
[
  [
    "123",
    "Int",
  ],
  [
    "toString()",
    "Int",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-11 1`] = `
[
  [
    "1",
    "Int",
  ],
  [
    "toString",
    "Int",
  ],
  [
    "dump(toString)",
    "<void>",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-12 1`] = `
[
  [
    "a",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "a + b",
    "Int",
  ],
  [
    "2",
    "Int",
  ],
  [
    "(a + b) / 2",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "valueOf(1, 10)",
    "Int",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-13 1`] = `
[
  [
    "123",
    "Int",
  ],
  [
    "456",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "a + b",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "a + b",
    "Int",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-14 1`] = `
[
  [
    "123",
    "Int",
  ],
  [
    "456",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "a + b",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-15 1`] = `
[
  [
    "emptyMap()",
    "<null>",
  ],
  [
    "m",
    "map<Int, Int>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "2",
    "Int",
  ],
  [
    "m.set(1, 2)",
    "<void>",
  ],
  [
    "m",
    "map<Int, Int>",
  ],
  [
    "3",
    "Int",
  ],
  [
    "m.del(3)",
    "Bool",
  ],
  [
    "emptyMap()",
    "<null>",
  ],
  [
    "m",
    "map<Int, Int as uint8>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "2",
    "Int",
  ],
  [
    "m.set(1, 2)",
    "<void>",
  ],
  [
    "m",
    "map<Int, Int as uint8>",
  ],
  [
    "1",
    "Int",
  ],
  [
    "m.del(1)",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-16 1`] = `[]`;

exports[`resolveStatements should resolve statements for case-17 1`] = `
[
  [
    "42",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-18 1`] = `
[
  [
    "b",
    "Bool",
  ],
  [
    "42",
    "Int",
  ],
  [
    "c",
    "Bool",
  ],
  [
    "43",
    "Int",
  ],
  [
    "d",
    "Bool",
  ],
  [
    "44",
    "Int",
  ],
  [
    "45",
    "Int",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-19 1`] = `
[
  [
    "0",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "42",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "43",
    "Int",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-20 1`] = `
[
  [
    "b",
    "Bool",
  ],
  [
    "1",
    "Int",
  ],
  [
    "b",
    "Bool",
  ],
  [
    "0",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "b ? 0 : 1",
    "Int",
  ],
  [
    "1 / (b ? 0 : 1)",
    "Int",
  ],
  [
    "42",
    "Int",
  ],
  [
    "43",
    "Int",
  ],
  [
    "b",
    "Bool",
  ],
  [
    "!b",
    "Bool",
  ],
  [
    "44",
    "Int",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-21 1`] = `
[
  [
    "3",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "2",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
]
`;
