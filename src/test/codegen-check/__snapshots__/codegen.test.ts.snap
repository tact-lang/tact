// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen should correctly generate FunC code 1`] = `
"#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; main_MainContract.headers.fc
;;
;; Header files for MainContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_int_eq_nullable_left
int __tact_int_eq_nullable_left(int a, int b) inline;

;; __tact_int_neq_nullable_left
int __tact_int_neq_nullable_left(int a, int b) inline;

;; $MainContract$_store
builder $MainContract$_store(builder build_0, (int, int, slice, cell) v) inline;

;; $MainContract$_store_cell
cell $MainContract$_store_cell((int, int, slice, cell) v, builder b) inline;

;; $MainContract$_load
(slice, ((int, int, slice, cell))) $MainContract$_load(slice sc_0) inline;

;; $A$_to_external
(int, int, int, int, int, int, int) $A$_to_external(((int, int, int, int, int, int, int)) v) inline;

;; $B$_to_external
(int, int, int, int, int, int, int) $B$_to_external(((int, int, int, int, int, int, int)) v) inline;

;; $C$_to_external
(cell, cell, slice, slice, int, int, int, slice) $C$_to_external(((cell, cell, slice, slice, int, int, int, slice)) v) inline;

;; $MainContract$init$_load
(slice, ((int, int, slice, cell))) $MainContract$init$_load(slice sc_0) inline;

;; $MainContract$_contract_init
(int, int, slice, cell) $MainContract$_contract_init(int $field, int $value, slice $data, cell $mapping) impure inline;

;; $MainContract$_contract_load
(int, int, slice, cell) $MainContract$_contract_load() impure inline;

;; $MainContract$_contract_store
() $MainContract$_contract_store((int, int, slice, cell) v) impure inline;

;; $global_left
slice $global_left() impure inline_ref;

;; $global_right
slice $global_right() impure inline_ref;

;; $Int$_fun_inc
(int, int) $Int$_fun_inc(int $self) impure inline_ref;

;; $MainContract$_fun_testAugmentedAssignOperators
((int, int, slice, cell), int) $MainContract$_fun_testAugmentedAssignOperators((int, int, slice, cell) $self, int $intVal, int $intVal2, int $boolVal, int $boolVal2) impure inline_ref;

;; $A$_constructor_a_b_c_d_e_f_g
((int, int, int, int, int, int, int)) $A$_constructor_a_b_c_d_e_f_g(int $a, int $b, int $c, int $d, int $e, int $f, int $g) inline;

;; $MainContract$_fun_writeSerializationForA
((int, int, slice, cell), (int, int, int, int, int, int, int)) $MainContract$_fun_writeSerializationForA((int, int, slice, cell) $self) impure inline_ref;

;; $B$_constructor_a_b_c_d_e_f_g
((int, int, int, int, int, int, int)) $B$_constructor_a_b_c_d_e_f_g(int $a, int $b, int $c, int $d, int $e, int $f, int $g) inline;

;; $MainContract$_fun_writeSerializationForB
((int, int, slice, cell), (int, int, int, int, int, int, int)) $MainContract$_fun_writeSerializationForB((int, int, slice, cell) $self) impure inline_ref;

;; $C$_constructor_a_b_c_d_e_f_g_h
((cell, cell, slice, slice, int, int, int, slice)) $C$_constructor_a_b_c_d_e_f_g_h(cell $a, cell $b, slice $c, slice $d, int $e, int $f, int $g, slice $h) inline;

;; $MainContract$_fun_writeSerializationForC
((int, int, slice, cell), (cell, cell, slice, slice, int, int, int, slice)) $MainContract$_fun_writeSerializationForC((int, int, slice, cell) $self) impure inline_ref;

;; $MainContract$_fun_testIfOptimizationPositive
((int, int, slice, cell), ()) $MainContract$_fun_testIfOptimizationPositive((int, int, slice, cell) $self, int $a, int $b) impure inline_ref;

;; $MainContract$_fun_testIfOptimizationComplexPositive
((int, int, slice, cell), ()) $MainContract$_fun_testIfOptimizationComplexPositive((int, int, slice, cell) $self, int $a) impure inline_ref;

;; $MainContract$_fun_testIfOptimizationNegative
((int, int, slice, cell), ()) $MainContract$_fun_testIfOptimizationNegative((int, int, slice, cell) $self, int $a, int $b) impure inline_ref;

;; $MainContract$_fun_testDumpCall
((int, int, slice, cell), ()) $MainContract$_fun_testDumpCall((int, int, slice, cell) $self, int $a) impure inline_ref;

;; $MainContract$_fun_testIfThrowOptimization
((int, int, slice, cell), ()) $MainContract$_fun_testIfThrowOptimization((int, int, slice, cell) $self, int $a) impure inline_ref;

;; $MainContract$_fun_testIfThrowOptimizationNegative
((int, int, slice, cell), ()) $MainContract$_fun_testIfThrowOptimizationNegative((int, int, slice, cell) $self, int $a) impure inline_ref;

;; $MainContract$_fun_testOrder
((int, int, slice, cell), int) $MainContract$_fun_testOrder((int, int, slice, cell) $self) impure inline_ref;

;; $MainContract$_fun_asCell
((int, int, slice, cell), cell) $MainContract$_fun_asCell((int, int, slice, cell) $self) impure inline_ref;

;; $MainContract$_fun_asSlice
((int, int, slice, cell), slice) $MainContract$_fun_asSlice((int, int, slice, cell) $self) impure inline_ref;


;; main_MainContract.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

forall X -> X __tact_not_null(X x) impure inline {
    throw_if(128, null?(x)); return x;
}

int __tact_int_eq_nullable_left(int a, int b) inline {
    return (null?(a)) ? (false) : (a == b);
}

int __tact_int_neq_nullable_left(int a, int b) inline {
    return (null?(a)) ? (true) : (a != b);
}

builder $global_beginCell() impure asm """
    NEWC
""";

slice $global_myAddress() impure asm """
    MYADDR
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

int $Slice$_fun_depth(slice $self) impure asm """
    SDEPTH
""";

int $Cell$_fun_depth(cell $self) impure asm """
    CDEPTH
""";

;; main_MainContract.storage.fc
;;
;; Type: A
;; TLB: _ a:int257 b:int257 c:Maybe int257 d:bool e:Maybe bool f:int257 g:int257 = A
;;

(int, int, int, int, int, int, int) $A$_to_external(((int, int, int, int, int, int, int)) v) inline {
    var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v; 
    return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);
}

((int, int, int, int, int, int, int)) $A$_constructor_a_b_c_d_e_f_g(int $a, int $b, int $c, int $d, int $e, int $f, int $g) inline {
    return ($a, $b, $c, $d, $e, $f, $g);
}

;;
;; Type: B
;; TLB: _ a:int257 b:int257 c:Maybe int257 d:bool e:Maybe bool f:int257 g:int257 = B
;;

(int, int, int, int, int, int, int) $B$_to_external(((int, int, int, int, int, int, int)) v) inline {
    var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v; 
    return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);
}

((int, int, int, int, int, int, int)) $B$_constructor_a_b_c_d_e_f_g(int $a, int $b, int $c, int $d, int $e, int $f, int $g) inline {
    return ($a, $b, $c, $d, $e, $f, $g);
}

;;
;; Type: C
;; TLB: _ a:^cell b:Maybe ^cell c:Maybe ^slice d:Maybe ^slice e:bool f:int257 g:int257 h:address = C
;;

(cell, cell, slice, slice, int, int, int, slice) $C$_to_external(((cell, cell, slice, slice, int, int, int, slice)) v) inline {
    var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v; 
    return (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h);
}

((cell, cell, slice, slice, int, int, int, slice)) $C$_constructor_a_b_c_d_e_f_g_h(cell $a, cell $b, slice $c, slice $d, int $e, int $f, int $g, slice $h) inline {
    return ($a, $b, $c, $d, $e, $f, $g, $h);
}

;;
;; Type: MainContract
;; TLB: _ field:uint8 value:int256 data:fixed_bytes64 mapping:dict<uint8, int256> = MainContract
;;

builder $MainContract$_store(builder build_0, (int, int, slice, cell) v) inline {
    var (v'field, v'value, v'data, v'mapping) = v;
    build_0 = build_0.store_uint(v'field, 8);
    build_0 = build_0.store_int(v'value, 256);
    build_0 = build_0.store_slice(v'data);
    build_0 = build_0.store_dict(v'mapping);
    return build_0;
}

cell $MainContract$_store_cell((int, int, slice, cell) v, builder b) inline {
    return $MainContract$_store(b, v).end_cell();
}

(slice, ((int, int, slice, cell))) $MainContract$_load(slice sc_0) inline {
    var v'field = sc_0~load_uint(8);
    var v'value = sc_0~load_int(256);
    var v'data = sc_0~load_bits(512);
    var v'mapping = sc_0~load_dict();
    return (sc_0, (v'field, v'value, v'data, v'mapping));
}

(slice, ((int, int, slice, cell))) $MainContract$init$_load(slice sc_0) inline {
    var v'field = sc_0~load_uint(8);
    var v'value = sc_0~load_int(256);
    var v'data = sc_0~load_bits(512);
    var v'mapping = sc_0~load_dict();
    return (sc_0, (v'field, v'value, v'data, v'mapping));
}

(int, int, slice, cell) $MainContract$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$MainContract$_load();
    }
    else {
        (int $field, int $value, slice $data, cell $mapping) = $sc~$MainContract$init$_load();
        $sc.end_parse();
        return $MainContract$_contract_init($field, $value, $data, $mapping);
    }
}

() $MainContract$_contract_store((int, int, slice, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $MainContract$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract MainContract functions
;;

(int, int, slice, cell) $MainContract$_contract_init(int $field, int $value, slice $data, cell $mapping) impure inline {
    var (($self'field, $self'value, $self'data, $self'mapping)) = (null(), null(), null(), null());
    $self'field = $field;
    $self'value = $value;
    $self'data = $data;
    $self'mapping = $mapping;
    return ($self'field, $self'value, $self'data, $self'mapping);
}

slice $global_left() impure inline_ref {
    return $global_myAddress();
}

slice $global_right() impure inline_ref {
    return $global_myAddress();
}

(int, int) $Int$_fun_inc(int $self) impure inline_ref {
    var ($self) = $self;
    $self = $self + 1;
    var $fresh$ret_0 = $self;
    return ($self, $fresh$ret_0);
}

((int, int, slice, cell), int) $MainContract$_fun_testAugmentedAssignOperators((int, int, slice, cell) $self, int $intVal, int $intVal2, int $boolVal, int $boolVal2) impure inline_ref {
    var (($self'field, $self'value, $self'data, $self'mapping)) = $self;
    int $a = $intVal;
    $a = $a + $intVal2;
    $a = $a - $intVal2;
    int $b = $boolVal;
    $b = ($b ? $boolVal2 : (false));
    $b = ($b ? (true) : $boolVal2);
    var $fresh$ret_1 = ($a + ($b ? 10 : 20));
    return (($self'field, $self'value, $self'data, $self'mapping), $fresh$ret_1);
}

((int, int, slice, cell), (int, int, int, int, int, int, int)) $MainContract$_fun_writeSerializationForA((int, int, slice, cell) $self) impure inline_ref {
    var (($self'field, $self'value, $self'data, $self'mapping)) = $self;
    var $fresh$ret_2 = $A$_constructor_a_b_c_d_e_f_g(1, 2, null(), false, true, 3, 4);
    return (($self'field, $self'value, $self'data, $self'mapping), $fresh$ret_2);
}

((int, int, slice, cell), (int, int, int, int, int, int, int)) $MainContract$_fun_writeSerializationForB((int, int, slice, cell) $self) impure inline_ref {
    var (($self'field, $self'value, $self'data, $self'mapping)) = $self;
    var $fresh$ret_3 = $B$_constructor_a_b_c_d_e_f_g(1, 2, null(), false, null(), 3, 4);
    return (($self'field, $self'value, $self'data, $self'mapping), $fresh$ret_3);
}

((int, int, slice, cell), (cell, cell, slice, slice, int, int, int, slice)) $MainContract$_fun_writeSerializationForC((int, int, slice, cell) $self) impure inline_ref {
    var (($self'field, $self'value, $self'data, $self'mapping)) = $self;
    var $fresh$ret_4 = $C$_constructor_a_b_c_d_e_f_g_h($Builder$_fun_endCell(store_int($global_beginCell(), 0, 32)), null(), null(), null(), true, 1, 2, $global_myAddress());
    return (($self'field, $self'value, $self'data, $self'mapping), $fresh$ret_4);
}

((int, int, slice, cell), ()) $MainContract$_fun_testIfOptimizationPositive((int, int, slice, cell) $self, int $a, int $b) impure inline_ref {
    var (($self'field, $self'value, $self'data, $self'mapping)) = $self;
    ifnot ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    if ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    ifnot ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    if ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    ifnot ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    if ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    ifnot ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    if ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    ifnot ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    if ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    ifnot ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    if ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    ifnot (__tact_not_null($b)) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    if (__tact_not_null($b)) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    return (($self'field, $self'value, $self'data, $self'mapping), ());
}

((int, int, slice, cell), ()) $MainContract$_fun_testIfOptimizationComplexPositive((int, int, slice, cell) $self, int $a) impure inline_ref {
    var (($self'field, $self'value, $self'data, $self'mapping)) = $self;
    ifnot ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    } elseif ($a) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    ifnot ($a) {
        ifnot ($a) {
            return (($self'field, $self'value, $self'data, $self'mapping), ());
        } elseif ($a) {
            return (($self'field, $self'value, $self'data, $self'mapping), ());
        }
    } elseif ($a) {
        ifnot ($a) {
            return (($self'field, $self'value, $self'data, $self'mapping), ());
        } elseifnot ($a) {
            return (($self'field, $self'value, $self'data, $self'mapping), ());
        }
    }
    return (($self'field, $self'value, $self'data, $self'mapping), ());
}

((int, int, slice, cell), ()) $MainContract$_fun_testIfOptimizationNegative((int, int, slice, cell) $self, int $a, int $b) impure inline_ref {
    var (($self'field, $self'value, $self'data, $self'mapping)) = $self;
    if (($a == 1)) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    if (($a != 1)) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    if ((1 == $a)) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    if ((1 != $a)) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    if (__tact_int_eq_nullable_left($b, 0)) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    if (__tact_int_neq_nullable_left($b, 0)) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    return (($self'field, $self'value, $self'data, $self'mapping), ());
}

((int, int, slice, cell), ()) $MainContract$_fun_testDumpCall((int, int, slice, cell) $self, int $a) impure inline_ref {
    var (($self'field, $self'value, $self'data, $self'mapping)) = $self;
    return (($self'field, $self'value, $self'data, $self'mapping), ());
}

((int, int, slice, cell), ()) $MainContract$_fun_testIfThrowOptimization((int, int, slice, cell) $self, int $a) impure inline_ref {
    var (($self'field, $self'value, $self'data, $self'mapping)) = $self;
    throw_if(10, ($a == 1));
    int $cond = ($a == 1);
    throw_unless(10, $cond);
    throw_if(1000, ($a == 1));
    throw_if(1011, ($a == 1));
    throw_if(499, ($a == 1));
    return (($self'field, $self'value, $self'data, $self'mapping), ());
}

((int, int, slice, cell), ()) $MainContract$_fun_testIfThrowOptimizationNegative((int, int, slice, cell) $self, int $a) impure inline_ref {
    var (($self'field, $self'value, $self'data, $self'mapping)) = $self;
    if (($a == 1)) {
        throw_if(10, true);
    }
    int $cond = ($a == 1);
    ifnot ($cond) {
        throw(10);
    }
    if (($a != 1)) {
        return (($self'field, $self'value, $self'data, $self'mapping), ());
    }
    if ($cond) {
    } elseif (($a == 1)) {
        throw(10);
    }
    int $x = 42;
    ifnot ($x~$Int$_fun_inc()) {
        throw($x~$Int$_fun_inc());
    }
    if (($a == 1)) {
        throw(10);
    }
    if (($a == 1)) {
        throw(10);
    } else {
        throw(11);
    }
    return (($self'field, $self'value, $self'data, $self'mapping), ());
}

((int, int, slice, cell), int) $MainContract$_fun_testOrder((int, int, slice, cell) $self) impure inline_ref {
    var (($self'field, $self'value, $self'data, $self'mapping)) = $self;
    var $fresh$ret_5 = ( equal_slices_bits($global_left(), $global_right()) );
    return (($self'field, $self'value, $self'data, $self'mapping), $fresh$ret_5);
}

((int, int, slice, cell), cell) $MainContract$_fun_asCell((int, int, slice, cell) $self) impure inline_ref {
    var (($self'field, $self'value, $self'data, $self'mapping)) = $self;
    var $fresh$ret_6 = $MainContract$_store_cell(($self'field, $self'value, $self'data, $self'mapping), begin_cell().store_uint(1, 1));
    return (($self'field, $self'value, $self'data, $self'mapping), $fresh$ret_6);
}

((int, int, slice, cell), slice) $MainContract$_fun_asSlice((int, int, slice, cell) $self) impure inline_ref {
    var (($self'field, $self'value, $self'data, $self'mapping)) = $self;
    var $fresh$ret_7 = $MainContract$_store_cell(($self'field, $self'value, $self'data, $self'mapping), begin_cell().store_uint(1, 1)).begin_parse();
    return (($self'field, $self'value, $self'data, $self'mapping), $fresh$ret_7);
}

;;
;; Get methods of a Contract MainContract
;;

_ %testAugmentedAssignOperators(int $intVal, int $intVal2, int $boolVal, int $boolVal2) method_id(87226) {
    int $intVal = $intVal;
    int $intVal2 = $intVal2;
    int $boolVal = $boolVal;
    int $boolVal2 = $boolVal2;
    var self = $MainContract$_contract_load();
    var res = self~$MainContract$_fun_testAugmentedAssignOperators($intVal, $intVal2, $boolVal, $boolVal2);
    return res;
}

_ %writeSerializationForA() method_id(121635) {
    var self = $MainContract$_contract_load();
    var res = self~$MainContract$_fun_writeSerializationForA();
    return $A$_to_external(res);
}

_ %writeSerializationForB() method_id(125760) {
    var self = $MainContract$_contract_load();
    var res = self~$MainContract$_fun_writeSerializationForB();
    return $B$_to_external(res);
}

_ %writeSerializationForC() method_id(129889) {
    var self = $MainContract$_contract_load();
    var res = self~$MainContract$_fun_writeSerializationForC();
    return $C$_to_external(res);
}

_ %testIfOptimizationPositive(int $a, int $b) method_id(72553) {
    int $a = $a;
    int $b = $b;
    var self = $MainContract$_contract_load();
    var res = self~$MainContract$_fun_testIfOptimizationPositive($a, $b);
    return res;
}

_ %testIfOptimizationComplexPositive(int $a) method_id(67196) {
    int $a = $a;
    var self = $MainContract$_contract_load();
    var res = self~$MainContract$_fun_testIfOptimizationComplexPositive($a);
    return res;
}

_ %testIfOptimizationNegative(int $a, int $b) method_id(87434) {
    int $a = $a;
    int $b = $b;
    var self = $MainContract$_contract_load();
    var res = self~$MainContract$_fun_testIfOptimizationNegative($a, $b);
    return res;
}

_ %testDumpCall(int $a) method_id(66927) {
    int $a = $a;
    var self = $MainContract$_contract_load();
    var res = self~$MainContract$_fun_testDumpCall($a);
    return res;
}

_ %testIfThrowOptimization(int $a) method_id(71867) {
    int $a = $a;
    var self = $MainContract$_contract_load();
    var res = self~$MainContract$_fun_testIfThrowOptimization($a);
    return res;
}

_ %testIfThrowOptimizationNegative(int $a) method_id(69407) {
    int $a = $a;
    var self = $MainContract$_contract_load();
    var res = self~$MainContract$_fun_testIfThrowOptimizationNegative($a);
    return res;
}

_ %testOrder() method_id(121793) {
    var self = $MainContract$_contract_load();
    var res = self~$MainContract$_fun_testOrder();
    return res;
}

_ %asCell() method_id(102234) {
    var self = $MainContract$_contract_load();
    var res = self~$MainContract$_fun_asCell();
    return res;
}

_ %asSlice() method_id(68231) {
    var self = $MainContract$_contract_load();
    var res = self~$MainContract$_fun_asSlice();
    return res;
}

;;
;; Routing of a Contract MainContract
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() fake_recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'field, $self'value, $self'data, $self'mapping) = $MainContract$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive Bin message
        if (op == 0x2) {
            var $m = empty_tuple();
            throw_unless(53588, (0x2 == 2));
            $MainContract$_contract_store(($self'field, $self'value, $self'data, $self'mapping));
            return ();
        }
        
        ;; Receive Message1 message
        if (op == 3110385022) {
            var $msg'a = in_msg~load_int(257);
            throw($msg'a);
            $MainContract$_contract_store(($self'field, $self'value, $self'data, $self'mapping));
            return ();
        }
        
        ;; Receive Message2 message
        if (op == 797349837) {
            var $msg'value = in_msg~load_ref();
            var $msg'value2 = in_msg~load_ref().begin_parse();
            int $sc_1 = 10;
            int $sc_2 = 20;
            int $in_msg = ($sc_1 + $sc_2);
            throw_if($in_msg, ($in_msg == 0));
            throw(($Cell$_fun_depth($msg'value) + $Slice$_fun_depth($msg'value2)));
            $MainContract$_contract_store(($self'field, $self'value, $self'data, $self'mapping));
            return ();
        }
        
        ;; Receive Message3 message
        if (op == 1120645875) {
            var $msg'val1 = in_msg~load_int(257);
            var $msg'val2 = in_msg~load_int(257);
            var $msg'val3 = in_msg~load_int(257);
            slice sc_1 = in_msg~load_ref().begin_parse();
            var $msg'val4 = sc_1~load_int(257);
            var $msg'val5 = sc_1~load_int(257);
            var $msg'val6 = sc_1~load_int(257);
            throw(((((($msg'val1 + $msg'val2) + $msg'val3) + $msg'val4) + $msg'val5) + $msg'val6));
            $MainContract$_contract_store(($self'field, $self'value, $self'data, $self'mapping));
            return ();
        }
        
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "Text\\x00receiver\\x01.\\x0aThis \\x07 is \\x0d a \\x1f test \\x7f comment \\x9f with \\x08 bad \\x0c chars" message
    if (text_op == 0x384726d137b7c49fbc0d7801f7781fe550ac11c0c968cd9fb66c25c2a00e1365) {
        $MainContract$_contract_store(($self'field, $self'value, $self'data, $self'mapping));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}


() _prepare_@tempdict() impure asm
"""
variable @tempdict @procdict @ @tempdict !
// -- f
{ @tempdict @ null? } : @tempdict-empty?

// proc_flags -- f
{ 0x1a and 2 = } : need-remove-proc?

// proc_idx --
{ @tempdict @ @procdictkeylen idict- drop @tempdict ! } : @tempdict@remove-proc

// proc_idx proc_flags --
{ 
  need-remove-proc?
  { @tempdict@remove-proc }
  { drop }
  cond
} : process-proc-info

// --
{
  // remove unused procedures
  @procinfo @ @procdictkeylen
  { 16 i@ process-proc-info -1 }
  idictforeach drop

  // remove recv_internal and recv_external
  0 @tempdict@remove-proc
  -1 @tempdict@remove-proc
} : prepare-dict

prepare-dict 
""";


() _internal_selector_part() impure asm
"""
<b 0 @zcount u, // fix c2 SAVE SAMEALTSAVE

SETCP0
@tempdict-empty?
{ DUP 11 THROWARGIF }
{   
    // selector
    <{
        @tempdict @ @procdictkeylen DICTPUSHCONST
        DICTIGETJMPZ
        11 THROWARG
    }> PUSHCONT // selector cont
    s1 s(-1) s(-1) PUXCPU // selector selector cont cont
    c3 POP // selector selector cont
    IFJMP // selector
    DROP 
}
cond

swap b> <s @zcount @cut-zeroes s, // fix c2 SAVE SAMEALTSAVE
""";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    _prepare_@tempdict();
    _internal_selector_part();
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'field, $self'value, $self'data, $self'mapping) = $MainContract$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive Bin message
        if (op == 0x2) {
            var $m = empty_tuple();
            throw_unless(53588, (0x2 == 2));
            $MainContract$_contract_store(($self'field, $self'value, $self'data, $self'mapping));
            return ();
        }
        
        ;; Receive Message1 message
        if (op == 3110385022) {
            var $msg'a = in_msg~load_int(257);
            throw($msg'a);
            $MainContract$_contract_store(($self'field, $self'value, $self'data, $self'mapping));
            return ();
        }
        
        ;; Receive Message2 message
        if (op == 797349837) {
            var $msg'value = in_msg~load_ref();
            var $msg'value2 = in_msg~load_ref().begin_parse();
            int $sc_1 = 10;
            int $sc_2 = 20;
            int $in_msg = ($sc_1 + $sc_2);
            throw_if($in_msg, ($in_msg == 0));
            throw(($Cell$_fun_depth($msg'value) + $Slice$_fun_depth($msg'value2)));
            $MainContract$_contract_store(($self'field, $self'value, $self'data, $self'mapping));
            return ();
        }
        
        ;; Receive Message3 message
        if (op == 1120645875) {
            var $msg'val1 = in_msg~load_int(257);
            var $msg'val2 = in_msg~load_int(257);
            var $msg'val3 = in_msg~load_int(257);
            slice sc_1 = in_msg~load_ref().begin_parse();
            var $msg'val4 = sc_1~load_int(257);
            var $msg'val5 = sc_1~load_int(257);
            var $msg'val6 = sc_1~load_int(257);
            throw(((((($msg'val1 + $msg'val2) + $msg'val3) + $msg'val4) + $msg'val5) + $msg'val6));
            $MainContract$_contract_store(($self'field, $self'value, $self'data, $self'mapping));
            return ();
        }
        
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "Text\\x00receiver\\x01.\\x0aThis \\x07 is \\x0d a \\x1f test \\x7f comment \\x9f with \\x08 bad \\x0c chars" message
    if (text_op == 0x384726d137b7c49fbc0d7801f7781fe550ac11c0c968cd9fb66c25c2a00e1365) {
        $MainContract$_contract_store(($self'field, $self'value, $self'data, $self'mapping));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
    variable @dict
    variable @internal
    variable @external

    { <s ref@ @dict ! } : init-dict
    {  0 @dict @ @procdictkeylen idict@ { \`empty } ifnot @internal ! } : init-internal
    { -1 @dict @ @procdictkeylen idict@ { \`empty } ifnot @external ! } : init-external

    {
        init-dict
        init-internal
        init-external

    } : init-variables

    { @external @ \`empty eq? not } : has-external

    { @internal @ s, } : internal,
    { @external @ s, } : external,

    @atend @ 1 {
        execute current@ context@ current!
        {
            }END> b> init-variables
                <{
                    has-external { external, } { internal, } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}"
`;
