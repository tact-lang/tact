BlockchainMessage = entries:(BcEntry / BcUnknown)+;
BcEntry =
    "[ " [1234] "]"
    "[t 0]"
    "[" date:$[^\]]+ "]"
    "[" source:$[^:]+ ":" line:$[0-9]+ "]"
    "\t"
    info:bcLine
    "\n";
bcLine = BcLimits / BcSteps / BcVmLog;
BcLimits =
    "gas limits: max=" max:number
    ", limit=" limit:number
    ", credit=" credit:number;
BcSteps =
    "steps: " steps:number
    " gas: used=" used:number
    ", max=" max:number
    ", limit=" limit:number
    ", credit=" credit:number;
BcVmLog = "VM log\n" entries:VmEntry+;
BcUnknown = text:$[^\n]+ "\n";

VmMessage = entries:VmEntry*;
VmEntry = stack:Stack other:vmLine+;
vmLine
    = VmLoc
    / VmExecute
    / VmLimitChanged
    / VmGasRemaining
    / VmException
    / VmUnknown;
Stack = "stack" stack:$[^\n]+ "\n";
VmLoc = "code cell hash: " hash:$[0-9A-F]+" offset: " offset:$[0-9]+ "\n";
VmExecute = "execute " instr:$[^\n]+ "\n";
VmLimitChanged = "changing gas limit to " limit:$[0-9]+ "\n";
VmGasRemaining = "gas remaining: " gas:$[0-9]+ "\n";
VmException = "handling exception code " errno:number ": " message:$[^\n]* "\n";
VmUnknown = !"stack" text:$[^\n]+ "\n";

number = $[0-9]+;
