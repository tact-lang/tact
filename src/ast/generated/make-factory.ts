// THIS IS AN AUTOGENERATED FILE. TO GENERATE IT AGAIN, EXECUTE yarn gen-make-functions

import type { FactoryAst } from "../ast-helpers";
import type * as Ast from "../ast";
import type { SrcInfo } from "../../grammar";
import type { Address, Cell, Slice } from "@ton/core";
import { getSrcInfo } from "../../grammar/src-info";

export const getMakeAst = (astF: FactoryAst) => {
    const emptySrcInfo = getSrcInfo(" ", 0, 0, null, "user");

    function makeAstPrimitiveTypeDecl(
        p_name: Ast.AstId,
        p_loc: SrcInfo,
    ): Ast.AstPrimitiveTypeDecl {
        return astF.createNode({
            kind: "primitive_type_decl",
            name: p_name,
            loc: p_loc,
        }) as Ast.AstPrimitiveTypeDecl;
    }

    function makeDummyAstPrimitiveTypeDecl(
        p_name: Ast.AstId,
    ): Ast.AstPrimitiveTypeDecl {
        return astF.createNode({
            kind: "primitive_type_decl",
            name: p_name,
            loc: emptySrcInfo,
        }) as Ast.AstPrimitiveTypeDecl;
    }

    function makeAstFunctionDef(
        p_attributes: readonly Ast.AstFunctionAttribute[],
        p_name: Ast.AstId,
        p_return: Ast.AstType | undefined,
        p_params: readonly Ast.AstTypedParameter[],
        p_statements: readonly Ast.AstStatement[],
        p_loc: SrcInfo,
    ): Ast.AstFunctionDef {
        return astF.createNode({
            kind: "function_def",
            attributes: p_attributes,
            name: p_name,
            return: p_return,
            params: p_params,
            statements: p_statements,
            loc: p_loc,
        }) as Ast.AstFunctionDef;
    }

    function makeDummyAstFunctionDef(
        p_attributes: readonly Ast.AstFunctionAttribute[],
        p_name: Ast.AstId,
        p_return: Ast.AstType | undefined,
        p_params: readonly Ast.AstTypedParameter[],
        p_statements: readonly Ast.AstStatement[],
    ): Ast.AstFunctionDef {
        return astF.createNode({
            kind: "function_def",
            attributes: p_attributes,
            name: p_name,
            return: p_return,
            params: p_params,
            statements: p_statements,
            loc: emptySrcInfo,
        }) as Ast.AstFunctionDef;
    }

    function makeAstAsmFunctionDef(
        p_shuffle: Ast.AstAsmShuffle,
        p_attributes: readonly Ast.AstFunctionAttribute[],
        p_name: Ast.AstId,
        p_return: Ast.AstType | undefined,
        p_params: readonly Ast.AstTypedParameter[],
        p_instructions: readonly Ast.AstAsmInstruction[],
        p_loc: SrcInfo,
    ): Ast.AstAsmFunctionDef {
        return astF.createNode({
            kind: "asm_function_def",
            shuffle: p_shuffle,
            attributes: p_attributes,
            name: p_name,
            return: p_return,
            params: p_params,
            instructions: p_instructions,
            loc: p_loc,
        }) as Ast.AstAsmFunctionDef;
    }

    function makeDummyAstAsmFunctionDef(
        p_shuffle: Ast.AstAsmShuffle,
        p_attributes: readonly Ast.AstFunctionAttribute[],
        p_name: Ast.AstId,
        p_return: Ast.AstType | undefined,
        p_params: readonly Ast.AstTypedParameter[],
        p_instructions: readonly Ast.AstAsmInstruction[],
    ): Ast.AstAsmFunctionDef {
        return astF.createNode({
            kind: "asm_function_def",
            shuffle: p_shuffle,
            attributes: p_attributes,
            name: p_name,
            return: p_return,
            params: p_params,
            instructions: p_instructions,
            loc: emptySrcInfo,
        }) as Ast.AstAsmFunctionDef;
    }

    function makeAstNativeFunctionDecl(
        p_attributes: readonly Ast.AstFunctionAttribute[],
        p_name: Ast.AstId,
        p_nativeName: Ast.AstFuncId,
        p_params: readonly Ast.AstTypedParameter[],
        p_return: Ast.AstType | undefined,
        p_loc: SrcInfo,
    ): Ast.AstNativeFunctionDecl {
        return astF.createNode({
            kind: "native_function_decl",
            attributes: p_attributes,
            name: p_name,
            nativeName: p_nativeName,
            params: p_params,
            return: p_return,
            loc: p_loc,
        }) as Ast.AstNativeFunctionDecl;
    }

    function makeDummyAstNativeFunctionDecl(
        p_attributes: readonly Ast.AstFunctionAttribute[],
        p_name: Ast.AstId,
        p_nativeName: Ast.AstFuncId,
        p_params: readonly Ast.AstTypedParameter[],
        p_return: Ast.AstType | undefined,
    ): Ast.AstNativeFunctionDecl {
        return astF.createNode({
            kind: "native_function_decl",
            attributes: p_attributes,
            name: p_name,
            nativeName: p_nativeName,
            params: p_params,
            return: p_return,
            loc: emptySrcInfo,
        }) as Ast.AstNativeFunctionDecl;
    }

    function makeAstConstantDef(
        p_attributes: readonly Ast.AstConstantAttribute[],
        p_name: Ast.AstId,
        p_type: Ast.AstType,
        p_initializer: Ast.AstExpression,
        p_loc: SrcInfo,
    ): Ast.AstConstantDef {
        return astF.createNode({
            kind: "constant_def",
            attributes: p_attributes,
            name: p_name,
            type: p_type,
            initializer: p_initializer,
            loc: p_loc,
        }) as Ast.AstConstantDef;
    }

    function makeDummyAstConstantDef(
        p_attributes: readonly Ast.AstConstantAttribute[],
        p_name: Ast.AstId,
        p_type: Ast.AstType,
        p_initializer: Ast.AstExpression,
    ): Ast.AstConstantDef {
        return astF.createNode({
            kind: "constant_def",
            attributes: p_attributes,
            name: p_name,
            type: p_type,
            initializer: p_initializer,
            loc: emptySrcInfo,
        }) as Ast.AstConstantDef;
    }

    function makeAstStructDecl(
        p_name: Ast.AstId,
        p_fields: readonly Ast.AstFieldDecl[],
        p_loc: SrcInfo,
    ): Ast.AstStructDecl {
        return astF.createNode({
            kind: "struct_decl",
            name: p_name,
            fields: p_fields,
            loc: p_loc,
        }) as Ast.AstStructDecl;
    }

    function makeDummyAstStructDecl(
        p_name: Ast.AstId,
        p_fields: readonly Ast.AstFieldDecl[],
    ): Ast.AstStructDecl {
        return astF.createNode({
            kind: "struct_decl",
            name: p_name,
            fields: p_fields,
            loc: emptySrcInfo,
        }) as Ast.AstStructDecl;
    }

    function makeAstMessageDecl(
        p_name: Ast.AstId,
        p_opcode: Ast.AstExpression | undefined,
        p_fields: readonly Ast.AstFieldDecl[],
        p_loc: SrcInfo,
    ): Ast.AstMessageDecl {
        return astF.createNode({
            kind: "message_decl",
            name: p_name,
            opcode: p_opcode,
            fields: p_fields,
            loc: p_loc,
        }) as Ast.AstMessageDecl;
    }

    function makeDummyAstMessageDecl(
        p_name: Ast.AstId,
        p_opcode: Ast.AstExpression | undefined,
        p_fields: readonly Ast.AstFieldDecl[],
    ): Ast.AstMessageDecl {
        return astF.createNode({
            kind: "message_decl",
            name: p_name,
            opcode: p_opcode,
            fields: p_fields,
            loc: emptySrcInfo,
        }) as Ast.AstMessageDecl;
    }

    function makeAstContract(
        p_name: Ast.AstId,
        p_traits: readonly Ast.AstId[],
        p_attributes: readonly Ast.AstContractAttribute[],
        p_params: undefined | readonly Ast.AstFieldDecl[],
        p_declarations: readonly Ast.AstContractDeclaration[],
        p_loc: SrcInfo,
    ): Ast.AstContract {
        return astF.createNode({
            kind: "contract",
            name: p_name,
            traits: p_traits,
            attributes: p_attributes,
            params: p_params,
            declarations: p_declarations,
            loc: p_loc,
        }) as Ast.AstContract;
    }

    function makeDummyAstContract(
        p_name: Ast.AstId,
        p_traits: readonly Ast.AstId[],
        p_attributes: readonly Ast.AstContractAttribute[],
        p_params: undefined | readonly Ast.AstFieldDecl[],
        p_declarations: readonly Ast.AstContractDeclaration[],
    ): Ast.AstContract {
        return astF.createNode({
            kind: "contract",
            name: p_name,
            traits: p_traits,
            attributes: p_attributes,
            params: p_params,
            declarations: p_declarations,
            loc: emptySrcInfo,
        }) as Ast.AstContract;
    }

    function makeAstTrait(
        p_name: Ast.AstId,
        p_traits: readonly Ast.AstId[],
        p_attributes: readonly Ast.AstContractAttribute[],
        p_declarations: readonly Ast.AstTraitDeclaration[],
        p_loc: SrcInfo,
    ): Ast.AstTrait {
        return astF.createNode({
            kind: "trait",
            name: p_name,
            traits: p_traits,
            attributes: p_attributes,
            declarations: p_declarations,
            loc: p_loc,
        }) as Ast.AstTrait;
    }

    function makeDummyAstTrait(
        p_name: Ast.AstId,
        p_traits: readonly Ast.AstId[],
        p_attributes: readonly Ast.AstContractAttribute[],
        p_declarations: readonly Ast.AstTraitDeclaration[],
    ): Ast.AstTrait {
        return astF.createNode({
            kind: "trait",
            name: p_name,
            traits: p_traits,
            attributes: p_attributes,
            declarations: p_declarations,
            loc: emptySrcInfo,
        }) as Ast.AstTrait;
    }

    function makeAstFieldDecl(
        p_name: Ast.AstId,
        p_type: Ast.AstType,
        p_initializer: Ast.AstExpression | undefined,
        p_as: Ast.AstId | undefined,
        p_loc: SrcInfo,
    ): Ast.AstFieldDecl {
        return astF.createNode({
            kind: "field_decl",
            name: p_name,
            type: p_type,
            initializer: p_initializer,
            as: p_as,
            loc: p_loc,
        }) as Ast.AstFieldDecl;
    }

    function makeDummyAstFieldDecl(
        p_name: Ast.AstId,
        p_type: Ast.AstType,
        p_initializer: Ast.AstExpression | undefined,
        p_as: Ast.AstId | undefined,
    ): Ast.AstFieldDecl {
        return astF.createNode({
            kind: "field_decl",
            name: p_name,
            type: p_type,
            initializer: p_initializer,
            as: p_as,
            loc: emptySrcInfo,
        }) as Ast.AstFieldDecl;
    }

    function makeAstContractInit(
        p_params: readonly Ast.AstTypedParameter[],
        p_statements: readonly Ast.AstStatement[],
        p_loc: SrcInfo,
    ): Ast.AstContractInit {
        return astF.createNode({
            kind: "contract_init",
            params: p_params,
            statements: p_statements,
            loc: p_loc,
        }) as Ast.AstContractInit;
    }

    function makeDummyAstContractInit(
        p_params: readonly Ast.AstTypedParameter[],
        p_statements: readonly Ast.AstStatement[],
    ): Ast.AstContractInit {
        return astF.createNode({
            kind: "contract_init",
            params: p_params,
            statements: p_statements,
            loc: emptySrcInfo,
        }) as Ast.AstContractInit;
    }

    function makeAstReceiver(
        p_selector: Ast.AstReceiverKind,
        p_statements: readonly Ast.AstStatement[],
        p_loc: SrcInfo,
    ): Ast.AstReceiver {
        return astF.createNode({
            kind: "receiver",
            selector: p_selector,
            statements: p_statements,
            loc: p_loc,
        }) as Ast.AstReceiver;
    }

    function makeDummyAstReceiver(
        p_selector: Ast.AstReceiverKind,
        p_statements: readonly Ast.AstStatement[],
    ): Ast.AstReceiver {
        return astF.createNode({
            kind: "receiver",
            selector: p_selector,
            statements: p_statements,
            loc: emptySrcInfo,
        }) as Ast.AstReceiver;
    }

    function makeAstFunctionDecl(
        p_attributes: readonly Ast.AstFunctionAttribute[],
        p_name: Ast.AstId,
        p_return: Ast.AstType | undefined,
        p_params: readonly Ast.AstTypedParameter[],
        p_loc: SrcInfo,
    ): Ast.AstFunctionDecl {
        return astF.createNode({
            kind: "function_decl",
            attributes: p_attributes,
            name: p_name,
            return: p_return,
            params: p_params,
            loc: p_loc,
        }) as Ast.AstFunctionDecl;
    }

    function makeDummyAstFunctionDecl(
        p_attributes: readonly Ast.AstFunctionAttribute[],
        p_name: Ast.AstId,
        p_return: Ast.AstType | undefined,
        p_params: readonly Ast.AstTypedParameter[],
    ): Ast.AstFunctionDecl {
        return astF.createNode({
            kind: "function_decl",
            attributes: p_attributes,
            name: p_name,
            return: p_return,
            params: p_params,
            loc: emptySrcInfo,
        }) as Ast.AstFunctionDecl;
    }

    function makeAstConstantDecl(
        p_attributes: readonly Ast.AstConstantAttribute[],
        p_name: Ast.AstId,
        p_type: Ast.AstType,
        p_loc: SrcInfo,
    ): Ast.AstConstantDecl {
        return astF.createNode({
            kind: "constant_decl",
            attributes: p_attributes,
            name: p_name,
            type: p_type,
            loc: p_loc,
        }) as Ast.AstConstantDecl;
    }

    function makeDummyAstConstantDecl(
        p_attributes: readonly Ast.AstConstantAttribute[],
        p_name: Ast.AstId,
        p_type: Ast.AstType,
    ): Ast.AstConstantDecl {
        return astF.createNode({
            kind: "constant_decl",
            attributes: p_attributes,
            name: p_name,
            type: p_type,
            loc: emptySrcInfo,
        }) as Ast.AstConstantDecl;
    }

    function makeAstStatementLet(
        p_name: Ast.AstId,
        p_type: Ast.AstType | undefined,
        p_expression: Ast.AstExpression,
        p_loc: SrcInfo,
    ): Ast.AstStatementLet {
        return astF.createNode({
            kind: "statement_let",
            name: p_name,
            type: p_type,
            expression: p_expression,
            loc: p_loc,
        }) as Ast.AstStatementLet;
    }

    function makeDummyAstStatementLet(
        p_name: Ast.AstId,
        p_type: Ast.AstType | undefined,
        p_expression: Ast.AstExpression,
    ): Ast.AstStatementLet {
        return astF.createNode({
            kind: "statement_let",
            name: p_name,
            type: p_type,
            expression: p_expression,
            loc: emptySrcInfo,
        }) as Ast.AstStatementLet;
    }

    function makeAstStatementReturn(
        p_expression: Ast.AstExpression | undefined,
        p_loc: SrcInfo,
    ): Ast.AstStatementReturn {
        return astF.createNode({
            kind: "statement_return",
            expression: p_expression,
            loc: p_loc,
        }) as Ast.AstStatementReturn;
    }

    function makeDummyAstStatementReturn(
        p_expression: Ast.AstExpression | undefined,
    ): Ast.AstStatementReturn {
        return astF.createNode({
            kind: "statement_return",
            expression: p_expression,
            loc: emptySrcInfo,
        }) as Ast.AstStatementReturn;
    }

    function makeAstStatementExpression(
        p_expression: Ast.AstExpression,
        p_loc: SrcInfo,
    ): Ast.AstStatementExpression {
        return astF.createNode({
            kind: "statement_expression",
            expression: p_expression,
            loc: p_loc,
        }) as Ast.AstStatementExpression;
    }

    function makeDummyAstStatementExpression(
        p_expression: Ast.AstExpression,
    ): Ast.AstStatementExpression {
        return astF.createNode({
            kind: "statement_expression",
            expression: p_expression,
            loc: emptySrcInfo,
        }) as Ast.AstStatementExpression;
    }

    function makeAstStatementAssign(
        p_path: Ast.AstExpression,
        p_expression: Ast.AstExpression,
        p_loc: SrcInfo,
    ): Ast.AstStatementAssign {
        return astF.createNode({
            kind: "statement_assign",
            path: p_path,
            expression: p_expression,
            loc: p_loc,
        }) as Ast.AstStatementAssign;
    }

    function makeDummyAstStatementAssign(
        p_path: Ast.AstExpression,
        p_expression: Ast.AstExpression,
    ): Ast.AstStatementAssign {
        return astF.createNode({
            kind: "statement_assign",
            path: p_path,
            expression: p_expression,
            loc: emptySrcInfo,
        }) as Ast.AstStatementAssign;
    }

    function makeAstStatementAugmentedAssign(
        p_op: Ast.AstAugmentedAssignOperation,
        p_path: Ast.AstExpression,
        p_expression: Ast.AstExpression,
        p_loc: SrcInfo,
    ): Ast.AstStatementAugmentedAssign {
        return astF.createNode({
            kind: "statement_augmentedassign",
            op: p_op,
            path: p_path,
            expression: p_expression,
            loc: p_loc,
        }) as Ast.AstStatementAugmentedAssign;
    }

    function makeDummyAstStatementAugmentedAssign(
        p_op: Ast.AstAugmentedAssignOperation,
        p_path: Ast.AstExpression,
        p_expression: Ast.AstExpression,
    ): Ast.AstStatementAugmentedAssign {
        return astF.createNode({
            kind: "statement_augmentedassign",
            op: p_op,
            path: p_path,
            expression: p_expression,
            loc: emptySrcInfo,
        }) as Ast.AstStatementAugmentedAssign;
    }

    function makeAstStatementCondition(
        p_condition: Ast.AstExpression,
        p_trueStatements: readonly Ast.AstStatement[],
        p_falseStatements: readonly Ast.AstStatement[] | undefined,
        p_loc: SrcInfo,
    ): Ast.AstStatementCondition {
        return astF.createNode({
            kind: "statement_condition",
            condition: p_condition,
            trueStatements: p_trueStatements,
            falseStatements: p_falseStatements,
            loc: p_loc,
        }) as Ast.AstStatementCondition;
    }

    function makeDummyAstStatementCondition(
        p_condition: Ast.AstExpression,
        p_trueStatements: readonly Ast.AstStatement[],
        p_falseStatements: readonly Ast.AstStatement[] | undefined,
    ): Ast.AstStatementCondition {
        return astF.createNode({
            kind: "statement_condition",
            condition: p_condition,
            trueStatements: p_trueStatements,
            falseStatements: p_falseStatements,
            loc: emptySrcInfo,
        }) as Ast.AstStatementCondition;
    }

    function makeAstStatementWhile(
        p_condition: Ast.AstExpression,
        p_statements: readonly Ast.AstStatement[],
        p_loc: SrcInfo,
    ): Ast.AstStatementWhile {
        return astF.createNode({
            kind: "statement_while",
            condition: p_condition,
            statements: p_statements,
            loc: p_loc,
        }) as Ast.AstStatementWhile;
    }

    function makeDummyAstStatementWhile(
        p_condition: Ast.AstExpression,
        p_statements: readonly Ast.AstStatement[],
    ): Ast.AstStatementWhile {
        return astF.createNode({
            kind: "statement_while",
            condition: p_condition,
            statements: p_statements,
            loc: emptySrcInfo,
        }) as Ast.AstStatementWhile;
    }

    function makeAstStatementUntil(
        p_condition: Ast.AstExpression,
        p_statements: readonly Ast.AstStatement[],
        p_loc: SrcInfo,
    ): Ast.AstStatementUntil {
        return astF.createNode({
            kind: "statement_until",
            condition: p_condition,
            statements: p_statements,
            loc: p_loc,
        }) as Ast.AstStatementUntil;
    }

    function makeDummyAstStatementUntil(
        p_condition: Ast.AstExpression,
        p_statements: readonly Ast.AstStatement[],
    ): Ast.AstStatementUntil {
        return astF.createNode({
            kind: "statement_until",
            condition: p_condition,
            statements: p_statements,
            loc: emptySrcInfo,
        }) as Ast.AstStatementUntil;
    }

    function makeAstStatementRepeat(
        p_iterations: Ast.AstExpression,
        p_statements: readonly Ast.AstStatement[],
        p_loc: SrcInfo,
    ): Ast.AstStatementRepeat {
        return astF.createNode({
            kind: "statement_repeat",
            iterations: p_iterations,
            statements: p_statements,
            loc: p_loc,
        }) as Ast.AstStatementRepeat;
    }

    function makeDummyAstStatementRepeat(
        p_iterations: Ast.AstExpression,
        p_statements: readonly Ast.AstStatement[],
    ): Ast.AstStatementRepeat {
        return astF.createNode({
            kind: "statement_repeat",
            iterations: p_iterations,
            statements: p_statements,
            loc: emptySrcInfo,
        }) as Ast.AstStatementRepeat;
    }

    function makeAstStatementTry(
        p_statements: readonly Ast.AstStatement[],
        p_catchBlock: Ast.AstCatchBlock | undefined,
        p_loc: SrcInfo,
    ): Ast.AstStatementTry {
        return astF.createNode({
            kind: "statement_try",
            statements: p_statements,
            catchBlock: p_catchBlock,
            loc: p_loc,
        }) as Ast.AstStatementTry;
    }

    function makeDummyAstStatementTry(
        p_statements: readonly Ast.AstStatement[],
        p_catchBlock: Ast.AstCatchBlock | undefined,
    ): Ast.AstStatementTry {
        return astF.createNode({
            kind: "statement_try",
            statements: p_statements,
            catchBlock: p_catchBlock,
            loc: emptySrcInfo,
        }) as Ast.AstStatementTry;
    }

    function makeAstStatementForEach(
        p_keyName: Ast.AstId,
        p_valueName: Ast.AstId,
        p_map: Ast.AstExpression,
        p_statements: readonly Ast.AstStatement[],
        p_loc: SrcInfo,
    ): Ast.AstStatementForEach {
        return astF.createNode({
            kind: "statement_foreach",
            keyName: p_keyName,
            valueName: p_valueName,
            map: p_map,
            statements: p_statements,
            loc: p_loc,
        }) as Ast.AstStatementForEach;
    }

    function makeDummyAstStatementForEach(
        p_keyName: Ast.AstId,
        p_valueName: Ast.AstId,
        p_map: Ast.AstExpression,
        p_statements: readonly Ast.AstStatement[],
    ): Ast.AstStatementForEach {
        return astF.createNode({
            kind: "statement_foreach",
            keyName: p_keyName,
            valueName: p_valueName,
            map: p_map,
            statements: p_statements,
            loc: emptySrcInfo,
        }) as Ast.AstStatementForEach;
    }

    function makeAstStatementDestruct(
        p_type: Ast.AstTypeId,
        p_identifiers: ReadonlyMap<string, readonly [Ast.AstId, Ast.AstId]>,
        p_ignoreUnspecifiedFields: boolean,
        p_expression: Ast.AstExpression,
        p_loc: SrcInfo,
    ): Ast.AstStatementDestruct {
        return astF.createNode({
            kind: "statement_destruct",
            type: p_type,
            identifiers: p_identifiers,
            ignoreUnspecifiedFields: p_ignoreUnspecifiedFields,
            expression: p_expression,
            loc: p_loc,
        }) as Ast.AstStatementDestruct;
    }

    function makeDummyAstStatementDestruct(
        p_type: Ast.AstTypeId,
        p_identifiers: ReadonlyMap<string, readonly [Ast.AstId, Ast.AstId]>,
        p_ignoreUnspecifiedFields: boolean,
        p_expression: Ast.AstExpression,
    ): Ast.AstStatementDestruct {
        return astF.createNode({
            kind: "statement_destruct",
            type: p_type,
            identifiers: p_identifiers,
            ignoreUnspecifiedFields: p_ignoreUnspecifiedFields,
            expression: p_expression,
            loc: emptySrcInfo,
        }) as Ast.AstStatementDestruct;
    }

    function makeAstStatementBlock(
        p_statements: readonly Ast.AstStatement[],
        p_loc: SrcInfo,
    ): Ast.AstStatementBlock {
        return astF.createNode({
            kind: "statement_block",
            statements: p_statements,
            loc: p_loc,
        }) as Ast.AstStatementBlock;
    }

    function makeDummyAstStatementBlock(
        p_statements: readonly Ast.AstStatement[],
    ): Ast.AstStatementBlock {
        return astF.createNode({
            kind: "statement_block",
            statements: p_statements,
            loc: emptySrcInfo,
        }) as Ast.AstStatementBlock;
    }

    function makeAstTypeId(p_text: string, p_loc: SrcInfo): Ast.AstTypeId {
        return astF.createNode({
            kind: "type_id",
            text: p_text,
            loc: p_loc,
        }) as Ast.AstTypeId;
    }

    function makeDummyAstTypeId(p_text: string): Ast.AstTypeId {
        return astF.createNode({
            kind: "type_id",
            text: p_text,
            loc: emptySrcInfo,
        }) as Ast.AstTypeId;
    }

    function makeAstOptionalType(
        p_typeArg: Ast.AstType,
        p_loc: SrcInfo,
    ): Ast.AstOptionalType {
        return astF.createNode({
            kind: "optional_type",
            typeArg: p_typeArg,
            loc: p_loc,
        }) as Ast.AstOptionalType;
    }

    function makeDummyAstOptionalType(
        p_typeArg: Ast.AstType,
    ): Ast.AstOptionalType {
        return astF.createNode({
            kind: "optional_type",
            typeArg: p_typeArg,
            loc: emptySrcInfo,
        }) as Ast.AstOptionalType;
    }

    function makeAstMapType(
        p_keyType: Ast.AstTypeId,
        p_keyStorageType: Ast.AstId | undefined,
        p_valueType: Ast.AstTypeId,
        p_valueStorageType: Ast.AstId | undefined,
        p_loc: SrcInfo,
    ): Ast.AstMapType {
        return astF.createNode({
            kind: "map_type",
            keyType: p_keyType,
            keyStorageType: p_keyStorageType,
            valueType: p_valueType,
            valueStorageType: p_valueStorageType,
            loc: p_loc,
        }) as Ast.AstMapType;
    }

    function makeDummyAstMapType(
        p_keyType: Ast.AstTypeId,
        p_keyStorageType: Ast.AstId | undefined,
        p_valueType: Ast.AstTypeId,
        p_valueStorageType: Ast.AstId | undefined,
    ): Ast.AstMapType {
        return astF.createNode({
            kind: "map_type",
            keyType: p_keyType,
            keyStorageType: p_keyStorageType,
            valueType: p_valueType,
            valueStorageType: p_valueStorageType,
            loc: emptySrcInfo,
        }) as Ast.AstMapType;
    }

    function makeAstBouncedMessageType(
        p_messageType: Ast.AstTypeId,
        p_loc: SrcInfo,
    ): Ast.AstBouncedMessageType {
        return astF.createNode({
            kind: "bounced_message_type",
            messageType: p_messageType,
            loc: p_loc,
        }) as Ast.AstBouncedMessageType;
    }

    function makeDummyAstBouncedMessageType(
        p_messageType: Ast.AstTypeId,
    ): Ast.AstBouncedMessageType {
        return astF.createNode({
            kind: "bounced_message_type",
            messageType: p_messageType,
            loc: emptySrcInfo,
        }) as Ast.AstBouncedMessageType;
    }

    function makeAstOpBinary(
        p_op: Ast.AstBinaryOperation,
        p_left: Ast.AstExpression,
        p_right: Ast.AstExpression,
        p_loc: SrcInfo,
    ): Ast.AstOpBinary {
        return astF.createNode({
            kind: "op_binary",
            op: p_op,
            left: p_left,
            right: p_right,
            loc: p_loc,
        }) as Ast.AstOpBinary;
    }

    function makeDummyAstOpBinary(
        p_op: Ast.AstBinaryOperation,
        p_left: Ast.AstExpression,
        p_right: Ast.AstExpression,
    ): Ast.AstOpBinary {
        return astF.createNode({
            kind: "op_binary",
            op: p_op,
            left: p_left,
            right: p_right,
            loc: emptySrcInfo,
        }) as Ast.AstOpBinary;
    }

    function makeAstOpUnary(
        p_op: Ast.AstUnaryOperation,
        p_operand: Ast.AstExpression,
        p_loc: SrcInfo,
    ): Ast.AstOpUnary {
        return astF.createNode({
            kind: "op_unary",
            op: p_op,
            operand: p_operand,
            loc: p_loc,
        }) as Ast.AstOpUnary;
    }

    function makeDummyAstOpUnary(
        p_op: Ast.AstUnaryOperation,
        p_operand: Ast.AstExpression,
    ): Ast.AstOpUnary {
        return astF.createNode({
            kind: "op_unary",
            op: p_op,
            operand: p_operand,
            loc: emptySrcInfo,
        }) as Ast.AstOpUnary;
    }

    function makeAstConditional(
        p_condition: Ast.AstExpression,
        p_thenBranch: Ast.AstExpression,
        p_elseBranch: Ast.AstExpression,
        p_loc: SrcInfo,
    ): Ast.AstConditional {
        return astF.createNode({
            kind: "conditional",
            condition: p_condition,
            thenBranch: p_thenBranch,
            elseBranch: p_elseBranch,
            loc: p_loc,
        }) as Ast.AstConditional;
    }

    function makeDummyAstConditional(
        p_condition: Ast.AstExpression,
        p_thenBranch: Ast.AstExpression,
        p_elseBranch: Ast.AstExpression,
    ): Ast.AstConditional {
        return astF.createNode({
            kind: "conditional",
            condition: p_condition,
            thenBranch: p_thenBranch,
            elseBranch: p_elseBranch,
            loc: emptySrcInfo,
        }) as Ast.AstConditional;
    }

    function makeAstMethodCall(
        p_self: Ast.AstExpression,
        p_method: Ast.AstId,
        p_args: readonly Ast.AstExpression[],
        p_loc: SrcInfo,
    ): Ast.AstMethodCall {
        return astF.createNode({
            kind: "method_call",
            self: p_self,
            method: p_method,
            args: p_args,
            loc: p_loc,
        }) as Ast.AstMethodCall;
    }

    function makeDummyAstMethodCall(
        p_self: Ast.AstExpression,
        p_method: Ast.AstId,
        p_args: readonly Ast.AstExpression[],
    ): Ast.AstMethodCall {
        return astF.createNode({
            kind: "method_call",
            self: p_self,
            method: p_method,
            args: p_args,
            loc: emptySrcInfo,
        }) as Ast.AstMethodCall;
    }

    function makeAstFieldAccess(
        p_aggregate: Ast.AstExpression,
        p_field: Ast.AstId,
        p_loc: SrcInfo,
    ): Ast.AstFieldAccess {
        return astF.createNode({
            kind: "field_access",
            aggregate: p_aggregate,
            field: p_field,
            loc: p_loc,
        }) as Ast.AstFieldAccess;
    }

    function makeDummyAstFieldAccess(
        p_aggregate: Ast.AstExpression,
        p_field: Ast.AstId,
    ): Ast.AstFieldAccess {
        return astF.createNode({
            kind: "field_access",
            aggregate: p_aggregate,
            field: p_field,
            loc: emptySrcInfo,
        }) as Ast.AstFieldAccess;
    }

    function makeAstStaticCall(
        p_function: Ast.AstId,
        p_args: readonly Ast.AstExpression[],
        p_loc: SrcInfo,
    ): Ast.AstStaticCall {
        return astF.createNode({
            kind: "static_call",
            function: p_function,
            args: p_args,
            loc: p_loc,
        }) as Ast.AstStaticCall;
    }

    function makeDummyAstStaticCall(
        p_function: Ast.AstId,
        p_args: readonly Ast.AstExpression[],
    ): Ast.AstStaticCall {
        return astF.createNode({
            kind: "static_call",
            function: p_function,
            args: p_args,
            loc: emptySrcInfo,
        }) as Ast.AstStaticCall;
    }

    function makeAstStructInstance(
        p_type: Ast.AstId,
        p_args: readonly Ast.AstStructFieldInitializer[],
        p_loc: SrcInfo,
    ): Ast.AstStructInstance {
        return astF.createNode({
            kind: "struct_instance",
            type: p_type,
            args: p_args,
            loc: p_loc,
        }) as Ast.AstStructInstance;
    }

    function makeDummyAstStructInstance(
        p_type: Ast.AstId,
        p_args: readonly Ast.AstStructFieldInitializer[],
    ): Ast.AstStructInstance {
        return astF.createNode({
            kind: "struct_instance",
            type: p_type,
            args: p_args,
            loc: emptySrcInfo,
        }) as Ast.AstStructInstance;
    }

    function makeAstId(p_text: string, p_loc: SrcInfo): Ast.AstId {
        return astF.createNode({
            kind: "id",
            text: p_text,
            loc: p_loc,
        }) as Ast.AstId;
    }

    function makeDummyAstId(p_text: string): Ast.AstId {
        return astF.createNode({
            kind: "id",
            text: p_text,
            loc: emptySrcInfo,
        }) as Ast.AstId;
    }

    function makeAstInitOf(
        p_contract: Ast.AstId,
        p_args: readonly Ast.AstExpression[],
        p_loc: SrcInfo,
    ): Ast.AstInitOf {
        return astF.createNode({
            kind: "init_of",
            contract: p_contract,
            args: p_args,
            loc: p_loc,
        }) as Ast.AstInitOf;
    }

    function makeDummyAstInitOf(
        p_contract: Ast.AstId,
        p_args: readonly Ast.AstExpression[],
    ): Ast.AstInitOf {
        return astF.createNode({
            kind: "init_of",
            contract: p_contract,
            args: p_args,
            loc: emptySrcInfo,
        }) as Ast.AstInitOf;
    }

    function makeAstCodeOf(
        p_contract: Ast.AstId,
        p_loc: SrcInfo,
    ): Ast.AstCodeOf {
        return astF.createNode({
            kind: "code_of",
            contract: p_contract,
            loc: p_loc,
        }) as Ast.AstCodeOf;
    }

    function makeDummyAstCodeOf(p_contract: Ast.AstId): Ast.AstCodeOf {
        return astF.createNode({
            kind: "code_of",
            contract: p_contract,
            loc: emptySrcInfo,
        }) as Ast.AstCodeOf;
    }

    function makeAstString(p_value: string, p_loc: SrcInfo): Ast.AstString {
        return astF.createNode({
            kind: "string",
            value: p_value,
            loc: p_loc,
        }) as Ast.AstString;
    }

    function makeDummyAstString(p_value: string): Ast.AstString {
        return astF.createNode({
            kind: "string",
            value: p_value,
            loc: emptySrcInfo,
        }) as Ast.AstString;
    }

    function makeAstNumber(
        p_base: Ast.AstNumberBase,
        p_value: bigint,
        p_loc: SrcInfo,
    ): Ast.AstNumber {
        return astF.createNode({
            kind: "number",
            base: p_base,
            value: p_value,
            loc: p_loc,
        }) as Ast.AstNumber;
    }

    function makeDummyAstNumber(
        p_base: Ast.AstNumberBase,
        p_value: bigint,
    ): Ast.AstNumber {
        return astF.createNode({
            kind: "number",
            base: p_base,
            value: p_value,
            loc: emptySrcInfo,
        }) as Ast.AstNumber;
    }

    function makeAstBoolean(p_value: boolean, p_loc: SrcInfo): Ast.AstBoolean {
        return astF.createNode({
            kind: "boolean",
            value: p_value,
            loc: p_loc,
        }) as Ast.AstBoolean;
    }

    function makeDummyAstBoolean(p_value: boolean): Ast.AstBoolean {
        return astF.createNode({
            kind: "boolean",
            value: p_value,
            loc: emptySrcInfo,
        }) as Ast.AstBoolean;
    }

    function makeAstNull(p_loc: SrcInfo): Ast.AstNull {
        return astF.createNode({
            kind: "null",
            loc: p_loc,
        }) as Ast.AstNull;
    }

    function makeDummyAstNull(): Ast.AstNull {
        return astF.createNode({
            kind: "null",
            loc: emptySrcInfo,
        }) as Ast.AstNull;
    }

    function makeAstSimplifiedString(
        p_value: string,
        p_loc: SrcInfo,
    ): Ast.AstSimplifiedString {
        return astF.createNode({
            kind: "simplified_string",
            value: p_value,
            loc: p_loc,
        }) as Ast.AstSimplifiedString;
    }

    function makeDummyAstSimplifiedString(
        p_value: string,
    ): Ast.AstSimplifiedString {
        return astF.createNode({
            kind: "simplified_string",
            value: p_value,
            loc: emptySrcInfo,
        }) as Ast.AstSimplifiedString;
    }

    function makeAstAddress(p_value: Address, p_loc: SrcInfo): Ast.AstAddress {
        return astF.createNode({
            kind: "address",
            value: p_value,
            loc: p_loc,
        }) as Ast.AstAddress;
    }

    function makeDummyAstAddress(p_value: Address): Ast.AstAddress {
        return astF.createNode({
            kind: "address",
            value: p_value,
            loc: emptySrcInfo,
        }) as Ast.AstAddress;
    }

    function makeAstCell(p_value: Cell, p_loc: SrcInfo): Ast.AstCell {
        return astF.createNode({
            kind: "cell",
            value: p_value,
            loc: p_loc,
        }) as Ast.AstCell;
    }

    function makeDummyAstCell(p_value: Cell): Ast.AstCell {
        return astF.createNode({
            kind: "cell",
            value: p_value,
            loc: emptySrcInfo,
        }) as Ast.AstCell;
    }

    function makeAstSlice(p_value: Slice, p_loc: SrcInfo): Ast.AstSlice {
        return astF.createNode({
            kind: "slice",
            value: p_value,
            loc: p_loc,
        }) as Ast.AstSlice;
    }

    function makeDummyAstSlice(p_value: Slice): Ast.AstSlice {
        return astF.createNode({
            kind: "slice",
            value: p_value,
            loc: emptySrcInfo,
        }) as Ast.AstSlice;
    }

    function makeAstStructValue(
        p_type: Ast.AstId,
        p_args: readonly Ast.AstStructFieldValue[],
        p_loc: SrcInfo,
    ): Ast.AstStructValue {
        return astF.createNode({
            kind: "struct_value",
            type: p_type,
            args: p_args,
            loc: p_loc,
        }) as Ast.AstStructValue;
    }

    function makeDummyAstStructValue(
        p_type: Ast.AstId,
        p_args: readonly Ast.AstStructFieldValue[],
    ): Ast.AstStructValue {
        return astF.createNode({
            kind: "struct_value",
            type: p_type,
            args: p_args,
            loc: emptySrcInfo,
        }) as Ast.AstStructValue;
    }

    function makeAstFunctionAttributeGet(
        p_methodId: Ast.AstExpression | undefined,
        p_loc: SrcInfo,
    ): Ast.AstFunctionAttributeGet {
        return astF.createNode({
            kind: "function_attribute",
            type: "get",
            methodId: p_methodId,
            loc: p_loc,
        }) as Ast.AstFunctionAttributeGet;
    }

    function makeDummyAstFunctionAttributeGet(
        p_methodId: Ast.AstExpression | undefined,
    ): Ast.AstFunctionAttributeGet {
        return astF.createNode({
            kind: "function_attribute",
            type: "get",
            methodId: p_methodId,
            loc: emptySrcInfo,
        }) as Ast.AstFunctionAttributeGet;
    }

    function makeAstFunctionAttributeRest(
        p_type: Ast.AstFunctionAttributeName,
        p_loc: SrcInfo,
    ): Ast.AstFunctionAttributeRest {
        return astF.createNode({
            kind: "function_attribute",
            type: p_type,
            loc: p_loc,
        }) as Ast.AstFunctionAttributeRest;
    }

    function makeDummyAstFunctionAttributeRest(
        p_type: Ast.AstFunctionAttributeName,
    ): Ast.AstFunctionAttributeRest {
        return astF.createNode({
            kind: "function_attribute",
            type: p_type,
            loc: emptySrcInfo,
        }) as Ast.AstFunctionAttributeRest;
    }

    function makeAstReceiverSimple(
        p_param: Ast.AstTypedParameter,
    ): Ast.AstReceiverSimple {
        return astF.createNode({
            kind: "simple",
            param: p_param,
        }) as Ast.AstReceiverSimple;
    }

    function makeAstReceiverFallback(): Ast.AstReceiverFallback {
        return astF.createNode({
            kind: "fallback",
        }) as Ast.AstReceiverFallback;
    }

    function makeAstReceiverComment(
        p_comment: Ast.AstString,
    ): Ast.AstReceiverComment {
        return astF.createNode({
            kind: "comment",
            comment: p_comment,
        }) as Ast.AstReceiverComment;
    }

    function makeAstReceiverInternal(
        p_subKind: Ast.AstReceiverSubKind,
        p_loc: SrcInfo,
    ): Ast.AstReceiverInternal {
        return astF.createNode({
            kind: "internal",
            subKind: p_subKind,
            loc: p_loc,
        }) as Ast.AstReceiverInternal;
    }

    function makeDummyAstReceiverInternal(
        p_subKind: Ast.AstReceiverSubKind,
    ): Ast.AstReceiverInternal {
        return astF.createNode({
            kind: "internal",
            subKind: p_subKind,
            loc: emptySrcInfo,
        }) as Ast.AstReceiverInternal;
    }

    function makeAstReceiverExternal(
        p_subKind: Ast.AstReceiverSubKind,
        p_loc: SrcInfo,
    ): Ast.AstReceiverExternal {
        return astF.createNode({
            kind: "external",
            subKind: p_subKind,
            loc: p_loc,
        }) as Ast.AstReceiverExternal;
    }

    function makeDummyAstReceiverExternal(
        p_subKind: Ast.AstReceiverSubKind,
    ): Ast.AstReceiverExternal {
        return astF.createNode({
            kind: "external",
            subKind: p_subKind,
            loc: emptySrcInfo,
        }) as Ast.AstReceiverExternal;
    }

    function makeAstReceiverBounce(
        p_param: Ast.AstTypedParameter,
        p_loc: SrcInfo,
    ): Ast.AstReceiverBounce {
        return astF.createNode({
            kind: "bounce",
            param: p_param,
            loc: p_loc,
        }) as Ast.AstReceiverBounce;
    }

    function makeDummyAstReceiverBounce(
        p_param: Ast.AstTypedParameter,
    ): Ast.AstReceiverBounce {
        return astF.createNode({
            kind: "bounce",
            param: p_param,
            loc: emptySrcInfo,
        }) as Ast.AstReceiverBounce;
    }

    function makeAstFuncId(p_text: string, p_loc: SrcInfo): Ast.AstFuncId {
        return astF.createNode({
            kind: "func_id",
            text: p_text,
            loc: p_loc,
        }) as Ast.AstFuncId;
    }

    function makeDummyAstFuncId(p_text: string): Ast.AstFuncId {
        return astF.createNode({
            kind: "func_id",
            text: p_text,
            loc: emptySrcInfo,
        }) as Ast.AstFuncId;
    }

    function makeAstDestructMapping(
        p_field: Ast.AstId,
        p_name: Ast.AstId,
        p_loc: SrcInfo,
    ): Ast.AstDestructMapping {
        return astF.createNode({
            kind: "destruct_mapping",
            field: p_field,
            name: p_name,
            loc: p_loc,
        }) as Ast.AstDestructMapping;
    }

    function makeDummyAstDestructMapping(
        p_field: Ast.AstId,
        p_name: Ast.AstId,
    ): Ast.AstDestructMapping {
        return astF.createNode({
            kind: "destruct_mapping",
            field: p_field,
            name: p_name,
            loc: emptySrcInfo,
        }) as Ast.AstDestructMapping;
    }

    function makeAstDestructEnd(
        p_ignoreUnspecifiedFields: boolean,
        p_loc: SrcInfo,
    ): Ast.AstDestructEnd {
        return astF.createNode({
            kind: "destruct_end",
            ignoreUnspecifiedFields: p_ignoreUnspecifiedFields,
            loc: p_loc,
        }) as Ast.AstDestructEnd;
    }

    function makeDummyAstDestructEnd(
        p_ignoreUnspecifiedFields: boolean,
    ): Ast.AstDestructEnd {
        return astF.createNode({
            kind: "destruct_end",
            ignoreUnspecifiedFields: p_ignoreUnspecifiedFields,
            loc: emptySrcInfo,
        }) as Ast.AstDestructEnd;
    }

    function makeAstTypedParameter(
        p_name: Ast.AstId,
        p_type: Ast.AstType,
        p_loc: SrcInfo,
    ): Ast.AstTypedParameter {
        return astF.createNode({
            kind: "typed_parameter",
            name: p_name,
            type: p_type,
            loc: p_loc,
        }) as Ast.AstTypedParameter;
    }

    function makeDummyAstTypedParameter(
        p_name: Ast.AstId,
        p_type: Ast.AstType,
    ): Ast.AstTypedParameter {
        return astF.createNode({
            kind: "typed_parameter",
            name: p_name,
            type: p_type,
            loc: emptySrcInfo,
        }) as Ast.AstTypedParameter;
    }

    function makeAstModule(
        p_imports: readonly Ast.AstImport[],
        p_items: readonly Ast.AstModuleItem[],
    ): Ast.AstModule {
        return astF.createNode({
            kind: "module",
            imports: p_imports,
            items: p_items,
        }) as Ast.AstModule;
    }

    function makeAstStructFieldInitializer(
        p_field: Ast.AstId,
        p_initializer: Ast.AstExpression,
        p_loc: SrcInfo,
    ): Ast.AstStructFieldInitializer {
        return astF.createNode({
            kind: "struct_field_initializer",
            field: p_field,
            initializer: p_initializer,
            loc: p_loc,
        }) as Ast.AstStructFieldInitializer;
    }

    function makeDummyAstStructFieldInitializer(
        p_field: Ast.AstId,
        p_initializer: Ast.AstExpression,
    ): Ast.AstStructFieldInitializer {
        return astF.createNode({
            kind: "struct_field_initializer",
            field: p_field,
            initializer: p_initializer,
            loc: emptySrcInfo,
        }) as Ast.AstStructFieldInitializer;
    }

    function makeAstStructFieldValue(
        p_field: Ast.AstId,
        p_initializer: Ast.AstLiteral,
        p_loc: SrcInfo,
    ): Ast.AstStructFieldValue {
        return astF.createNode({
            kind: "struct_field_value",
            field: p_field,
            initializer: p_initializer,
            loc: p_loc,
        }) as Ast.AstStructFieldValue;
    }

    function makeDummyAstStructFieldValue(
        p_field: Ast.AstId,
        p_initializer: Ast.AstLiteral,
    ): Ast.AstStructFieldValue {
        return astF.createNode({
            kind: "struct_field_value",
            field: p_field,
            initializer: p_initializer,
            loc: emptySrcInfo,
        }) as Ast.AstStructFieldValue;
    }

    function makeAstImport(
        p_importPath: Ast.ImportPath,
        p_loc: SrcInfo,
    ): Ast.AstImport {
        return astF.createNode({
            kind: "import",
            importPath: p_importPath,
            loc: p_loc,
        }) as Ast.AstImport;
    }

    function makeDummyAstImport(p_importPath: Ast.ImportPath): Ast.AstImport {
        return astF.createNode({
            kind: "import",
            importPath: p_importPath,
            loc: emptySrcInfo,
        }) as Ast.AstImport;
    }

    return {
        makeAstPrimitiveTypeDecl,
        makeDummyAstPrimitiveTypeDecl,
        makeAstFunctionDef,
        makeDummyAstFunctionDef,
        makeAstAsmFunctionDef,
        makeDummyAstAsmFunctionDef,
        makeAstNativeFunctionDecl,
        makeDummyAstNativeFunctionDecl,
        makeAstConstantDef,
        makeDummyAstConstantDef,
        makeAstStructDecl,
        makeDummyAstStructDecl,
        makeAstMessageDecl,
        makeDummyAstMessageDecl,
        makeAstContract,
        makeDummyAstContract,
        makeAstTrait,
        makeDummyAstTrait,
        makeAstFieldDecl,
        makeDummyAstFieldDecl,
        makeAstContractInit,
        makeDummyAstContractInit,
        makeAstReceiver,
        makeDummyAstReceiver,
        makeAstFunctionDecl,
        makeDummyAstFunctionDecl,
        makeAstConstantDecl,
        makeDummyAstConstantDecl,
        makeAstStatementLet,
        makeDummyAstStatementLet,
        makeAstStatementReturn,
        makeDummyAstStatementReturn,
        makeAstStatementExpression,
        makeDummyAstStatementExpression,
        makeAstStatementAssign,
        makeDummyAstStatementAssign,
        makeAstStatementAugmentedAssign,
        makeDummyAstStatementAugmentedAssign,
        makeAstStatementCondition,
        makeDummyAstStatementCondition,
        makeAstStatementWhile,
        makeDummyAstStatementWhile,
        makeAstStatementUntil,
        makeDummyAstStatementUntil,
        makeAstStatementRepeat,
        makeDummyAstStatementRepeat,
        makeAstStatementTry,
        makeDummyAstStatementTry,
        makeAstStatementForEach,
        makeDummyAstStatementForEach,
        makeAstStatementDestruct,
        makeDummyAstStatementDestruct,
        makeAstStatementBlock,
        makeDummyAstStatementBlock,
        makeAstTypeId,
        makeDummyAstTypeId,
        makeAstOptionalType,
        makeDummyAstOptionalType,
        makeAstMapType,
        makeDummyAstMapType,
        makeAstBouncedMessageType,
        makeDummyAstBouncedMessageType,
        makeAstOpBinary,
        makeDummyAstOpBinary,
        makeAstOpUnary,
        makeDummyAstOpUnary,
        makeAstConditional,
        makeDummyAstConditional,
        makeAstMethodCall,
        makeDummyAstMethodCall,
        makeAstFieldAccess,
        makeDummyAstFieldAccess,
        makeAstStaticCall,
        makeDummyAstStaticCall,
        makeAstStructInstance,
        makeDummyAstStructInstance,
        makeAstId,
        makeDummyAstId,
        makeAstInitOf,
        makeDummyAstInitOf,
        makeAstCodeOf,
        makeDummyAstCodeOf,
        makeAstString,
        makeDummyAstString,
        makeAstNumber,
        makeDummyAstNumber,
        makeAstBoolean,
        makeDummyAstBoolean,
        makeAstNull,
        makeDummyAstNull,
        makeAstSimplifiedString,
        makeDummyAstSimplifiedString,
        makeAstAddress,
        makeDummyAstAddress,
        makeAstCell,
        makeDummyAstCell,
        makeAstSlice,
        makeDummyAstSlice,
        makeAstStructValue,
        makeDummyAstStructValue,
        makeAstFunctionAttributeGet,
        makeDummyAstFunctionAttributeGet,
        makeAstFunctionAttributeRest,
        makeDummyAstFunctionAttributeRest,
        makeAstReceiverSimple,
        makeAstReceiverFallback,
        makeAstReceiverComment,
        makeAstReceiverInternal,
        makeDummyAstReceiverInternal,
        makeAstReceiverExternal,
        makeDummyAstReceiverExternal,
        makeAstReceiverBounce,
        makeDummyAstReceiverBounce,
        makeAstFuncId,
        makeDummyAstFuncId,
        makeAstDestructMapping,
        makeDummyAstDestructMapping,
        makeAstDestructEnd,
        makeDummyAstDestructEnd,
        makeAstTypedParameter,
        makeDummyAstTypedParameter,
        makeAstModule,
        makeAstStructFieldInitializer,
        makeDummyAstStructFieldInitializer,
        makeAstStructFieldValue,
        makeDummyAstStructFieldValue,
        makeAstImport,
        makeDummyAstImport,
    };
};

export type MakeAstFactory = ReturnType<typeof getMakeAst>;
