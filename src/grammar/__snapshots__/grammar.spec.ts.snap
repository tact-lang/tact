// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`grammar should fail case-0 1`] = `
"<unknown>:1:1: Abstract function doesn't have abstract modifier
Line 1, col 1:
> 1 | fun testFunc(): Int;
      ^~~~~~~~~~~~~~~~~~~~
"
`;

exports[`grammar should fail case-1 1`] = `
"<unknown>:1:5: Variable name cannot start with "__gen"
Line 1, col 5:
> 1 | fun __gen_hello(): Int {
          ^~~~~~~~~~~
  2 |     
"
`;

exports[`grammar should fail case-2 1`] = `
"<unknown>:2:9: Variable name cannot start with "__gen"
Line 2, col 9:
  1 | fun hello(): Int {
> 2 |     let __gen_a: Int = 0;
              ^~~~~~~
  3 | }
"
`;

exports[`grammar should fail case-3 1`] = `
"<unknown>:2:9: Variable name cannot start with "__tact"
Line 2, col 9:
  1 | fun hello(): Int {
> 2 |     let __tact_a: Int = 0;
              ^~~~~~~~
  3 | }
"
`;

exports[`grammar should fail case-4 1`] = `
"<unknown>:2:9: Syntax error: expected not a reservedWord 
Line 2, col 9:
  1 | fun hello(): Int {
> 2 |     let if: Int = 0;
              ^
  3 | }
"
`;

exports[`grammar should fail case-5 1`] = `
"<unknown>:1:8: Syntax error: expected "A".."Z" 
Line 1, col 8:
> 1 | struct __genA {
             ^
  2 |     a: Int;
"
`;

exports[`grammar should fail case-6 1`] = `
"<unknown>:1:10: Variable name cannot start with "__gen"
Line 1, col 10:
> 1 | fun main(__gen: Int): Int {
               ^~~~~
  2 |     return 0;
"
`;

exports[`grammar should fail case-7 1`] = `
"<unknown>:1:10: Variable name cannot start with "__gen"
Line 1, col 10:
> 1 | contract __gen_a {
               ^~~~~~~
  2 | 
"
`;

exports[`grammar should fail case-8 1`] = `
"<unknown>:2:10: Variable name cannot start with "__tact"
Line 2, col 10:
  1 | contract A {
> 2 |     init(__tact: Int) {
               ^~~~~~
  3 |         
"
`;

exports[`grammar should fail case-9 1`] = `
"<unknown>:2:11: Variable name cannot start with "__tact"
Line 2, col 11:
  1 | contract A {
> 2 |     fun b(__tact: Int) {
                ^~~~~~
  3 |         
"
`;

exports[`grammar should fail case-10 1`] = `
"<unknown>:1:8: Syntax error: expected "A".."Z" 
Line 1, col 8:
> 1 | struct lowercaseIdforType {
             ^
  2 |     a: Int;
"
`;

exports[`grammar should fail case-11 1`] = `
"<unknown>:1:14: Syntax error: expected "A".."Z" 
Line 1, col 14:
> 1 | message(123) foo {
                   ^
  2 |     signature: Slice;
"
`;

exports[`grammar should parse case-0 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 4,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(): Int {
    return 0;
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 2,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 3,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
  ],
  "id": 5,
  "kind": "program",
}
`;

exports[`grammar should parse case-1 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 10,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20;
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 8,
            "kind": "op_binary",
            "left": {
              "id": 6,
              "kind": "op_binary",
              "left": {
                "id": 4,
                "kind": "op_binary",
                "left": {
                  "id": 2,
                  "kind": "number",
                  "ref": 0,
                  "value": 0n,
                },
                "op": "+",
                "ref": 0 + 1,
                "right": {
                  "id": 3,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
              },
              "op": "*",
              "ref": (0 + 1) * 10,
              "right": {
                "id": 5,
                "kind": "number",
                "ref": 10,
                "value": 10n,
              },
            },
            "op": "/",
            "ref": (0 + 1) * 10 / 20,
            "right": {
              "id": 7,
              "kind": "number",
              "ref": 20,
              "value": 20n,
            },
          },
          "id": 9,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20;,
        },
      ],
    },
  ],
  "id": 11,
  "kind": "program",
}
`;

exports[`grammar should parse case-2 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 12,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10;
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 10,
            "kind": "op_binary",
            "left": {
              "id": 8,
              "kind": "op_binary",
              "left": {
                "id": 6,
                "kind": "op_binary",
                "left": {
                  "id": 4,
                  "kind": "op_binary",
                  "left": {
                    "id": 2,
                    "kind": "number",
                    "ref": 0,
                    "value": 0n,
                  },
                  "op": "+",
                  "ref": 0 + 1,
                  "right": {
                    "id": 3,
                    "kind": "number",
                    "ref": 1,
                    "value": 1n,
                  },
                },
                "op": "*",
                "ref": (0 + 1) * 10,
                "right": {
                  "id": 5,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "/",
              "ref": (0 + 1) * 10 / 20,
              "right": {
                "id": 7,
                "kind": "number",
                "ref": 20,
                "value": 20n,
              },
            },
            "op": "!=",
            "ref": (0 + 1) * 10 / 20 != 10,
            "right": {
              "id": 9,
              "kind": "number",
              "ref": 10,
              "value": 10n,
            },
          },
          "id": 11,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10;,
        },
      ],
    },
  ],
  "id": 13,
  "kind": "program",
}
`;

exports[`grammar should parse case-3 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 14,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId;
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 12,
            "kind": "op_binary",
            "left": {
              "id": 8,
              "kind": "op_binary",
              "left": {
                "id": 6,
                "kind": "op_binary",
                "left": {
                  "id": 4,
                  "kind": "op_binary",
                  "left": {
                    "id": 2,
                    "kind": "number",
                    "ref": 0,
                    "value": 0n,
                  },
                  "op": "+",
                  "ref": 0 + 1,
                  "right": {
                    "id": 3,
                    "kind": "number",
                    "ref": 1,
                    "value": 1n,
                  },
                },
                "op": "*",
                "ref": (0 + 1) * 10,
                "right": {
                  "id": 5,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "/",
              "ref": (0 + 1) * 10 / 20,
              "right": {
                "id": 7,
                "kind": "number",
                "ref": 20,
                "value": 20n,
              },
            },
            "op": "!=",
            "ref": (0 + 1) * 10 / 20 != 10 * someId,
            "right": {
              "id": 11,
              "kind": "op_binary",
              "left": {
                "id": 9,
                "kind": "number",
                "ref": 10,
                "value": 10n,
              },
              "op": "*",
              "ref": 10 * someId,
              "right": {
                "id": 10,
                "kind": "id",
                "ref": someId,
                "value": "someId",
              },
            },
          },
          "id": 13,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId;,
        },
      ],
    },
  ],
  "id": 15,
  "kind": "program",
}
`;

exports[`grammar should parse case-4 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 22,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10;
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 20,
            "kind": "op_binary",
            "left": {
              "id": 12,
              "kind": "op_binary",
              "left": {
                "id": 8,
                "kind": "op_binary",
                "left": {
                  "id": 6,
                  "kind": "op_binary",
                  "left": {
                    "id": 4,
                    "kind": "op_binary",
                    "left": {
                      "id": 2,
                      "kind": "number",
                      "ref": 0,
                      "value": 0n,
                    },
                    "op": "+",
                    "ref": 0 + 1,
                    "right": {
                      "id": 3,
                      "kind": "number",
                      "ref": 1,
                      "value": 1n,
                    },
                  },
                  "op": "*",
                  "ref": (0 + 1) * 10,
                  "right": {
                    "id": 5,
                    "kind": "number",
                    "ref": 10,
                    "value": 10n,
                  },
                },
                "op": "/",
                "ref": (0 + 1) * 10 / 20,
                "right": {
                  "id": 7,
                  "kind": "number",
                  "ref": 20,
                  "value": 20n,
                },
              },
              "op": "!=",
              "ref": (0 + 1) * 10 / 20 != 10 * someId,
              "right": {
                "id": 11,
                "kind": "op_binary",
                "left": {
                  "id": 9,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
                "op": "*",
                "ref": 10 * someId,
                "right": {
                  "id": 10,
                  "kind": "id",
                  "ref": someId,
                  "value": "someId",
                },
              },
            },
            "op": "||",
            "ref": (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10,
            "right": {
              "id": 19,
              "kind": "op_binary",
              "left": {
                "id": 15,
                "kind": "op_binary",
                "left": {
                  "id": 13,
                  "kind": "id",
                  "ref": some2,
                  "value": "some2",
                },
                "op": ">",
                "ref": some2 > 10,
                "right": {
                  "id": 14,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "&&",
              "ref": some2 > 10 && some3 < 10,
              "right": {
                "id": 18,
                "kind": "op_binary",
                "left": {
                  "id": 16,
                  "kind": "id",
                  "ref": some3,
                  "value": "some3",
                },
                "op": "<",
                "ref": some3 < 10,
                "right": {
                  "id": 17,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
            },
          },
          "id": 21,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10;,
        },
      ],
    },
  ],
  "id": 23,
  "kind": "program",
}
`;

exports[`grammar should parse case-5 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 24,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 123.add(10);
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 22,
            "kind": "op_binary",
            "left": {
              "id": 12,
              "kind": "op_binary",
              "left": {
                "id": 8,
                "kind": "op_binary",
                "left": {
                  "id": 6,
                  "kind": "op_binary",
                  "left": {
                    "id": 4,
                    "kind": "op_binary",
                    "left": {
                      "id": 2,
                      "kind": "number",
                      "ref": 0,
                      "value": 0n,
                    },
                    "op": "+",
                    "ref": 0 + 1,
                    "right": {
                      "id": 3,
                      "kind": "number",
                      "ref": 1,
                      "value": 1n,
                    },
                  },
                  "op": "*",
                  "ref": (0 + 1) * 10,
                  "right": {
                    "id": 5,
                    "kind": "number",
                    "ref": 10,
                    "value": 10n,
                  },
                },
                "op": "/",
                "ref": (0 + 1) * 10 / 20,
                "right": {
                  "id": 7,
                  "kind": "number",
                  "ref": 20,
                  "value": 20n,
                },
              },
              "op": "!=",
              "ref": (0 + 1) * 10 / 20 != 10 * someId,
              "right": {
                "id": 11,
                "kind": "op_binary",
                "left": {
                  "id": 9,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
                "op": "*",
                "ref": 10 * someId,
                "right": {
                  "id": 10,
                  "kind": "id",
                  "ref": someId,
                  "value": "someId",
                },
              },
            },
            "op": "||",
            "ref": (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 123.add(10),
            "right": {
              "id": 21,
              "kind": "op_binary",
              "left": {
                "id": 15,
                "kind": "op_binary",
                "left": {
                  "id": 13,
                  "kind": "id",
                  "ref": some2,
                  "value": "some2",
                },
                "op": ">",
                "ref": some2 > 10,
                "right": {
                  "id": 14,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "&&",
              "ref": some2 > 10 && some3 < 123.add(10),
              "right": {
                "id": 20,
                "kind": "op_binary",
                "left": {
                  "id": 16,
                  "kind": "id",
                  "ref": some3,
                  "value": "some3",
                },
                "op": "<",
                "ref": some3 < 123.add(10),
                "right": {
                  "args": [
                    {
                      "id": 18,
                      "kind": "number",
                      "ref": 10,
                      "value": 10n,
                    },
                  ],
                  "id": 19,
                  "kind": "op_call",
                  "name": "add",
                  "ref": 123.add(10),
                  "src": {
                    "id": 17,
                    "kind": "number",
                    "ref": 123,
                    "value": 123n,
                  },
                },
              },
            },
          },
          "id": 23,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 123.add(10);,
        },
      ],
    },
  ],
  "id": 25,
  "kind": "program",
}
`;

exports[`grammar should parse case-6 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 25,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < abs(123.add(10));
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 23,
            "kind": "op_binary",
            "left": {
              "id": 12,
              "kind": "op_binary",
              "left": {
                "id": 8,
                "kind": "op_binary",
                "left": {
                  "id": 6,
                  "kind": "op_binary",
                  "left": {
                    "id": 4,
                    "kind": "op_binary",
                    "left": {
                      "id": 2,
                      "kind": "number",
                      "ref": 0,
                      "value": 0n,
                    },
                    "op": "+",
                    "ref": 0 + 1,
                    "right": {
                      "id": 3,
                      "kind": "number",
                      "ref": 1,
                      "value": 1n,
                    },
                  },
                  "op": "*",
                  "ref": (0 + 1) * 10,
                  "right": {
                    "id": 5,
                    "kind": "number",
                    "ref": 10,
                    "value": 10n,
                  },
                },
                "op": "/",
                "ref": (0 + 1) * 10 / 20,
                "right": {
                  "id": 7,
                  "kind": "number",
                  "ref": 20,
                  "value": 20n,
                },
              },
              "op": "!=",
              "ref": (0 + 1) * 10 / 20 != 10 * someId,
              "right": {
                "id": 11,
                "kind": "op_binary",
                "left": {
                  "id": 9,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
                "op": "*",
                "ref": 10 * someId,
                "right": {
                  "id": 10,
                  "kind": "id",
                  "ref": someId,
                  "value": "someId",
                },
              },
            },
            "op": "||",
            "ref": (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < abs(123.add(10)),
            "right": {
              "id": 22,
              "kind": "op_binary",
              "left": {
                "id": 15,
                "kind": "op_binary",
                "left": {
                  "id": 13,
                  "kind": "id",
                  "ref": some2,
                  "value": "some2",
                },
                "op": ">",
                "ref": some2 > 10,
                "right": {
                  "id": 14,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "&&",
              "ref": some2 > 10 && some3 < abs(123.add(10)),
              "right": {
                "id": 21,
                "kind": "op_binary",
                "left": {
                  "id": 16,
                  "kind": "id",
                  "ref": some3,
                  "value": "some3",
                },
                "op": "<",
                "ref": some3 < abs(123.add(10)),
                "right": {
                  "args": [
                    {
                      "args": [
                        {
                          "id": 18,
                          "kind": "number",
                          "ref": 10,
                          "value": 10n,
                        },
                      ],
                      "id": 19,
                      "kind": "op_call",
                      "name": "add",
                      "ref": 123.add(10),
                      "src": {
                        "id": 17,
                        "kind": "number",
                        "ref": 123,
                        "value": 123n,
                      },
                    },
                  ],
                  "id": 20,
                  "kind": "op_static_call",
                  "name": "abs",
                  "ref": abs(123.add(10)),
                },
              },
            },
          },
          "id": 24,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < abs(123.add(10));,
        },
      ],
    },
  ],
  "id": 26,
  "kind": "program",
}
`;

exports[`grammar should parse case-7 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 3,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc() {
    return 0;
},
      "return": null,
      "statements": [
        {
          "expression": {
            "id": 1,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 2,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
    {
      "args": [],
      "attributes": [],
      "id": 7,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(): Int {
    return 0;
},
      "return": {
        "id": 4,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 5,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 6,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
    {
      "args": [],
      "attributes": [],
      "id": 11,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(): Bool {
    return 0;
},
      "return": {
        "id": 8,
        "kind": "type_ref_simple",
        "name": "Bool",
        "optional": false,
        "ref": Bool,
      },
      "statements": [
        {
          "expression": {
            "id": 9,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 10,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
  ],
  "id": 12,
  "kind": "program",
}
`;

exports[`grammar should parse case-8 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 1,
      "kind": "def_native_function",
      "name": "testFunc",
      "nativeName": "native_name_1",
      "origin": "user",
      "ref": @name(native_name_1)
native testFunc();,
      "return": null,
    },
    {
      "args": [],
      "attributes": [],
      "id": 3,
      "kind": "def_native_function",
      "name": "testFunc",
      "nativeName": "native_name_2",
      "origin": "user",
      "ref": @name(native_name_2)
native testFunc(): Int;,
      "return": {
        "id": 2,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
    },
    {
      "args": [],
      "attributes": [],
      "id": 5,
      "kind": "def_native_function",
      "name": "testFunc",
      "nativeName": "native_name_3",
      "origin": "user",
      "ref": @name(native_name_3)
native testFunc(): Bool;,
      "return": {
        "id": 4,
        "kind": "type_ref_simple",
        "name": "Bool",
        "optional": false,
        "ref": Bool,
      },
    },
  ],
  "id": 6,
  "kind": "program",
}
`;

exports[`grammar should parse case-9 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 11,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(): Int {
    return 1 + 2 + 3!! > 123;
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 9,
            "kind": "op_binary",
            "left": {
              "id": 7,
              "kind": "op_binary",
              "left": {
                "id": 4,
                "kind": "op_binary",
                "left": {
                  "id": 2,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
                "op": "+",
                "ref": 1 + 2,
                "right": {
                  "id": 3,
                  "kind": "number",
                  "ref": 2,
                  "value": 2n,
                },
              },
              "op": "+",
              "ref": 1 + 2 + 3!!,
              "right": {
                "id": 6,
                "kind": "op_unary",
                "op": "!!",
                "ref": 3!!,
                "right": {
                  "id": 5,
                  "kind": "number",
                  "ref": 3,
                  "value": 3n,
                },
              },
            },
            "op": ">",
            "ref": 1 + 2 + 3!! > 123,
            "right": {
              "id": 8,
              "kind": "number",
              "ref": 123,
              "value": 123n,
            },
          },
          "id": 10,
          "kind": "statement_return",
          "ref": return 1 + 2 + 3!! > 123;,
        },
      ],
    },
  ],
  "id": 12,
  "kind": "program",
}
`;

exports[`grammar should parse case-10 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 13,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(): Int {
    return 1 + 2 + (123 + 3)!! > 123;
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 11,
            "kind": "op_binary",
            "left": {
              "id": 9,
              "kind": "op_binary",
              "left": {
                "id": 4,
                "kind": "op_binary",
                "left": {
                  "id": 2,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
                "op": "+",
                "ref": 1 + 2,
                "right": {
                  "id": 3,
                  "kind": "number",
                  "ref": 2,
                  "value": 2n,
                },
              },
              "op": "+",
              "ref": 1 + 2 + (123 + 3)!!,
              "right": {
                "id": 8,
                "kind": "op_unary",
                "op": "!!",
                "ref": (123 + 3)!!,
                "right": {
                  "id": 7,
                  "kind": "op_binary",
                  "left": {
                    "id": 5,
                    "kind": "number",
                    "ref": 123,
                    "value": 123n,
                  },
                  "op": "+",
                  "ref": 123 + 3,
                  "right": {
                    "id": 6,
                    "kind": "number",
                    "ref": 3,
                    "value": 3n,
                  },
                },
              },
            },
            "op": ">",
            "ref": 1 + 2 + (123 + 3)!! > 123,
            "right": {
              "id": 10,
              "kind": "number",
              "ref": 123,
              "value": 123n,
            },
          },
          "id": 12,
          "kind": "statement_return",
          "ref": return 1 + 2 + (123 + 3)!! > 123;,
        },
      ],
    },
  ],
  "id": 14,
  "kind": "program",
}
`;

exports[`grammar should parse case-11 1`] = `
{
  "entries": [
    {
      "args": [
        {
          "id": 3,
          "kind": "def_argument",
          "name": "src",
          "ref": src: Int?,
          "type": {
            "id": 2,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": true,
            "ref": Int?,
          },
        },
      ],
      "attributes": [],
      "id": 15,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(src: Int?): Int {
    return 1 + 2 + (123 + 3)!! > 123;
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 13,
            "kind": "op_binary",
            "left": {
              "id": 11,
              "kind": "op_binary",
              "left": {
                "id": 6,
                "kind": "op_binary",
                "left": {
                  "id": 4,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
                "op": "+",
                "ref": 1 + 2,
                "right": {
                  "id": 5,
                  "kind": "number",
                  "ref": 2,
                  "value": 2n,
                },
              },
              "op": "+",
              "ref": 1 + 2 + (123 + 3)!!,
              "right": {
                "id": 10,
                "kind": "op_unary",
                "op": "!!",
                "ref": (123 + 3)!!,
                "right": {
                  "id": 9,
                  "kind": "op_binary",
                  "left": {
                    "id": 7,
                    "kind": "number",
                    "ref": 123,
                    "value": 123n,
                  },
                  "op": "+",
                  "ref": 123 + 3,
                  "right": {
                    "id": 8,
                    "kind": "number",
                    "ref": 3,
                    "value": 3n,
                  },
                },
              },
            },
            "op": ">",
            "ref": 1 + 2 + (123 + 3)!! > 123,
            "right": {
              "id": 12,
              "kind": "number",
              "ref": 123,
              "value": 123n,
            },
          },
          "id": 14,
          "kind": "statement_return",
          "ref": return 1 + 2 + (123 + 3)!! > 123;,
        },
      ],
    },
  ],
  "id": 16,
  "kind": "program",
}
`;

exports[`grammar should parse case-12 1`] = `
{
  "entries": [
    {
      "args": [
        {
          "id": 3,
          "kind": "def_argument",
          "name": "src",
          "ref": src: Int?,
          "type": {
            "id": 2,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": true,
            "ref": Int?,
          },
        },
      ],
      "attributes": [],
      "id": 12,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(src: Int?): Int {
    if (src != null) {
        return src;
    }
    return 0;
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "elseif": null,
          "expression": {
            "id": 6,
            "kind": "op_binary",
            "left": {
              "id": 4,
              "kind": "id",
              "ref": src,
              "value": "src",
            },
            "op": "!=",
            "ref": src != null,
            "right": {
              "id": 5,
              "kind": "null",
              "ref": null,
            },
          },
          "falseStatements": null,
          "id": 9,
          "kind": "statement_condition",
          "ref": if (src != null) {
        return src;
    },
          "trueStatements": [
            {
              "expression": {
                "id": 7,
                "kind": "id",
                "ref": src,
                "value": "src",
              },
              "id": 8,
              "kind": "statement_return",
              "ref": return src;,
            },
          ],
        },
        {
          "expression": {
            "id": 10,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 11,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
  ],
  "id": 13,
  "kind": "program",
}
`;

exports[`grammar should parse case-13 1`] = `
{
  "entries": [
    {
      "args": [
        {
          "id": 3,
          "kind": "def_argument",
          "name": "src",
          "ref": src: Int?,
          "type": {
            "id": 2,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": true,
            "ref": Int?,
          },
        },
      ],
      "attributes": [],
      "id": 12,
      "kind": "def_function",
      "name": "testFunc",
      "origin": "user",
      "ref": fun testFunc(src: Int?): Int {
    if (src != null) {
        return src;
    } else {
        return 10;
    }
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "elseif": null,
          "expression": {
            "id": 6,
            "kind": "op_binary",
            "left": {
              "id": 4,
              "kind": "id",
              "ref": src,
              "value": "src",
            },
            "op": "!=",
            "ref": src != null,
            "right": {
              "id": 5,
              "kind": "null",
              "ref": null,
            },
          },
          "falseStatements": [
            {
              "expression": {
                "id": 9,
                "kind": "number",
                "ref": 10,
                "value": 10n,
              },
              "id": 10,
              "kind": "statement_return",
              "ref": return 10;,
            },
          ],
          "id": 11,
          "kind": "statement_condition",
          "ref": if (src != null) {
        return src;
    } else {
        return 10;
    },
          "trueStatements": [
            {
              "expression": {
                "id": 7,
                "kind": "id",
                "ref": src,
                "value": "src",
              },
              "id": 8,
              "kind": "statement_return",
              "ref": return src;,
            },
          ],
        },
      ],
    },
  ],
  "id": 13,
  "kind": "program",
}
`;

exports[`grammar should parse case-14 1`] = `
{
  "entries": [
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 2,
          "init": null,
          "kind": "def_field",
          "name": "a",
          "ref": a: Int;,
          "type": {
            "id": 1,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "as": null,
          "id": 4,
          "init": null,
          "kind": "def_field",
          "name": "b",
          "ref": b: Int;,
          "type": {
            "id": 3,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "args": [
            {
              "id": 6,
              "kind": "def_argument",
              "name": "a",
              "ref": a: Int,
              "type": {
                "id": 5,
                "kind": "type_ref_simple",
                "name": "Int",
                "optional": false,
                "ref": Int,
              },
            },
            {
              "id": 8,
              "kind": "def_argument",
              "name": "b",
              "ref": b: Int,
              "type": {
                "id": 7,
                "kind": "type_ref_simple",
                "name": "Int",
                "optional": false,
                "ref": Int,
              },
            },
          ],
          "id": 17,
          "kind": "def_init_function",
          "ref": init(a: Int, b: Int) {
        self.a = a;
        self.b = b;
    },
          "statements": [
            {
              "expression": {
                "id": 11,
                "kind": "id",
                "ref": a,
                "value": "a",
              },
              "id": 12,
              "kind": "statement_assign",
              "path": [
                {
                  "id": 9,
                  "kind": "lvalue_ref",
                  "name": "self",
                  "ref": self.,
                },
                {
                  "id": 10,
                  "kind": "lvalue_ref",
                  "name": "a",
                  "ref": a,
                },
              ],
              "ref": self.a = a;,
            },
            {
              "expression": {
                "id": 15,
                "kind": "id",
                "ref": b,
                "value": "b",
              },
              "id": 16,
              "kind": "statement_assign",
              "path": [
                {
                  "id": 13,
                  "kind": "lvalue_ref",
                  "name": "self",
                  "ref": self.,
                },
                {
                  "id": 14,
                  "kind": "lvalue_ref",
                  "name": "b",
                  "ref": b,
                },
              ],
              "ref": self.b = b;,
            },
          ],
        },
      ],
      "id": 18,
      "kind": "def_contract",
      "name": "Sample",
      "origin": "user",
      "ref": contract Sample {
    a: Int;
    b: Int;
    
    init(a: Int, b: Int) {
        self.a = a;
        self.b = b;
    }
},
      "traits": [],
    },
  ],
  "id": 19,
  "kind": "program",
}
`;

exports[`grammar should parse case-15 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 25,
      "kind": "def_function",
      "name": "main",
      "origin": "user",
      "ref": fun main() {
    let i: Int = 1;
    while(true) {
        i = i + 1;
    }
    repeat(10) {
        i = i * 10;
    }
    do {
        i = i - 1;
    } until(false);
},
      "return": null,
      "statements": [
        {
          "expression": {
            "id": 2,
            "kind": "number",
            "ref": 1,
            "value": 1n,
          },
          "id": 3,
          "kind": "statement_let",
          "name": "i",
          "ref": let i: Int = 1;,
          "type": {
            "id": 1,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "condition": {
            "id": 4,
            "kind": "boolean",
            "ref": true,
            "value": true,
          },
          "id": 10,
          "kind": "statement_while",
          "ref": while(true) {
        i = i + 1;
    },
          "statements": [
            {
              "expression": {
                "id": 8,
                "kind": "op_binary",
                "left": {
                  "id": 6,
                  "kind": "id",
                  "ref": i,
                  "value": "i",
                },
                "op": "+",
                "ref": i + 1,
                "right": {
                  "id": 7,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
              },
              "id": 9,
              "kind": "statement_assign",
              "path": [
                {
                  "id": 5,
                  "kind": "lvalue_ref",
                  "name": "i",
                  "ref": i,
                },
              ],
              "ref": i = i + 1;,
            },
          ],
        },
        {
          "condition": {
            "id": 11,
            "kind": "number",
            "ref": 10,
            "value": 10n,
          },
          "id": 17,
          "kind": "statement_repeat",
          "ref": repeat(10) {
        i = i * 10;
    },
          "statements": [
            {
              "expression": {
                "id": 15,
                "kind": "op_binary",
                "left": {
                  "id": 13,
                  "kind": "id",
                  "ref": i,
                  "value": "i",
                },
                "op": "*",
                "ref": i * 10,
                "right": {
                  "id": 14,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "id": 16,
              "kind": "statement_assign",
              "path": [
                {
                  "id": 12,
                  "kind": "lvalue_ref",
                  "name": "i",
                  "ref": i,
                },
              ],
              "ref": i = i * 10;,
            },
          ],
        },
        {
          "condition": {
            "id": 18,
            "kind": "boolean",
            "ref": false,
            "value": false,
          },
          "id": 24,
          "kind": "statement_until",
          "ref": do {
        i = i - 1;
    } until(false);,
          "statements": [
            {
              "expression": {
                "id": 22,
                "kind": "op_binary",
                "left": {
                  "id": 20,
                  "kind": "id",
                  "ref": i,
                  "value": "i",
                },
                "op": "-",
                "ref": i - 1,
                "right": {
                  "id": 21,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
              },
              "id": 23,
              "kind": "statement_assign",
              "path": [
                {
                  "id": 19,
                  "kind": "lvalue_ref",
                  "name": "i",
                  "ref": i,
                },
              ],
              "ref": i = i - 1;,
            },
          ],
        },
      ],
    },
  ],
  "id": 26,
  "kind": "program",
}
`;

exports[`grammar should parse case-16 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 17,
      "kind": "def_function",
      "name": "main",
      "origin": "user",
      "ref": fun main() {
    let i: Int = 1;
    while(i >= 10 || i <= 100) {
        i = i + 1;
    }
},
      "return": null,
      "statements": [
        {
          "expression": {
            "id": 2,
            "kind": "number",
            "ref": 1,
            "value": 1n,
          },
          "id": 3,
          "kind": "statement_let",
          "name": "i",
          "ref": let i: Int = 1;,
          "type": {
            "id": 1,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "condition": {
            "id": 10,
            "kind": "op_binary",
            "left": {
              "id": 6,
              "kind": "op_binary",
              "left": {
                "id": 4,
                "kind": "id",
                "ref": i,
                "value": "i",
              },
              "op": ">=",
              "ref": i >= 10,
              "right": {
                "id": 5,
                "kind": "number",
                "ref": 10,
                "value": 10n,
              },
            },
            "op": "||",
            "ref": i >= 10 || i <= 100,
            "right": {
              "id": 9,
              "kind": "op_binary",
              "left": {
                "id": 7,
                "kind": "id",
                "ref": i,
                "value": "i",
              },
              "op": "<=",
              "ref": i <= 100,
              "right": {
                "id": 8,
                "kind": "number",
                "ref": 100,
                "value": 100n,
              },
            },
          },
          "id": 16,
          "kind": "statement_while",
          "ref": while(i >= 10 || i <= 100) {
        i = i + 1;
    },
          "statements": [
            {
              "expression": {
                "id": 14,
                "kind": "op_binary",
                "left": {
                  "id": 12,
                  "kind": "id",
                  "ref": i,
                  "value": "i",
                },
                "op": "+",
                "ref": i + 1,
                "right": {
                  "id": 13,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
              },
              "id": 15,
              "kind": "statement_assign",
              "path": [
                {
                  "id": 11,
                  "kind": "lvalue_ref",
                  "name": "i",
                  "ref": i,
                },
              ],
              "ref": i = i + 1;,
            },
          ],
        },
      ],
    },
  ],
  "id": 18,
  "kind": "program",
}
`;

exports[`grammar should parse case-17 1`] = `
{
  "entries": [
    {
      "fields": [
        {
          "as": null,
          "id": 2,
          "init": null,
          "kind": "def_field",
          "name": "x",
          "ref": x: Int;,
          "type": {
            "id": 1,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
      ],
      "id": 3,
      "kind": "def_struct",
      "message": false,
      "name": "A",
      "origin": "user",
      "prefix": null,
      "ref": struct A {
    x: Int;
},
    },
    {
      "fields": [
        {
          "as": null,
          "id": 5,
          "init": null,
          "kind": "def_field",
          "name": "x",
          "ref": x: Int;,
          "type": {
            "id": 4,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
      ],
      "id": 6,
      "kind": "def_struct",
      "message": true,
      "name": "B",
      "origin": "user",
      "prefix": null,
      "ref": message B {
    x: Int;
},
    },
  ],
  "id": 7,
  "kind": "program",
}
`;

exports[`grammar should parse case-18 1`] = `
{
  "entries": [
    {
      "fields": [
        {
          "as": null,
          "id": 2,
          "init": null,
          "kind": "def_field",
          "name": "x",
          "ref": x: Int;,
          "type": {
            "id": 1,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
      ],
      "id": 3,
      "kind": "def_struct",
      "message": false,
      "name": "A",
      "origin": "user",
      "prefix": null,
      "ref": struct A {
    x: Int;
},
    },
    {
      "fields": [
        {
          "as": "coin",
          "id": 5,
          "init": null,
          "kind": "def_field",
          "name": "x",
          "ref": x: Int as coin;,
          "type": {
            "id": 4,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
      ],
      "id": 6,
      "kind": "def_struct",
      "message": true,
      "name": "B",
      "origin": "user",
      "prefix": null,
      "ref": message B {
    x: Int as coin;
},
    },
  ],
  "id": 7,
  "kind": "program",
}
`;

exports[`grammar should parse case-19 1`] = `
{
  "entries": [
    {
      "fields": [
        {
          "as": null,
          "id": 3,
          "init": {
            "id": 2,
            "kind": "number",
            "ref": 1000,
            "value": 1000n,
          },
          "kind": "def_field",
          "name": "x",
          "ref": x: Int = 1000;,
          "type": {
            "id": 1,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
      ],
      "id": 4,
      "kind": "def_struct",
      "message": false,
      "name": "A",
      "origin": "user",
      "prefix": null,
      "ref": struct A {
    x: Int = 1000;
},
    },
    {
      "fields": [
        {
          "as": "coins",
          "id": 7,
          "init": {
            "id": 6,
            "kind": "number",
            "ref": 1000,
            "value": 1000n,
          },
          "kind": "def_field",
          "name": "x",
          "ref": x: Int as coins = 1000;,
          "type": {
            "id": 5,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "as": null,
          "id": 10,
          "init": {
            "id": 9,
            "kind": "boolean",
            "ref": true,
            "value": true,
          },
          "kind": "def_field",
          "name": "y",
          "ref": y: Bool = true;,
          "type": {
            "id": 8,
            "kind": "type_ref_simple",
            "name": "Bool",
            "optional": false,
            "ref": Bool,
          },
        },
      ],
      "id": 11,
      "kind": "def_struct",
      "message": true,
      "name": "B",
      "origin": "user",
      "prefix": null,
      "ref": message B {
    x: Int as coins = 1000;
    y: Bool = true;
},
    },
  ],
  "id": 12,
  "kind": "program",
}
`;

exports[`grammar should parse case-20 1`] = `
{
  "entries": [
    {
      "fields": [
        {
          "as": null,
          "id": 2,
          "init": null,
          "kind": "def_field",
          "name": "y",
          "ref": y: map<Int, Int>;,
          "type": {
            "id": 1,
            "key": "Int",
            "keyAs": null,
            "kind": "type_ref_map",
            "ref": map<Int, Int>,
            "value": "Int",
            "valueAs": null,
          },
        },
      ],
      "id": 3,
      "kind": "def_struct",
      "message": false,
      "name": "A",
      "origin": "user",
      "prefix": null,
      "ref": struct A {
    y: map<Int, Int>;
},
    },
    {
      "fields": [
        {
          "as": null,
          "id": 5,
          "init": null,
          "kind": "def_field",
          "name": "x",
          "ref": x: map<Int, Int>;,
          "type": {
            "id": 4,
            "key": "Int",
            "keyAs": null,
            "kind": "type_ref_map",
            "ref": map<Int, Int>,
            "value": "Int",
            "valueAs": null,
          },
        },
      ],
      "id": 6,
      "kind": "def_struct",
      "message": true,
      "name": "B",
      "origin": "user",
      "prefix": null,
      "ref": message B {
    x: map<Int, Int>;
},
    },
  ],
  "id": 7,
  "kind": "program",
}
`;

exports[`grammar should parse case-21 1`] = `
{
  "entries": [
    {
      "args": [],
      "attributes": [],
      "id": 4,
      "kind": "def_function",
      "name": "main",
      "origin": "user",
      "ref": fun main(): Int {
    return 1;
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 2,
            "kind": "number",
            "ref": 1,
            "value": 1n,
          },
          "id": 3,
          "kind": "statement_return",
          "ref": return 1;,
        },
      ],
    },
  ],
  "id": 5,
  "kind": "program",
}
`;

exports[`grammar should parse case-22 1`] = `
{
  "entries": [
    {
      "id": 1,
      "kind": "primitive",
      "name": "Int",
      "origin": "user",
      "ref": primitive Int;,
    },
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 3,
          "init": null,
          "kind": "def_field",
          "name": "a",
          "ref": a: Int;,
          "type": {
            "id": 2,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
      ],
      "id": 4,
      "kind": "def_trait",
      "name": "SomeTrait",
      "origin": "user",
      "ref": trait SomeTrait {
    a: Int;
},
      "traits": [],
    },
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 6,
          "init": null,
          "kind": "def_field",
          "name": "b",
          "ref": b: Int;,
          "type": {
            "id": 5,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
      ],
      "id": 8,
      "kind": "def_contract",
      "name": "Main",
      "origin": "user",
      "ref": contract Main with SomeTrait {
    b: Int;
},
      "traits": [
        {
          "id": 7,
          "kind": "id",
          "ref": SomeTrait,
          "value": "SomeTrait",
        },
      ],
    },
  ],
  "id": 9,
  "kind": "program",
}
`;

exports[`grammar should parse case-23 1`] = `
{
  "entries": [
    {
      "id": 1,
      "kind": "primitive",
      "name": "Int",
      "origin": "user",
      "ref": primitive Int;,
    },
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 3,
          "init": null,
          "kind": "def_field",
          "name": "a",
          "ref": a: Int;,
          "type": {
            "id": 2,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "args": [],
          "attributes": [
            {
              "ref": virtual,
              "type": "virtual",
            },
          ],
          "id": 7,
          "kind": "def_function",
          "name": "a",
          "origin": "user",
          "ref": virtual fun a(): Int {
        return a;
    },
          "return": {
            "id": 4,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
          "statements": [
            {
              "expression": {
                "id": 5,
                "kind": "id",
                "ref": a,
                "value": "a",
              },
              "id": 6,
              "kind": "statement_return",
              "ref": return a;,
            },
          ],
        },
      ],
      "id": 8,
      "kind": "def_trait",
      "name": "SomeTrait",
      "origin": "user",
      "ref": trait SomeTrait {
    a: Int;

    virtual fun a(): Int {
        return a;
    }
},
      "traits": [],
    },
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 10,
          "init": null,
          "kind": "def_field",
          "name": "b",
          "ref": b: Int;,
          "type": {
            "id": 9,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "args": [],
          "attributes": [
            {
              "ref": override,
              "type": "overrides",
            },
          ],
          "id": 14,
          "kind": "def_function",
          "name": "a",
          "origin": "user",
          "ref": override fun a(): Int {
        return b;
    },
          "return": {
            "id": 11,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
          "statements": [
            {
              "expression": {
                "id": 12,
                "kind": "id",
                "ref": b,
                "value": "b",
              },
              "id": 13,
              "kind": "statement_return",
              "ref": return b;,
            },
          ],
        },
      ],
      "id": 16,
      "kind": "def_contract",
      "name": "Main",
      "origin": "user",
      "ref": contract Main with SomeTrait {
    b: Int;

    override fun a(): Int {
        return b;
    }
},
      "traits": [
        {
          "id": 15,
          "kind": "id",
          "ref": SomeTrait,
          "value": "SomeTrait",
        },
      ],
    },
  ],
  "id": 17,
  "kind": "program",
}
`;

exports[`grammar should parse case-24 1`] = `
{
  "entries": [
    {
      "id": 1,
      "kind": "primitive",
      "name": "Int",
      "origin": "user",
      "ref": primitive Int;,
    },
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 3,
          "init": null,
          "kind": "def_field",
          "name": "a",
          "ref": a: Int;,
          "type": {
            "id": 2,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "args": [],
          "attributes": [
            {
              "ref": virtual,
              "type": "virtual",
            },
          ],
          "id": 7,
          "kind": "def_function",
          "name": "a",
          "origin": "user",
          "ref": virtual fun a(): Int {
        return a;
    },
          "return": {
            "id": 4,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
          "statements": [
            {
              "expression": {
                "id": 5,
                "kind": "id",
                "ref": a,
                "value": "a",
              },
              "id": 6,
              "kind": "statement_return",
              "ref": return a;,
            },
          ],
        },
      ],
      "id": 8,
      "kind": "def_trait",
      "name": "SomeTrait",
      "origin": "user",
      "ref": trait SomeTrait {
    a: Int;

    virtual fun a(): Int {
        return a;
    }
},
      "traits": [],
    },
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 10,
          "init": null,
          "kind": "def_field",
          "name": "b",
          "ref": b: Int;,
          "type": {
            "id": 9,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "args": [],
          "attributes": [
            {
              "ref": override,
              "type": "overrides",
            },
          ],
          "id": 14,
          "kind": "def_function",
          "name": "a",
          "origin": "user",
          "ref": override fun a(): Int {
        return "hello world!";
    },
          "return": {
            "id": 11,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
          "statements": [
            {
              "expression": {
                "id": 12,
                "kind": "string",
                "ref": "hello world!",
                "value": "hello world!",
              },
              "id": 13,
              "kind": "statement_return",
              "ref": return "hello world!";,
            },
          ],
        },
      ],
      "id": 16,
      "kind": "def_contract",
      "name": "Main",
      "origin": "user",
      "ref": contract Main with SomeTrait {
    b: Int;

    override fun a(): Int {
        return "hello world!";
    }
},
      "traits": [
        {
          "id": 15,
          "kind": "id",
          "ref": SomeTrait,
          "value": "SomeTrait",
        },
      ],
    },
  ],
  "id": 17,
  "kind": "program",
}
`;

exports[`grammar should parse case-25 1`] = `
{
  "entries": [
    {
      "args": [
        {
          "id": 3,
          "kind": "def_argument",
          "name": "a",
          "ref": a: Int,
          "type": {
            "id": 2,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "id": 5,
          "kind": "def_argument",
          "name": "b",
          "ref": b: Int,
          "type": {
            "id": 4,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
      ],
      "attributes": [],
      "id": 16,
      "kind": "def_function",
      "name": "function",
      "origin": "user",
      "ref": fun function(a: Int, b: Int): Int {
    return (a >> b) || (a << (32 - b));
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 14,
            "kind": "op_binary",
            "left": {
              "id": 8,
              "kind": "op_binary",
              "left": {
                "id": 6,
                "kind": "id",
                "ref": a,
                "value": "a",
              },
              "op": ">>",
              "ref": a >> b,
              "right": {
                "id": 7,
                "kind": "id",
                "ref": b,
                "value": "b",
              },
            },
            "op": "||",
            "ref": (a >> b) || (a << (32 - b)),
            "right": {
              "id": 13,
              "kind": "op_binary",
              "left": {
                "id": 9,
                "kind": "id",
                "ref": a,
                "value": "a",
              },
              "op": "<<",
              "ref": a << (32 - b),
              "right": {
                "id": 12,
                "kind": "op_binary",
                "left": {
                  "id": 10,
                  "kind": "number",
                  "ref": 32,
                  "value": 32n,
                },
                "op": "-",
                "ref": 32 - b,
                "right": {
                  "id": 11,
                  "kind": "id",
                  "ref": b,
                  "value": "b",
                },
              },
            },
          },
          "id": 15,
          "kind": "statement_return",
          "ref": return (a >> b) || (a << (32 - b));,
        },
      ],
    },
  ],
  "id": 17,
  "kind": "program",
}
`;

exports[`grammar should parse case-26 1`] = `
{
  "entries": [
    {
      "attributes": [],
      "declarations": [
        {
          "attributes": [
            {
              "ref": override,
              "type": "overrides",
            },
          ],
          "id": 3,
          "kind": "def_constant",
          "name": "Test",
          "ref": override const Test: Int = 0;,
          "type": {
            "id": 1,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
          "value": {
            "id": 2,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
        },
      ],
      "id": 4,
      "kind": "def_contract",
      "name": "Contract",
      "origin": "user",
      "ref": contract Contract {
    override const Test: Int = 0;
},
      "traits": [],
    },
  ],
  "id": 5,
  "kind": "program",
}
`;
