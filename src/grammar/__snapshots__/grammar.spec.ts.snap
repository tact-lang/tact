// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`grammar should fail abstract-const-without-modifier 1`] = `
"<unknown>:2:5: Abstract constant doesn't have abstract modifier
Line 2, col 5:
  1 | trait t {
> 2 |     const c: Int;
          ^~~~~~~~~~~~~
  3 | }
"
`;

exports[`grammar should fail contract-empty-traits-list-with-keyword 1`] = `
"<unknown>:1:20: Parse error: expected "_", "A".."Z", or "a".."z"

Line 1, col 20:
> 1 | contract Name with {}
                         ^
  2 | 
"
`;

exports[`grammar should fail contract-init-trailing-comma-empty-params 1`] = `
"<unknown>:2:10: Empty parameter list should not have a dangling comma.
Line 2, col 10:
  1 | contract Name {
> 2 |     init(,) {}
               ^
  3 | }
"
`;

exports[`grammar should fail contract-trailing-comma-empty-traits-list 1`] = `
"<unknown>:1:19: Parse error: expected "_", "A".."Z", or "a".."z"

Line 1, col 19:
> 1 | contract Name with, {}
                        ^
  2 | 
"
`;

exports[`grammar should fail contract-with-imports 1`] = `
"<unknown>:6:1: Parse error: expected end of input, "trait", "contract", "message", "struct", "const", "@name", "fun", or "primitive"

Line 6, col 1:
  5 | // all imports must be at the very top of the file
> 6 | import "@stdlib/not-allowed";
      ^
  7 | 
"
`;

exports[`grammar should fail expr-fun-call-trailing-comma-no-args 1`] = `
"<unknown>:6:14: Empty argument list should not have a dangling comma.
Line 6, col 14:
  5 | fun b(): Int {
> 6 |     return a(,);
                   ^
  7 | }
"
`;

exports[`grammar should fail expr-method-call-trailing-comma-no-args 1`] = `
"<unknown>:2:24: Empty argument list should not have a dangling comma.
Line 2, col 24:
  1 | fun another() {
> 2 |     return 42.toString(,);
                             ^
  3 | }
"
`;

exports[`grammar should fail ident-cannot-be-if-reserved-word 1`] = `
"<unknown>:2:9: Parse error: expected not a reservedWord

Line 2, col 9:
  1 | fun hello(): Int {
> 2 |     let if: Int = 0;
              ^
  3 | }
"
`;

exports[`grammar should fail ident-contract-cannot-start-with-__gen 1`] = `
"<unknown>:1:10: Variable name cannot start with "__gen"
Line 1, col 10:
> 1 | contract __gen_a {
               ^~~~~~~
  2 | 
"
`;

exports[`grammar should fail ident-fun-cannot-start-with-__gen 1`] = `
"<unknown>:1:5: Variable name cannot start with "__gen"
Line 1, col 5:
> 1 | fun __gen_hello(): Int {
          ^~~~~~~~~~~
  2 |     
"
`;

exports[`grammar should fail ident-fun-param-cannot-start-with-__gen 1`] = `
"<unknown>:1:10: Variable name cannot start with "__gen"
Line 1, col 10:
> 1 | fun main(__gen: Int): Int {
               ^~~~~
  2 |     return 0;
"
`;

exports[`grammar should fail ident-fun-param-cannot-start-with-__tact 1`] = `
"<unknown>:2:11: Variable name cannot start with "__tact"
Line 2, col 11:
  1 | contract A {
> 2 |     fun b(__tact: Int) {
                ^~~~~~
  3 |         
"
`;

exports[`grammar should fail ident-init-param-cannot-start-with-__tact 1`] = `
"<unknown>:2:10: Variable name cannot start with "__tact"
Line 2, col 10:
  1 | contract A {
> 2 |     init(__tact: Int) {
               ^~~~~~
  3 |         
"
`;

exports[`grammar should fail ident-let-cannot-start-with-__gen 1`] = `
"<unknown>:2:9: Variable name cannot start with "__gen"
Line 2, col 9:
  1 | fun hello(): Int {
> 2 |     let __gen_a: Int = 0;
              ^~~~~~~
  3 | }
"
`;

exports[`grammar should fail ident-let-cannot-start-with-__tact 1`] = `
"<unknown>:2:9: Variable name cannot start with "__tact"
Line 2, col 9:
  1 | fun hello(): Int {
> 2 |     let __tact_a: Int = 0;
              ^~~~~~~~
  3 | }
"
`;

exports[`grammar should fail ident-struct-cannot-start-with-__gen 1`] = `
"<unknown>:1:8: Parse error: expected "A".."Z"

Line 1, col 8:
> 1 | struct __genA {
             ^
  2 |     a: Int;
"
`;

exports[`grammar should fail item-fun-non-void-trailing-comma-no-params 1`] = `
"<unknown>:1:14: Empty parameter list should not have a dangling comma.
Line 1, col 14:
> 1 | fun function(,) : Int {
                   ^
  2 |     return 42;
"
`;

exports[`grammar should fail item-fun-void-trailing-comma-no-params 1`] = `
"<unknown>:1:14: Empty parameter list should not have a dangling comma.
Line 1, col 14:
> 1 | fun function(,) {}
                   ^
  2 | 
"
`;

exports[`grammar should fail item-fun-without-body 1`] = `
"<unknown>:1:20: Parse error: expected "{"

Line 1, col 20:
> 1 | fun testFunc(): Int;
                         ^
"
`;

exports[`grammar should fail item-native-fun-not-void-decl-trailing-comma-no-params.tact 1`] = `
"<unknown>:2:31: Empty parameter list should not have a dangling comma.
Line 2, col 31:
  1 | @name(native_name_2)
> 2 | native testNativeFuncWithType(,): Int;
                                    ^
"
`;

exports[`grammar should fail item-native-fun-void-decl-trailing-comma-no-params 1`] = `
"<unknown>:2:23: Empty parameter list should not have a dangling comma.
Line 2, col 23:
  1 | @name(native_name_1)
> 2 | native testNativeFunc(,);
                            ^
"
`;

exports[`grammar should fail literal-dec-trailing-underscore 1`] = `
"<unknown>:2:16: Parse error: expected a digit

Line 2, col 16:
  1 | fun test_fun(): Int {
> 2 |     return 123_;
                     ^
  3 | }
"
`;

exports[`grammar should fail literal-double-underscore 1`] = `
"<unknown>:2:20: Parse error: expected a digit

Line 2, col 20:
  1 | fun test_fun(): Int {
> 2 |     return 123_123__123;
                         ^
  3 | }
"
`;

exports[`grammar should fail literal-hex-trailing-underscore 1`] = `
"<unknown>:2:18: Parse error: expected a hexadecimal digit

Line 2, col 18:
  1 | fun test_fun(): Int {
> 2 |     return 0x123_;
                       ^
  3 | }
"
`;

exports[`grammar should fail literal-no-underscore-after-0b 1`] = `
"<unknown>:2:14: Parse error: expected "1" or "0"

Line 2, col 14:
  1 | fun test_fun(): Int {
> 2 |     return 0b_00101010;
                   ^
  3 | }
"
`;

exports[`grammar should fail literal-no-underscores-if-leading-zero 1`] = `
"<unknown>:2:15: Parse error: expected "}" or ";"

Line 2, col 15:
  1 | fun test_fun(): Int {
> 2 |     return 012_3;
                    ^
  3 | }
"
`;

exports[`grammar should fail literal-non-binary-digits 1`] = `
"<unknown>:2:15: Parse error: expected "}" or ";"

Line 2, col 15:
  1 | fun test_fun(): Int {
> 2 |     return 0b123;
                    ^
  3 | }
"
`;

exports[`grammar should fail literal-underscore-after-leading-zero 1`] = `
"<unknown>:2:13: Parse error: expected "}" or ";"

Line 2, col 13:
  1 | fun test_fun(): Int {
> 2 |     return 0_123;
                  ^
  3 | }
"
`;

exports[`grammar should fail struct-double-semicolon 1`] = `
"<unknown>:2:19: Parse error: expected "}"

Line 2, col 19:
  1 | // too many semicolons
> 2 | struct A { x: Int;; }
                        ^
  3 | 
"
`;

exports[`grammar should fail struct-missing-semicolon-between-fields 1`] = `
"<unknown>:2:19: Parse error: expected "}", ";", "=", "as", or "?"

Line 2, col 19:
  1 | // missing ; between fields
> 2 | struct B { x: Int y: Int }
                        ^
  3 | 
"
`;

exports[`grammar should fail struct-missing-semicolon-between-fields-with-initializer 1`] = `
"<unknown>:2:24: Parse error: expected "}", ";", ".", "!!", "%", "/", "*", ">>", "<<", "-", "+", "==", "!=", "<=", "<", ">=", ">", "^", "&", "&&", "|", "?", or "||"

Line 2, col 24:
  1 | // missing ; between fields
> 2 | struct B { x: Int = 42 y: Int }
                             ^
  3 | 
"
`;

exports[`grammar should fail trait-empty-traits-list-with-keyword 1`] = `
"<unknown>:1:17: Parse error: expected "_", "A".."Z", or "a".."z"

Line 1, col 17:
> 1 | trait Name with {}
                      ^
  2 | 
"
`;

exports[`grammar should fail trait-fun-non-void-trailing-comma-no-params.tact 1`] = `
"<unknown>:2:39: Empty parameter list should not have a dangling comma.
Line 2, col 39:
  1 | trait Test {
> 2 |     abstract fun testAbstractWithType(,): Int;
                                            ^
  3 | }
"
`;

exports[`grammar should fail trait-fun-void-trailing-comma-no-params 1`] = `
"<unknown>:2:31: Empty parameter list should not have a dangling comma.
Line 2, col 31:
  1 | trait Test {
> 2 |     abstract fun testAbstract(,);
                                    ^
  3 | }
"
`;

exports[`grammar should fail trait-trailing-comma-empty-traits-list 1`] = `
"<unknown>:1:16: Parse error: expected "_", "A".."Z", or "a".."z"

Line 1, col 16:
> 1 | trait Name with, {}
                     ^
  2 | 
"
`;

exports[`grammar should fail type-ident-msg-should-be-capitalized 1`] = `
"<unknown>:1:14: Parse error: expected "A".."Z"

Line 1, col 14:
> 1 | message(123) foo {
                   ^
  2 |     signature: Slice;
"
`;

exports[`grammar should fail type-ident-struct-should-be-capitalized 1`] = `
"<unknown>:1:8: Parse error: expected "A".."Z"

Line 1, col 8:
> 1 | struct lowercaseIdForType {
             ^
  2 |     a: Int;
"
`;

exports[`grammar should parse abstract-const 1`] = `
{
  "id": 6,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "declarations": [
        {
          "attributes": [
            {
              "loc": abstract,
              "type": "abstract",
            },
          ],
          "id": 4,
          "kind": "constant_decl",
          "loc": abstract const c: Int;,
          "name": {
            "id": 2,
            "kind": "id",
            "loc": c,
            "text": "c",
          },
          "type": {
            "id": 3,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 5,
      "kind": "trait",
      "loc": trait t {
    abstract const c: Int;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": t,
        "text": "t",
      },
      "traits": [],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse contract-with-const-override 1`] = `
{
  "id": 7,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "declarations": [
        {
          "attributes": [
            {
              "loc": override,
              "type": "overrides",
            },
          ],
          "id": 5,
          "initializer": {
            "id": 4,
            "kind": "number",
            "loc": 0,
            "value": 0n,
          },
          "kind": "constant_def",
          "loc": override const Test: Int = 0;,
          "name": {
            "id": 2,
            "kind": "id",
            "loc": Test,
            "text": "Test",
          },
          "type": {
            "id": 3,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 6,
      "kind": "contract",
      "loc": contract Contract {
    override const Test: Int = 0;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": Contract,
        "text": "Contract",
      },
      "traits": [],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse contract-with-imports 1`] = `
{
  "id": 6,
  "imports": [
    {
      "id": 2,
      "kind": "import",
      "loc": import "@stdlib/deploy";,
      "path": {
        "id": 1,
        "kind": "string",
        "loc": "@stdlib/deploy",
        "value": "@stdlib/deploy",
      },
    },
  ],
  "items": [
    {
      "attributes": [],
      "declarations": [],
      "id": 5,
      "kind": "contract",
      "loc": contract Test with Deploy { },
      "name": {
        "id": 3,
        "kind": "id",
        "loc": Test,
        "text": "Test",
      },
      "traits": [
        {
          "id": 4,
          "kind": "id",
          "loc": Deploy,
          "text": "Deploy",
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse contract-with-init 1`] = `
{
  "id": 26,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 4,
          "initializer": null,
          "kind": "field_decl",
          "loc": a: Int,
          "name": {
            "id": 2,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 3,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "as": null,
          "id": 7,
          "initializer": null,
          "kind": "field_decl",
          "loc": b: Int,
          "name": {
            "id": 5,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "type": {
            "id": 6,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "id": 24,
          "kind": "contract_init",
          "loc": init(a: Int, b: Int) {
        self.a = a;
        self.b = b;
    },
          "params": [
            {
              "id": 10,
              "kind": "typed_parameter",
              "loc": a: Int,
              "name": {
                "id": 8,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              "type": {
                "id": 9,
                "kind": "type_id",
                "loc": Int,
                "text": "Int",
              },
            },
            {
              "id": 13,
              "kind": "typed_parameter",
              "loc": b: Int,
              "name": {
                "id": 11,
                "kind": "id",
                "loc": b,
                "text": "b",
              },
              "type": {
                "id": 12,
                "kind": "type_id",
                "loc": Int,
                "text": "Int",
              },
            },
          ],
          "statements": [
            {
              "expression": {
                "id": 17,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              "id": 18,
              "kind": "statement_assign",
              "loc": self.a = a;,
              "path": {
                "aggregate": {
                  "id": 14,
                  "kind": "id",
                  "loc": self,
                  "text": "self",
                },
                "field": {
                  "id": 15,
                  "kind": "id",
                  "loc": a,
                  "text": "a",
                },
                "id": 16,
                "kind": "field_access",
                "loc": self.a,
              },
            },
            {
              "expression": {
                "id": 22,
                "kind": "id",
                "loc": b,
                "text": "b",
              },
              "id": 23,
              "kind": "statement_assign",
              "loc": self.b = b;,
              "path": {
                "aggregate": {
                  "id": 19,
                  "kind": "id",
                  "loc": self,
                  "text": "self",
                },
                "field": {
                  "id": 20,
                  "kind": "id",
                  "loc": b,
                  "text": "b",
                },
                "id": 21,
                "kind": "field_access",
                "loc": self.b,
              },
            },
          ],
        },
      ],
      "id": 25,
      "kind": "contract",
      "loc": contract Sample {
    a: Int;
    b: Int;
    
    init(a: Int, b: Int) {
        self.a = a;
        self.b = b;
    }
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": Sample,
        "text": "Sample",
      },
      "traits": [],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse contract-with-trait 1`] = `
{
  "id": 24,
  "imports": [],
  "items": [
    {
      "id": 2,
      "kind": "primitive_type_decl",
      "loc": primitive Int;,
      "name": {
        "id": 1,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
    },
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 6,
          "initializer": null,
          "kind": "field_decl",
          "loc": a: Int,
          "name": {
            "id": 4,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 5,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "attributes": [
            {
              "loc": virtual,
              "type": "virtual",
            },
          ],
          "id": 11,
          "kind": "function_def",
          "loc": virtual fun a(): Int {
        return a;
    },
          "name": {
            "id": 7,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "params": [],
          "return": {
            "id": 8,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
          "statements": [
            {
              "expression": {
                "id": 9,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              "id": 10,
              "kind": "statement_return",
              "loc": return a;,
            },
          ],
        },
      ],
      "id": 12,
      "kind": "trait",
      "loc": trait SomeTrait {
    a: Int;

    virtual fun a(): Int {
        return a;
    }
},
      "name": {
        "id": 3,
        "kind": "id",
        "loc": SomeTrait,
        "text": "SomeTrait",
      },
      "traits": [],
    },
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 16,
          "initializer": null,
          "kind": "field_decl",
          "loc": b: Int,
          "name": {
            "id": 14,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "type": {
            "id": 15,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "attributes": [
            {
              "loc": override,
              "type": "overrides",
            },
          ],
          "id": 21,
          "kind": "function_def",
          "loc": override fun a(): Int {
        return b;
    },
          "name": {
            "id": 17,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "params": [],
          "return": {
            "id": 18,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
          "statements": [
            {
              "expression": {
                "id": 19,
                "kind": "id",
                "loc": b,
                "text": "b",
              },
              "id": 20,
              "kind": "statement_return",
              "loc": return b;,
            },
          ],
        },
      ],
      "id": 23,
      "kind": "contract",
      "loc": contract Main with SomeTrait {
    b: Int;

    override fun a(): Int {
        return b;
    }
},
      "name": {
        "id": 13,
        "kind": "id",
        "loc": Main,
        "text": "Main",
      },
      "traits": [
        {
          "id": 22,
          "kind": "id",
          "loc": SomeTrait,
          "text": "SomeTrait",
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse contract-with-trait-string-literal 1`] = `
{
  "id": 24,
  "imports": [],
  "items": [
    {
      "id": 2,
      "kind": "primitive_type_decl",
      "loc": primitive Int;,
      "name": {
        "id": 1,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
    },
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 6,
          "initializer": null,
          "kind": "field_decl",
          "loc": a: Int,
          "name": {
            "id": 4,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 5,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "attributes": [
            {
              "loc": virtual,
              "type": "virtual",
            },
          ],
          "id": 11,
          "kind": "function_def",
          "loc": virtual fun a(): Int {
        return a;
    },
          "name": {
            "id": 7,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "params": [],
          "return": {
            "id": 8,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
          "statements": [
            {
              "expression": {
                "id": 9,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              "id": 10,
              "kind": "statement_return",
              "loc": return a;,
            },
          ],
        },
      ],
      "id": 12,
      "kind": "trait",
      "loc": trait SomeTrait {
    a: Int;

    virtual fun a(): Int {
        return a;
    }
},
      "name": {
        "id": 3,
        "kind": "id",
        "loc": SomeTrait,
        "text": "SomeTrait",
      },
      "traits": [],
    },
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 16,
          "initializer": null,
          "kind": "field_decl",
          "loc": b: Int,
          "name": {
            "id": 14,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "type": {
            "id": 15,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "attributes": [
            {
              "loc": override,
              "type": "overrides",
            },
          ],
          "id": 21,
          "kind": "function_def",
          "loc": override fun a(): Int {
        return "hello world!";
    },
          "name": {
            "id": 17,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "params": [],
          "return": {
            "id": 18,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
          "statements": [
            {
              "expression": {
                "id": 19,
                "kind": "string",
                "loc": "hello world!",
                "value": "hello world!",
              },
              "id": 20,
              "kind": "statement_return",
              "loc": return "hello world!";,
            },
          ],
        },
      ],
      "id": 23,
      "kind": "contract",
      "loc": contract Main with SomeTrait {
    b: Int;

    override fun a(): Int {
        return "hello world!";
    }
},
      "name": {
        "id": 13,
        "kind": "id",
        "loc": Main,
        "text": "Main",
      },
      "traits": [
        {
          "id": 22,
          "kind": "id",
          "loc": SomeTrait,
          "text": "SomeTrait",
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-arith 1`] = `
{
  "id": 12,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 11,
      "kind": "function_def",
      "loc": fun testFunc(): Int {
    return (0 + 1) * 10 / 20;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 9,
            "kind": "op_binary",
            "left": {
              "id": 7,
              "kind": "op_binary",
              "left": {
                "id": 5,
                "kind": "op_binary",
                "left": {
                  "id": 3,
                  "kind": "number",
                  "loc": 0,
                  "value": 0n,
                },
                "loc": 0 + 1,
                "op": "+",
                "right": {
                  "id": 4,
                  "kind": "number",
                  "loc": 1,
                  "value": 1n,
                },
              },
              "loc": (0 + 1) * 10,
              "op": "*",
              "right": {
                "id": 6,
                "kind": "number",
                "loc": 10,
                "value": 10n,
              },
            },
            "loc": (0 + 1) * 10 / 20,
            "op": "/",
            "right": {
              "id": 8,
              "kind": "number",
              "loc": 20,
              "value": 20n,
            },
          },
          "id": 10,
          "kind": "statement_return",
          "loc": return (0 + 1) * 10 / 20;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-arith-and-cmp 1`] = `
{
  "id": 14,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 13,
      "kind": "function_def",
      "loc": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 11,
            "kind": "op_binary",
            "left": {
              "id": 9,
              "kind": "op_binary",
              "left": {
                "id": 7,
                "kind": "op_binary",
                "left": {
                  "id": 5,
                  "kind": "op_binary",
                  "left": {
                    "id": 3,
                    "kind": "number",
                    "loc": 0,
                    "value": 0n,
                  },
                  "loc": 0 + 1,
                  "op": "+",
                  "right": {
                    "id": 4,
                    "kind": "number",
                    "loc": 1,
                    "value": 1n,
                  },
                },
                "loc": (0 + 1) * 10,
                "op": "*",
                "right": {
                  "id": 6,
                  "kind": "number",
                  "loc": 10,
                  "value": 10n,
                },
              },
              "loc": (0 + 1) * 10 / 20,
              "op": "/",
              "right": {
                "id": 8,
                "kind": "number",
                "loc": 20,
                "value": 20n,
              },
            },
            "loc": (0 + 1) * 10 / 20 != 10,
            "op": "!=",
            "right": {
              "id": 10,
              "kind": "number",
              "loc": 10,
              "value": 10n,
            },
          },
          "id": 12,
          "kind": "statement_return",
          "loc": return (0 + 1) * 10 / 20 != 10;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-arith-bool-cmp-method-call 1`] = `
{
  "id": 27,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 26,
      "kind": "function_def",
      "loc": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 123.add(10);
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 24,
            "kind": "op_binary",
            "left": {
              "id": 13,
              "kind": "op_binary",
              "left": {
                "id": 9,
                "kind": "op_binary",
                "left": {
                  "id": 7,
                  "kind": "op_binary",
                  "left": {
                    "id": 5,
                    "kind": "op_binary",
                    "left": {
                      "id": 3,
                      "kind": "number",
                      "loc": 0,
                      "value": 0n,
                    },
                    "loc": 0 + 1,
                    "op": "+",
                    "right": {
                      "id": 4,
                      "kind": "number",
                      "loc": 1,
                      "value": 1n,
                    },
                  },
                  "loc": (0 + 1) * 10,
                  "op": "*",
                  "right": {
                    "id": 6,
                    "kind": "number",
                    "loc": 10,
                    "value": 10n,
                  },
                },
                "loc": (0 + 1) * 10 / 20,
                "op": "/",
                "right": {
                  "id": 8,
                  "kind": "number",
                  "loc": 20,
                  "value": 20n,
                },
              },
              "loc": (0 + 1) * 10 / 20 != 10 * someId,
              "op": "!=",
              "right": {
                "id": 12,
                "kind": "op_binary",
                "left": {
                  "id": 10,
                  "kind": "number",
                  "loc": 10,
                  "value": 10n,
                },
                "loc": 10 * someId,
                "op": "*",
                "right": {
                  "id": 11,
                  "kind": "id",
                  "loc": someId,
                  "text": "someId",
                },
              },
            },
            "loc": (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 123.add(10),
            "op": "||",
            "right": {
              "id": 23,
              "kind": "op_binary",
              "left": {
                "id": 16,
                "kind": "op_binary",
                "left": {
                  "id": 14,
                  "kind": "id",
                  "loc": some2,
                  "text": "some2",
                },
                "loc": some2 > 10,
                "op": ">",
                "right": {
                  "id": 15,
                  "kind": "number",
                  "loc": 10,
                  "value": 10n,
                },
              },
              "loc": some2 > 10 && some3 < 123.add(10),
              "op": "&&",
              "right": {
                "id": 22,
                "kind": "op_binary",
                "left": {
                  "id": 17,
                  "kind": "id",
                  "loc": some3,
                  "text": "some3",
                },
                "loc": some3 < 123.add(10),
                "op": "<",
                "right": {
                  "args": [
                    {
                      "id": 20,
                      "kind": "number",
                      "loc": 10,
                      "value": 10n,
                    },
                  ],
                  "id": 21,
                  "kind": "method_call",
                  "loc": 123.add(10),
                  "method": {
                    "id": 19,
                    "kind": "id",
                    "loc": add,
                    "text": "add",
                  },
                  "self": {
                    "id": 18,
                    "kind": "number",
                    "loc": 123,
                    "value": 123n,
                  },
                },
              },
            },
          },
          "id": 25,
          "kind": "statement_return",
          "loc": return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 123.add(10);,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-arith-bool-var 1`] = `
{
  "id": 24,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 23,
      "kind": "function_def",
      "loc": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 21,
            "kind": "op_binary",
            "left": {
              "id": 13,
              "kind": "op_binary",
              "left": {
                "id": 9,
                "kind": "op_binary",
                "left": {
                  "id": 7,
                  "kind": "op_binary",
                  "left": {
                    "id": 5,
                    "kind": "op_binary",
                    "left": {
                      "id": 3,
                      "kind": "number",
                      "loc": 0,
                      "value": 0n,
                    },
                    "loc": 0 + 1,
                    "op": "+",
                    "right": {
                      "id": 4,
                      "kind": "number",
                      "loc": 1,
                      "value": 1n,
                    },
                  },
                  "loc": (0 + 1) * 10,
                  "op": "*",
                  "right": {
                    "id": 6,
                    "kind": "number",
                    "loc": 10,
                    "value": 10n,
                  },
                },
                "loc": (0 + 1) * 10 / 20,
                "op": "/",
                "right": {
                  "id": 8,
                  "kind": "number",
                  "loc": 20,
                  "value": 20n,
                },
              },
              "loc": (0 + 1) * 10 / 20 != 10 * someId,
              "op": "!=",
              "right": {
                "id": 12,
                "kind": "op_binary",
                "left": {
                  "id": 10,
                  "kind": "number",
                  "loc": 10,
                  "value": 10n,
                },
                "loc": 10 * someId,
                "op": "*",
                "right": {
                  "id": 11,
                  "kind": "id",
                  "loc": someId,
                  "text": "someId",
                },
              },
            },
            "loc": (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10,
            "op": "||",
            "right": {
              "id": 20,
              "kind": "op_binary",
              "left": {
                "id": 16,
                "kind": "op_binary",
                "left": {
                  "id": 14,
                  "kind": "id",
                  "loc": some2,
                  "text": "some2",
                },
                "loc": some2 > 10,
                "op": ">",
                "right": {
                  "id": 15,
                  "kind": "number",
                  "loc": 10,
                  "value": 10n,
                },
              },
              "loc": some2 > 10 && some3 < 10,
              "op": "&&",
              "right": {
                "id": 19,
                "kind": "op_binary",
                "left": {
                  "id": 17,
                  "kind": "id",
                  "loc": some3,
                  "text": "some3",
                },
                "loc": some3 < 10,
                "op": "<",
                "right": {
                  "id": 18,
                  "kind": "number",
                  "loc": 10,
                  "value": 10n,
                },
              },
            },
          },
          "id": 22,
          "kind": "statement_return",
          "loc": return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-chaining-unbox 1`] = `
{
  "id": 16,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 15,
      "kind": "function_def",
      "loc": fun testFunc(m: map<Int, Int>): Int {
    return m.asCell()!!.hash();
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [
        {
          "id": 7,
          "kind": "typed_parameter",
          "loc": m: map<Int, Int>,
          "name": {
            "id": 3,
            "kind": "id",
            "loc": m,
            "text": "m",
          },
          "type": {
            "id": 6,
            "keyStorageType": null,
            "keyType": {
              "id": 4,
              "kind": "type_id",
              "loc": Int,
              "text": "Int",
            },
            "kind": "map_type",
            "loc": map<Int, Int>,
            "valueStorageType": null,
            "valueType": {
              "id": 5,
              "kind": "type_id",
              "loc": Int,
              "text": "Int",
            },
          },
        },
      ],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "args": [],
            "id": 13,
            "kind": "method_call",
            "loc": m.asCell()!!.hash(),
            "method": {
              "id": 12,
              "kind": "id",
              "loc": hash,
              "text": "hash",
            },
            "self": {
              "id": 11,
              "kind": "op_unary",
              "loc": m.asCell()!!,
              "op": "!!",
              "operand": {
                "args": [],
                "id": 10,
                "kind": "method_call",
                "loc": m.asCell(),
                "method": {
                  "id": 9,
                  "kind": "id",
                  "loc": asCell,
                  "text": "asCell",
                },
                "self": {
                  "id": 8,
                  "kind": "id",
                  "loc": m,
                  "text": "m",
                },
              },
            },
          },
          "id": 14,
          "kind": "statement_return",
          "loc": return m.asCell()!!.hash();,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-condition-with-or 1`] = `
{
  "id": 22,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 21,
      "kind": "function_def",
      "loc": fun testFunc(a: Int): Int {
    return a == 123 || a == 456 ? a + 1 : a + 2;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [
        {
          "id": 5,
          "kind": "typed_parameter",
          "loc": a: Int,
          "name": {
            "id": 3,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 4,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "condition": {
              "id": 12,
              "kind": "op_binary",
              "left": {
                "id": 8,
                "kind": "op_binary",
                "left": {
                  "id": 6,
                  "kind": "id",
                  "loc": a,
                  "text": "a",
                },
                "loc": a == 123,
                "op": "==",
                "right": {
                  "id": 7,
                  "kind": "number",
                  "loc": 123,
                  "value": 123n,
                },
              },
              "loc": a == 123 || a == 456,
              "op": "||",
              "right": {
                "id": 11,
                "kind": "op_binary",
                "left": {
                  "id": 9,
                  "kind": "id",
                  "loc": a,
                  "text": "a",
                },
                "loc": a == 456,
                "op": "==",
                "right": {
                  "id": 10,
                  "kind": "number",
                  "loc": 456,
                  "value": 456n,
                },
              },
            },
            "elseBranch": {
              "id": 18,
              "kind": "op_binary",
              "left": {
                "id": 16,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              "loc": a + 2,
              "op": "+",
              "right": {
                "id": 17,
                "kind": "number",
                "loc": 2,
                "value": 2n,
              },
            },
            "id": 19,
            "kind": "conditional",
            "loc": a == 123 || a == 456 ? a + 1 : a + 2,
            "thenBranch": {
              "id": 15,
              "kind": "op_binary",
              "left": {
                "id": 13,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              "loc": a + 1,
              "op": "+",
              "right": {
                "id": 14,
                "kind": "number",
                "loc": 1,
                "value": 1n,
              },
            },
          },
          "id": 20,
          "kind": "statement_return",
          "loc": return a == 123 || a == 456 ? a + 1 : a + 2;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-conditional 1`] = `
{
  "id": 14,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 13,
      "kind": "function_def",
      "loc": fun testFunc(a: Int): Int {
    return a == 123 ? 1 : 2;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [
        {
          "id": 5,
          "kind": "typed_parameter",
          "loc": a: Int,
          "name": {
            "id": 3,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 4,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "condition": {
              "id": 8,
              "kind": "op_binary",
              "left": {
                "id": 6,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              "loc": a == 123,
              "op": "==",
              "right": {
                "id": 7,
                "kind": "number",
                "loc": 123,
                "value": 123n,
              },
            },
            "elseBranch": {
              "id": 10,
              "kind": "number",
              "loc": 2,
              "value": 2n,
            },
            "id": 11,
            "kind": "conditional",
            "loc": a == 123 ? 1 : 2,
            "thenBranch": {
              "id": 9,
              "kind": "number",
              "loc": 1,
              "value": 1n,
            },
          },
          "id": 12,
          "kind": "statement_return",
          "loc": return a == 123 ? 1 : 2;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-conditional-with-let 1`] = `
{
  "id": 18,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 17,
      "kind": "function_def",
      "loc": fun testFunc(a: Int): Int {
    let b: Int = a == 123 ? 1 : 2;
    return b;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [
        {
          "id": 5,
          "kind": "typed_parameter",
          "loc": a: Int,
          "name": {
            "id": 3,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 4,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "condition": {
              "id": 10,
              "kind": "op_binary",
              "left": {
                "id": 8,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              "loc": a == 123,
              "op": "==",
              "right": {
                "id": 9,
                "kind": "number",
                "loc": 123,
                "value": 123n,
              },
            },
            "elseBranch": {
              "id": 12,
              "kind": "number",
              "loc": 2,
              "value": 2n,
            },
            "id": 13,
            "kind": "conditional",
            "loc": a == 123 ? 1 : 2,
            "thenBranch": {
              "id": 11,
              "kind": "number",
              "loc": 1,
              "value": 1n,
            },
          },
          "id": 14,
          "kind": "statement_let",
          "loc": let b: Int = a == 123 ? 1 : 2;,
          "name": {
            "id": 6,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "type": {
            "id": 7,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 15,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "id": 16,
          "kind": "statement_return",
          "loc": return b;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-fun-call 1`] = `
{
  "id": 29,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 28,
      "kind": "function_def",
      "loc": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < abs(123.add(10));
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 26,
            "kind": "op_binary",
            "left": {
              "id": 13,
              "kind": "op_binary",
              "left": {
                "id": 9,
                "kind": "op_binary",
                "left": {
                  "id": 7,
                  "kind": "op_binary",
                  "left": {
                    "id": 5,
                    "kind": "op_binary",
                    "left": {
                      "id": 3,
                      "kind": "number",
                      "loc": 0,
                      "value": 0n,
                    },
                    "loc": 0 + 1,
                    "op": "+",
                    "right": {
                      "id": 4,
                      "kind": "number",
                      "loc": 1,
                      "value": 1n,
                    },
                  },
                  "loc": (0 + 1) * 10,
                  "op": "*",
                  "right": {
                    "id": 6,
                    "kind": "number",
                    "loc": 10,
                    "value": 10n,
                  },
                },
                "loc": (0 + 1) * 10 / 20,
                "op": "/",
                "right": {
                  "id": 8,
                  "kind": "number",
                  "loc": 20,
                  "value": 20n,
                },
              },
              "loc": (0 + 1) * 10 / 20 != 10 * someId,
              "op": "!=",
              "right": {
                "id": 12,
                "kind": "op_binary",
                "left": {
                  "id": 10,
                  "kind": "number",
                  "loc": 10,
                  "value": 10n,
                },
                "loc": 10 * someId,
                "op": "*",
                "right": {
                  "id": 11,
                  "kind": "id",
                  "loc": someId,
                  "text": "someId",
                },
              },
            },
            "loc": (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < abs(123.add(10)),
            "op": "||",
            "right": {
              "id": 25,
              "kind": "op_binary",
              "left": {
                "id": 16,
                "kind": "op_binary",
                "left": {
                  "id": 14,
                  "kind": "id",
                  "loc": some2,
                  "text": "some2",
                },
                "loc": some2 > 10,
                "op": ">",
                "right": {
                  "id": 15,
                  "kind": "number",
                  "loc": 10,
                  "value": 10n,
                },
              },
              "loc": some2 > 10 && some3 < abs(123.add(10)),
              "op": "&&",
              "right": {
                "id": 24,
                "kind": "op_binary",
                "left": {
                  "id": 17,
                  "kind": "id",
                  "loc": some3,
                  "text": "some3",
                },
                "loc": some3 < abs(123.add(10)),
                "op": "<",
                "right": {
                  "args": [
                    {
                      "args": [
                        {
                          "id": 21,
                          "kind": "number",
                          "loc": 10,
                          "value": 10n,
                        },
                      ],
                      "id": 22,
                      "kind": "method_call",
                      "loc": 123.add(10),
                      "method": {
                        "id": 20,
                        "kind": "id",
                        "loc": add,
                        "text": "add",
                      },
                      "self": {
                        "id": 19,
                        "kind": "number",
                        "loc": 123,
                        "value": 123n,
                      },
                    },
                  ],
                  "function": {
                    "id": 18,
                    "kind": "id",
                    "loc": abs,
                    "text": "abs",
                  },
                  "id": 23,
                  "kind": "static_call",
                  "loc": abs(123.add(10)),
                },
              },
            },
          },
          "id": 27,
          "kind": "statement_return",
          "loc": return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < abs(123.add(10));,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-int-literal 1`] = `
{
  "id": 6,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 5,
      "kind": "function_def",
      "loc": fun testFunc(): Int {
    return 0;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 3,
            "kind": "number",
            "loc": 0,
            "value": 0n,
          },
          "id": 4,
          "kind": "statement_return",
          "loc": return 0;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-nested-conditional 1`] = `
{
  "id": 27,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 26,
      "kind": "function_def",
      "loc": fun testFunc(a: Int): Int {
    return a == 123 || a == 456 ? (a == 10 ? a : a * 2) : a + 2;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [
        {
          "id": 5,
          "kind": "typed_parameter",
          "loc": a: Int,
          "name": {
            "id": 3,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 4,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "condition": {
              "id": 12,
              "kind": "op_binary",
              "left": {
                "id": 8,
                "kind": "op_binary",
                "left": {
                  "id": 6,
                  "kind": "id",
                  "loc": a,
                  "text": "a",
                },
                "loc": a == 123,
                "op": "==",
                "right": {
                  "id": 7,
                  "kind": "number",
                  "loc": 123,
                  "value": 123n,
                },
              },
              "loc": a == 123 || a == 456,
              "op": "||",
              "right": {
                "id": 11,
                "kind": "op_binary",
                "left": {
                  "id": 9,
                  "kind": "id",
                  "loc": a,
                  "text": "a",
                },
                "loc": a == 456,
                "op": "==",
                "right": {
                  "id": 10,
                  "kind": "number",
                  "loc": 456,
                  "value": 456n,
                },
              },
            },
            "elseBranch": {
              "id": 23,
              "kind": "op_binary",
              "left": {
                "id": 21,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              "loc": a + 2,
              "op": "+",
              "right": {
                "id": 22,
                "kind": "number",
                "loc": 2,
                "value": 2n,
              },
            },
            "id": 24,
            "kind": "conditional",
            "loc": a == 123 || a == 456 ? (a == 10 ? a : a * 2) : a + 2,
            "thenBranch": {
              "condition": {
                "id": 15,
                "kind": "op_binary",
                "left": {
                  "id": 13,
                  "kind": "id",
                  "loc": a,
                  "text": "a",
                },
                "loc": a == 10,
                "op": "==",
                "right": {
                  "id": 14,
                  "kind": "number",
                  "loc": 10,
                  "value": 10n,
                },
              },
              "elseBranch": {
                "id": 19,
                "kind": "op_binary",
                "left": {
                  "id": 17,
                  "kind": "id",
                  "loc": a,
                  "text": "a",
                },
                "loc": a * 2,
                "op": "*",
                "right": {
                  "id": 18,
                  "kind": "number",
                  "loc": 2,
                  "value": 2n,
                },
              },
              "id": 20,
              "kind": "conditional",
              "loc": a == 10 ? a : a * 2,
              "thenBranch": {
                "id": 16,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
            },
          },
          "id": 25,
          "kind": "statement_return",
          "loc": return a == 123 || a == 456 ? (a == 10 ? a : a * 2) : a + 2;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-parens 1`] = `
{
  "id": 15,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 14,
      "kind": "function_def",
      "loc": fun testFunc(): Int {
    return 1 + 2 + (123 + 3)!! > 123;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 12,
            "kind": "op_binary",
            "left": {
              "id": 10,
              "kind": "op_binary",
              "left": {
                "id": 5,
                "kind": "op_binary",
                "left": {
                  "id": 3,
                  "kind": "number",
                  "loc": 1,
                  "value": 1n,
                },
                "loc": 1 + 2,
                "op": "+",
                "right": {
                  "id": 4,
                  "kind": "number",
                  "loc": 2,
                  "value": 2n,
                },
              },
              "loc": 1 + 2 + (123 + 3)!!,
              "op": "+",
              "right": {
                "id": 9,
                "kind": "op_unary",
                "loc": (123 + 3)!!,
                "op": "!!",
                "operand": {
                  "id": 8,
                  "kind": "op_binary",
                  "left": {
                    "id": 6,
                    "kind": "number",
                    "loc": 123,
                    "value": 123n,
                  },
                  "loc": 123 + 3,
                  "op": "+",
                  "right": {
                    "id": 7,
                    "kind": "number",
                    "loc": 3,
                    "value": 3n,
                  },
                },
              },
            },
            "loc": 1 + 2 + (123 + 3)!! > 123,
            "op": ">",
            "right": {
              "id": 11,
              "kind": "number",
              "loc": 123,
              "value": 123n,
            },
          },
          "id": 13,
          "kind": "statement_return",
          "loc": return 1 + 2 + (123 + 3)!! > 123;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-with-unbox 1`] = `
{
  "id": 13,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 12,
      "kind": "function_def",
      "loc": fun testFunc(): Int {
    return 1 + 2 + 3!! > 123;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 10,
            "kind": "op_binary",
            "left": {
              "id": 8,
              "kind": "op_binary",
              "left": {
                "id": 5,
                "kind": "op_binary",
                "left": {
                  "id": 3,
                  "kind": "number",
                  "loc": 1,
                  "value": 1n,
                },
                "loc": 1 + 2,
                "op": "+",
                "right": {
                  "id": 4,
                  "kind": "number",
                  "loc": 2,
                  "value": 2n,
                },
              },
              "loc": 1 + 2 + 3!!,
              "op": "+",
              "right": {
                "id": 7,
                "kind": "op_unary",
                "loc": 3!!,
                "op": "!!",
                "operand": {
                  "id": 6,
                  "kind": "number",
                  "loc": 3,
                  "value": 3n,
                },
              },
            },
            "loc": 1 + 2 + 3!! > 123,
            "op": ">",
            "right": {
              "id": 9,
              "kind": "number",
              "loc": 123,
              "value": 123n,
            },
          },
          "id": 11,
          "kind": "statement_return",
          "loc": return 1 + 2 + 3!! > 123;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse expr-with-var 1`] = `
{
  "id": 16,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 15,
      "kind": "function_def",
      "loc": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 13,
            "kind": "op_binary",
            "left": {
              "id": 9,
              "kind": "op_binary",
              "left": {
                "id": 7,
                "kind": "op_binary",
                "left": {
                  "id": 5,
                  "kind": "op_binary",
                  "left": {
                    "id": 3,
                    "kind": "number",
                    "loc": 0,
                    "value": 0n,
                  },
                  "loc": 0 + 1,
                  "op": "+",
                  "right": {
                    "id": 4,
                    "kind": "number",
                    "loc": 1,
                    "value": 1n,
                  },
                },
                "loc": (0 + 1) * 10,
                "op": "*",
                "right": {
                  "id": 6,
                  "kind": "number",
                  "loc": 10,
                  "value": 10n,
                },
              },
              "loc": (0 + 1) * 10 / 20,
              "op": "/",
              "right": {
                "id": 8,
                "kind": "number",
                "loc": 20,
                "value": 20n,
              },
            },
            "loc": (0 + 1) * 10 / 20 != 10 * someId,
            "op": "!=",
            "right": {
              "id": 12,
              "kind": "op_binary",
              "left": {
                "id": 10,
                "kind": "number",
                "loc": 10,
                "value": 10n,
              },
              "loc": 10 * someId,
              "op": "*",
              "right": {
                "id": 11,
                "kind": "id",
                "loc": someId,
                "text": "someId",
              },
            },
          },
          "id": 14,
          "kind": "statement_return",
          "loc": return (0 + 1) * 10 / 20 != 10 * someId;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse items-method-def-initof-trailing-comma-shifts 1`] = `
{
  "id": 111,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 19,
      "kind": "function_def",
      "loc": fun function(a: Int, b: Int): Int {
    return (a >> b) || (a << (32 - b));
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": function,
        "text": "function",
      },
      "params": [
        {
          "id": 5,
          "kind": "typed_parameter",
          "loc": a: Int,
          "name": {
            "id": 3,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 4,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "id": 8,
          "kind": "typed_parameter",
          "loc": b: Int,
          "name": {
            "id": 6,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "type": {
            "id": 7,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 17,
            "kind": "op_binary",
            "left": {
              "id": 11,
              "kind": "op_binary",
              "left": {
                "id": 9,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              "loc": a >> b,
              "op": ">>",
              "right": {
                "id": 10,
                "kind": "id",
                "loc": b,
                "text": "b",
              },
            },
            "loc": (a >> b) || (a << (32 - b)),
            "op": "||",
            "right": {
              "id": 16,
              "kind": "op_binary",
              "left": {
                "id": 12,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              "loc": a << (32 - b),
              "op": "<<",
              "right": {
                "id": 15,
                "kind": "op_binary",
                "left": {
                  "id": 13,
                  "kind": "number",
                  "loc": 32,
                  "value": 32n,
                },
                "loc": 32 - b,
                "op": "-",
                "right": {
                  "id": 14,
                  "kind": "id",
                  "loc": b,
                  "text": "b",
                },
              },
            },
          },
          "id": 18,
          "kind": "statement_return",
          "loc": return (a >> b) || (a << (32 - b));,
        },
      ],
    },
    {
      "attributes": [],
      "id": 38,
      "kind": "function_def",
      "loc": fun anotherFunction(
    a: Int,
    b: Int,
    ): Int {
    return (a >> b) || (a << (32 - b));
},
      "name": {
        "id": 20,
        "kind": "id",
        "loc": anotherFunction,
        "text": "anotherFunction",
      },
      "params": [
        {
          "id": 24,
          "kind": "typed_parameter",
          "loc": a: Int,
          "name": {
            "id": 22,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 23,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "id": 27,
          "kind": "typed_parameter",
          "loc": b: Int,
          "name": {
            "id": 25,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "type": {
            "id": 26,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "return": {
        "id": 21,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 36,
            "kind": "op_binary",
            "left": {
              "id": 30,
              "kind": "op_binary",
              "left": {
                "id": 28,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              "loc": a >> b,
              "op": ">>",
              "right": {
                "id": 29,
                "kind": "id",
                "loc": b,
                "text": "b",
              },
            },
            "loc": (a >> b) || (a << (32 - b)),
            "op": "||",
            "right": {
              "id": 35,
              "kind": "op_binary",
              "left": {
                "id": 31,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              "loc": a << (32 - b),
              "op": "<<",
              "right": {
                "id": 34,
                "kind": "op_binary",
                "left": {
                  "id": 32,
                  "kind": "number",
                  "loc": 32,
                  "value": 32n,
                },
                "loc": 32 - b,
                "op": "-",
                "right": {
                  "id": 33,
                  "kind": "id",
                  "loc": b,
                  "text": "b",
                },
              },
            },
          },
          "id": 37,
          "kind": "statement_return",
          "loc": return (a >> b) || (a << (32 - b));,
        },
      ],
    },
    {
      "attributes": [
        {
          "loc": extends,
          "type": "extends",
        },
      ],
      "id": 55,
      "kind": "function_def",
      "loc": extends fun extension(self: Int, c: Int, d: Int) {
    return self + c + d;
},
      "name": {
        "id": 39,
        "kind": "id",
        "loc": extension,
        "text": "extension",
      },
      "params": [
        {
          "id": 42,
          "kind": "typed_parameter",
          "loc": self: Int,
          "name": {
            "id": 40,
            "kind": "id",
            "loc": self,
            "text": "self",
          },
          "type": {
            "id": 41,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "id": 45,
          "kind": "typed_parameter",
          "loc": c: Int,
          "name": {
            "id": 43,
            "kind": "id",
            "loc": c,
            "text": "c",
          },
          "type": {
            "id": 44,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "id": 48,
          "kind": "typed_parameter",
          "loc": d: Int,
          "name": {
            "id": 46,
            "kind": "id",
            "loc": d,
            "text": "d",
          },
          "type": {
            "id": 47,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "return": null,
      "statements": [
        {
          "expression": {
            "id": 53,
            "kind": "op_binary",
            "left": {
              "id": 51,
              "kind": "op_binary",
              "left": {
                "id": 49,
                "kind": "id",
                "loc": self,
                "text": "self",
              },
              "loc": self + c,
              "op": "+",
              "right": {
                "id": 50,
                "kind": "id",
                "loc": c,
                "text": "c",
              },
            },
            "loc": self + c + d,
            "op": "+",
            "right": {
              "id": 52,
              "kind": "id",
              "loc": d,
              "text": "d",
            },
          },
          "id": 54,
          "kind": "statement_return",
          "loc": return self + c + d;,
        },
      ],
    },
    {
      "attributes": [],
      "id": 78,
      "kind": "function_def",
      "loc": fun coverage(a: Int, b: Int) {
    let k: Int = a.extension(
        b,
        4,
    );

    let c: Int = anotherFunction(
        a,
        b,
    );
},
      "name": {
        "id": 56,
        "kind": "id",
        "loc": coverage,
        "text": "coverage",
      },
      "params": [
        {
          "id": 59,
          "kind": "typed_parameter",
          "loc": a: Int,
          "name": {
            "id": 57,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 58,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "id": 62,
          "kind": "typed_parameter",
          "loc": b: Int,
          "name": {
            "id": 60,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "type": {
            "id": 61,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "return": null,
      "statements": [
        {
          "expression": {
            "args": [
              {
                "id": 67,
                "kind": "id",
                "loc": b,
                "text": "b",
              },
              {
                "id": 68,
                "kind": "number",
                "loc": 4,
                "value": 4n,
              },
            ],
            "id": 69,
            "kind": "method_call",
            "loc": a.extension(
        b,
        4,
    ),
            "method": {
              "id": 66,
              "kind": "id",
              "loc": extension,
              "text": "extension",
            },
            "self": {
              "id": 65,
              "kind": "id",
              "loc": a,
              "text": "a",
            },
          },
          "id": 70,
          "kind": "statement_let",
          "loc": let k: Int = a.extension(
        b,
        4,
    );,
          "name": {
            "id": 63,
            "kind": "id",
            "loc": k,
            "text": "k",
          },
          "type": {
            "id": 64,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "args": [
              {
                "id": 74,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              {
                "id": 75,
                "kind": "id",
                "loc": b,
                "text": "b",
              },
            ],
            "function": {
              "id": 73,
              "kind": "id",
              "loc": anotherFunction,
              "text": "anotherFunction",
            },
            "id": 76,
            "kind": "static_call",
            "loc": anotherFunction(
        a,
        b,
    ),
          },
          "id": 77,
          "kind": "statement_let",
          "loc": let c: Int = anotherFunction(
        a,
        b,
    );,
          "name": {
            "id": 71,
            "kind": "id",
            "loc": c,
            "text": "c",
          },
          "type": {
            "id": 72,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
    },
    {
      "attributes": [],
      "id": 92,
      "kind": "function_def",
      "loc": fun oneMoreFunction(
    a: Int,
    b: Int,
    ): Int {
    return anotherFunction(
        a,
        b,
    );
},
      "name": {
        "id": 79,
        "kind": "id",
        "loc": oneMoreFunction,
        "text": "oneMoreFunction",
      },
      "params": [
        {
          "id": 83,
          "kind": "typed_parameter",
          "loc": a: Int,
          "name": {
            "id": 81,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 82,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "id": 86,
          "kind": "typed_parameter",
          "loc": b: Int,
          "name": {
            "id": 84,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "type": {
            "id": 85,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "return": {
        "id": 80,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "args": [
              {
                "id": 88,
                "kind": "id",
                "loc": a,
                "text": "a",
              },
              {
                "id": 89,
                "kind": "id",
                "loc": b,
                "text": "b",
              },
            ],
            "function": {
              "id": 87,
              "kind": "id",
              "loc": anotherFunction,
              "text": "anotherFunction",
            },
            "id": 90,
            "kind": "static_call",
            "loc": anotherFunction(
        a,
        b,
    ),
          },
          "id": 91,
          "kind": "statement_return",
          "loc": return anotherFunction(
        a,
        b,
    );,
        },
      ],
    },
    {
      "attributes": [],
      "declarations": [
        {
          "id": 100,
          "kind": "contract_init",
          "loc": init(
        arg1: Int,
        arg2: Int,
    ) {},
          "params": [
            {
              "id": 96,
              "kind": "typed_parameter",
              "loc": arg1: Int,
              "name": {
                "id": 94,
                "kind": "id",
                "loc": arg1,
                "text": "arg1",
              },
              "type": {
                "id": 95,
                "kind": "type_id",
                "loc": Int,
                "text": "Int",
              },
            },
            {
              "id": 99,
              "kind": "typed_parameter",
              "loc": arg2: Int,
              "name": {
                "id": 97,
                "kind": "id",
                "loc": arg2,
                "text": "arg2",
              },
              "type": {
                "id": 98,
                "kind": "type_id",
                "loc": Int,
                "text": "Int",
              },
            },
          ],
          "statements": [],
        },
      ],
      "id": 101,
      "kind": "contract",
      "loc": contract TestContract {
    init(
        arg1: Int,
        arg2: Int,
    ) {}
},
      "name": {
        "id": 93,
        "kind": "id",
        "loc": TestContract,
        "text": "TestContract",
      },
      "traits": [],
    },
    {
      "attributes": [],
      "id": 110,
      "kind": "function_def",
      "loc": fun test() {
    let k: StateInit = initOf TestContract(
        2,
        3,
    );
},
      "name": {
        "id": 102,
        "kind": "id",
        "loc": test,
        "text": "test",
      },
      "params": [],
      "return": null,
      "statements": [
        {
          "expression": {
            "args": [
              {
                "id": 106,
                "kind": "number",
                "loc": 2,
                "value": 2n,
              },
              {
                "id": 107,
                "kind": "number",
                "loc": 3,
                "value": 3n,
              },
            ],
            "contract": {
              "id": 105,
              "kind": "id",
              "loc": TestContract,
              "text": "TestContract",
            },
            "id": 108,
            "kind": "init_of",
            "loc": initOf TestContract(
        2,
        3,
    ),
          },
          "id": 109,
          "kind": "statement_let",
          "loc": let k: StateInit = initOf TestContract(
        2,
        3,
    );,
          "name": {
            "id": 103,
            "kind": "id",
            "loc": k,
            "text": "k",
          },
          "type": {
            "id": 104,
            "kind": "type_id",
            "loc": StateInit,
            "text": "StateInit",
          },
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse items-multi-funs 1`] = `
{
  "id": 15,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 4,
      "kind": "function_def",
      "loc": fun testFunc() {
    return 0;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": null,
      "statements": [
        {
          "expression": {
            "id": 2,
            "kind": "number",
            "loc": 0,
            "value": 0n,
          },
          "id": 3,
          "kind": "statement_return",
          "loc": return 0;,
        },
      ],
    },
    {
      "attributes": [],
      "id": 9,
      "kind": "function_def",
      "loc": fun testFunc(): Int {
    return 0;
},
      "name": {
        "id": 5,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": {
        "id": 6,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 7,
            "kind": "number",
            "loc": 0,
            "value": 0n,
          },
          "id": 8,
          "kind": "statement_return",
          "loc": return 0;,
        },
      ],
    },
    {
      "attributes": [],
      "id": 14,
      "kind": "function_def",
      "loc": fun testFunc(): Bool {
    return 0;
},
      "name": {
        "id": 10,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": {
        "id": 11,
        "kind": "type_id",
        "loc": Bool,
        "text": "Bool",
      },
      "statements": [
        {
          "expression": {
            "id": 12,
            "kind": "number",
            "loc": 0,
            "value": 0n,
          },
          "id": 13,
          "kind": "statement_return",
          "loc": return 0;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse items-native-fun-decls 1`] = `
{
  "id": 12,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 3,
      "kind": "native_function_decl",
      "loc": @name(native_name_1)
native testFunc();,
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "nativeName": {
        "id": 2,
        "kind": "func_id",
        "loc": native_name_1,
        "text": "native_name_1",
      },
      "params": [],
      "return": null,
    },
    {
      "attributes": [],
      "id": 7,
      "kind": "native_function_decl",
      "loc": @name(native_name_2)
native testFunc(): Int;,
      "name": {
        "id": 4,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "nativeName": {
        "id": 5,
        "kind": "func_id",
        "loc": native_name_2,
        "text": "native_name_2",
      },
      "params": [],
      "return": {
        "id": 6,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
    },
    {
      "attributes": [],
      "id": 11,
      "kind": "native_function_decl",
      "loc": @name(native_name_3)
native testFunc(): Bool;,
      "name": {
        "id": 8,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "nativeName": {
        "id": 9,
        "kind": "func_id",
        "loc": native_name_3,
        "text": "native_name_3",
      },
      "params": [],
      "return": {
        "id": 10,
        "kind": "type_id",
        "loc": Bool,
        "text": "Bool",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse items-struct-msg-fun-const 1`] = `
{
  "id": 60,
  "imports": [],
  "items": [
    {
      "fields": [
        {
          "as": null,
          "id": 4,
          "initializer": null,
          "kind": "field_decl",
          "loc": x: Int,
          "name": {
            "id": 2,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 3,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "as": null,
          "id": 7,
          "initializer": null,
          "kind": "field_decl",
          "loc": y: Int,
          "name": {
            "id": 5,
            "kind": "id",
            "loc": y,
            "text": "y",
          },
          "type": {
            "id": 6,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 8,
      "kind": "struct_decl",
      "loc": struct A {
    x: Int;
    y: Int;
},
      "name": {
        "id": 1,
        "kind": "type_id",
        "loc": A,
        "text": "A",
      },
    },
    {
      "attributes": [],
      "id": 16,
      "initializer": {
        "args": [
          {
            "field": {
              "id": 12,
              "kind": "id",
              "loc": x,
              "text": "x",
            },
            "id": 14,
            "initializer": {
              "id": 13,
              "kind": "number",
              "loc": 1,
              "value": 1n,
            },
            "kind": "struct_field_initializer",
            "loc": x: 1,
          },
        ],
        "id": 15,
        "kind": "struct_instance",
        "loc": A { x: 1 },
        "type": {
          "id": 11,
          "kind": "type_id",
          "loc": A,
          "text": "A",
        },
      },
      "kind": "constant_def",
      "loc": const a: A = A { x: 1 };,
      "name": {
        "id": 9,
        "kind": "id",
        "loc": a,
        "text": "a",
      },
      "type": {
        "id": 10,
        "kind": "type_id",
        "loc": A,
        "text": "A",
      },
    },
    {
      "attributes": [],
      "id": 28,
      "kind": "function_def",
      "loc": fun getA(): A {
    return A {
        x: 1,
        y: 2,
    };
},
      "name": {
        "id": 17,
        "kind": "id",
        "loc": getA,
        "text": "getA",
      },
      "params": [],
      "return": {
        "id": 18,
        "kind": "type_id",
        "loc": A,
        "text": "A",
      },
      "statements": [
        {
          "expression": {
            "args": [
              {
                "field": {
                  "id": 20,
                  "kind": "id",
                  "loc": x,
                  "text": "x",
                },
                "id": 22,
                "initializer": {
                  "id": 21,
                  "kind": "number",
                  "loc": 1,
                  "value": 1n,
                },
                "kind": "struct_field_initializer",
                "loc": x: 1,
              },
              {
                "field": {
                  "id": 23,
                  "kind": "id",
                  "loc": y,
                  "text": "y",
                },
                "id": 25,
                "initializer": {
                  "id": 24,
                  "kind": "number",
                  "loc": 2,
                  "value": 2n,
                },
                "kind": "struct_field_initializer",
                "loc": y: 2,
              },
            ],
            "id": 26,
            "kind": "struct_instance",
            "loc": A {
        x: 1,
        y: 2,
    },
            "type": {
              "id": 19,
              "kind": "type_id",
              "loc": A,
              "text": "A",
            },
          },
          "id": 27,
          "kind": "statement_return",
          "loc": return A {
        x: 1,
        y: 2,
    };,
        },
      ],
    },
    {
      "fields": [
        {
          "as": null,
          "id": 32,
          "initializer": null,
          "kind": "field_decl",
          "loc": x: Int,
          "name": {
            "id": 30,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 31,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "as": null,
          "id": 35,
          "initializer": null,
          "kind": "field_decl",
          "loc": y: Int,
          "name": {
            "id": 33,
            "kind": "id",
            "loc": y,
            "text": "y",
          },
          "type": {
            "id": 34,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 36,
      "kind": "message_decl",
      "loc": message B {
    x: Int;
    y: Int;
},
      "name": {
        "id": 29,
        "kind": "type_id",
        "loc": B,
        "text": "B",
      },
      "opcode": null,
    },
    {
      "attributes": [],
      "id": 47,
      "initializer": {
        "args": [
          {
            "field": {
              "id": 40,
              "kind": "id",
              "loc": x,
              "text": "x",
            },
            "id": 42,
            "initializer": {
              "id": 41,
              "kind": "number",
              "loc": 2,
              "value": 2n,
            },
            "kind": "struct_field_initializer",
            "loc": x: 2,
          },
          {
            "field": {
              "id": 43,
              "kind": "id",
              "loc": y,
              "text": "y",
            },
            "id": 45,
            "initializer": {
              "id": 44,
              "kind": "number",
              "loc": 3,
              "value": 3n,
            },
            "kind": "struct_field_initializer",
            "loc": y: 3,
          },
        ],
        "id": 46,
        "kind": "struct_instance",
        "loc": B {
    x: 2,
    y: 3,
},
        "type": {
          "id": 39,
          "kind": "type_id",
          "loc": B,
          "text": "B",
        },
      },
      "kind": "constant_def",
      "loc": const b: B = B {
    x: 2,
    y: 3,
};,
      "name": {
        "id": 37,
        "kind": "id",
        "loc": b,
        "text": "b",
      },
      "type": {
        "id": 38,
        "kind": "type_id",
        "loc": B,
        "text": "B",
      },
    },
    {
      "attributes": [],
      "id": 59,
      "kind": "function_def",
      "loc": fun getB(): B {
    return B { x: 1, y: 5, };
},
      "name": {
        "id": 48,
        "kind": "id",
        "loc": getB,
        "text": "getB",
      },
      "params": [],
      "return": {
        "id": 49,
        "kind": "type_id",
        "loc": B,
        "text": "B",
      },
      "statements": [
        {
          "expression": {
            "args": [
              {
                "field": {
                  "id": 51,
                  "kind": "id",
                  "loc": x,
                  "text": "x",
                },
                "id": 53,
                "initializer": {
                  "id": 52,
                  "kind": "number",
                  "loc": 1,
                  "value": 1n,
                },
                "kind": "struct_field_initializer",
                "loc": x: 1,
              },
              {
                "field": {
                  "id": 54,
                  "kind": "id",
                  "loc": y,
                  "text": "y",
                },
                "id": 56,
                "initializer": {
                  "id": 55,
                  "kind": "number",
                  "loc": 5,
                  "value": 5n,
                },
                "kind": "struct_field_initializer",
                "loc": y: 5,
              },
            ],
            "id": 57,
            "kind": "struct_instance",
            "loc": B { x: 1, y: 5, },
            "type": {
              "id": 50,
              "kind": "type_id",
              "loc": B,
              "text": "B",
            },
          },
          "id": 58,
          "kind": "statement_return",
          "loc": return B { x: 1, y: 5, };,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse literals-int-underscores-bin-dec-hex-oct 1`] = `
{
  "id": 80,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 79,
      "kind": "function_def",
      "loc": fun test_fun(): Int {
    let a: Int = 123;
    let b: Int = -123;
    let c: Int = 1_0123_00_000;
    let d: Int = 0x123;
    let e: Int = -0x123;
    let f: Int = 0x1_0123_00_000;
    let g: Int = 0b101010;
    let h: Int = -0b101010;
    let i: Int = 0b1_0101_00_000;
    let j: Int = 0o123;
    let k: Int = -0o123;
    let l: Int = 0o1_0123_00_000;
    return a + b + c + d + e + f + g + h + i + j + k + l;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": test_fun,
        "text": "test_fun",
      },
      "params": [],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 5,
            "kind": "number",
            "loc": 123,
            "value": 123n,
          },
          "id": 6,
          "kind": "statement_let",
          "loc": let a: Int = 123;,
          "name": {
            "id": 3,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 4,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 10,
            "kind": "op_unary",
            "loc": -123,
            "op": "-",
            "operand": {
              "id": 9,
              "kind": "number",
              "loc": 123,
              "value": 123n,
            },
          },
          "id": 11,
          "kind": "statement_let",
          "loc": let b: Int = -123;,
          "name": {
            "id": 7,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "type": {
            "id": 8,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 14,
            "kind": "number",
            "loc": 1_0123_00_000,
            "value": 1012300000n,
          },
          "id": 15,
          "kind": "statement_let",
          "loc": let c: Int = 1_0123_00_000;,
          "name": {
            "id": 12,
            "kind": "id",
            "loc": c,
            "text": "c",
          },
          "type": {
            "id": 13,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 18,
            "kind": "number",
            "loc": 0x123,
            "value": 291n,
          },
          "id": 19,
          "kind": "statement_let",
          "loc": let d: Int = 0x123;,
          "name": {
            "id": 16,
            "kind": "id",
            "loc": d,
            "text": "d",
          },
          "type": {
            "id": 17,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 23,
            "kind": "op_unary",
            "loc": -0x123,
            "op": "-",
            "operand": {
              "id": 22,
              "kind": "number",
              "loc": 0x123,
              "value": 291n,
            },
          },
          "id": 24,
          "kind": "statement_let",
          "loc": let e: Int = -0x123;,
          "name": {
            "id": 20,
            "kind": "id",
            "loc": e,
            "text": "e",
          },
          "type": {
            "id": 21,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 27,
            "kind": "number",
            "loc": 0x1_0123_00_000,
            "value": 69024612352n,
          },
          "id": 28,
          "kind": "statement_let",
          "loc": let f: Int = 0x1_0123_00_000;,
          "name": {
            "id": 25,
            "kind": "id",
            "loc": f,
            "text": "f",
          },
          "type": {
            "id": 26,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 31,
            "kind": "number",
            "loc": 0b101010,
            "value": 42n,
          },
          "id": 32,
          "kind": "statement_let",
          "loc": let g: Int = 0b101010;,
          "name": {
            "id": 29,
            "kind": "id",
            "loc": g,
            "text": "g",
          },
          "type": {
            "id": 30,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 36,
            "kind": "op_unary",
            "loc": -0b101010,
            "op": "-",
            "operand": {
              "id": 35,
              "kind": "number",
              "loc": 0b101010,
              "value": 42n,
            },
          },
          "id": 37,
          "kind": "statement_let",
          "loc": let h: Int = -0b101010;,
          "name": {
            "id": 33,
            "kind": "id",
            "loc": h,
            "text": "h",
          },
          "type": {
            "id": 34,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 40,
            "kind": "number",
            "loc": 0b1_0101_00_000,
            "value": 672n,
          },
          "id": 41,
          "kind": "statement_let",
          "loc": let i: Int = 0b1_0101_00_000;,
          "name": {
            "id": 38,
            "kind": "id",
            "loc": i,
            "text": "i",
          },
          "type": {
            "id": 39,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 44,
            "kind": "number",
            "loc": 0o123,
            "value": 83n,
          },
          "id": 45,
          "kind": "statement_let",
          "loc": let j: Int = 0o123;,
          "name": {
            "id": 42,
            "kind": "id",
            "loc": j,
            "text": "j",
          },
          "type": {
            "id": 43,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 49,
            "kind": "op_unary",
            "loc": -0o123,
            "op": "-",
            "operand": {
              "id": 48,
              "kind": "number",
              "loc": 0o123,
              "value": 83n,
            },
          },
          "id": 50,
          "kind": "statement_let",
          "loc": let k: Int = -0o123;,
          "name": {
            "id": 46,
            "kind": "id",
            "loc": k,
            "text": "k",
          },
          "type": {
            "id": 47,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 53,
            "kind": "number",
            "loc": 0o1_0123_00_000,
            "value": 136937472n,
          },
          "id": 54,
          "kind": "statement_let",
          "loc": let l: Int = 0o1_0123_00_000;,
          "name": {
            "id": 51,
            "kind": "id",
            "loc": l,
            "text": "l",
          },
          "type": {
            "id": 52,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 77,
            "kind": "op_binary",
            "left": {
              "id": 75,
              "kind": "op_binary",
              "left": {
                "id": 73,
                "kind": "op_binary",
                "left": {
                  "id": 71,
                  "kind": "op_binary",
                  "left": {
                    "id": 69,
                    "kind": "op_binary",
                    "left": {
                      "id": 67,
                      "kind": "op_binary",
                      "left": {
                        "id": 65,
                        "kind": "op_binary",
                        "left": {
                          "id": 63,
                          "kind": "op_binary",
                          "left": {
                            "id": 61,
                            "kind": "op_binary",
                            "left": {
                              "id": 59,
                              "kind": "op_binary",
                              "left": {
                                "id": 57,
                                "kind": "op_binary",
                                "left": {
                                  "id": 55,
                                  "kind": "id",
                                  "loc": a,
                                  "text": "a",
                                },
                                "loc": a + b,
                                "op": "+",
                                "right": {
                                  "id": 56,
                                  "kind": "id",
                                  "loc": b,
                                  "text": "b",
                                },
                              },
                              "loc": a + b + c,
                              "op": "+",
                              "right": {
                                "id": 58,
                                "kind": "id",
                                "loc": c,
                                "text": "c",
                              },
                            },
                            "loc": a + b + c + d,
                            "op": "+",
                            "right": {
                              "id": 60,
                              "kind": "id",
                              "loc": d,
                              "text": "d",
                            },
                          },
                          "loc": a + b + c + d + e,
                          "op": "+",
                          "right": {
                            "id": 62,
                            "kind": "id",
                            "loc": e,
                            "text": "e",
                          },
                        },
                        "loc": a + b + c + d + e + f,
                        "op": "+",
                        "right": {
                          "id": 64,
                          "kind": "id",
                          "loc": f,
                          "text": "f",
                        },
                      },
                      "loc": a + b + c + d + e + f + g,
                      "op": "+",
                      "right": {
                        "id": 66,
                        "kind": "id",
                        "loc": g,
                        "text": "g",
                      },
                    },
                    "loc": a + b + c + d + e + f + g + h,
                    "op": "+",
                    "right": {
                      "id": 68,
                      "kind": "id",
                      "loc": h,
                      "text": "h",
                    },
                  },
                  "loc": a + b + c + d + e + f + g + h + i,
                  "op": "+",
                  "right": {
                    "id": 70,
                    "kind": "id",
                    "loc": i,
                    "text": "i",
                  },
                },
                "loc": a + b + c + d + e + f + g + h + i + j,
                "op": "+",
                "right": {
                  "id": 72,
                  "kind": "id",
                  "loc": j,
                  "text": "j",
                },
              },
              "loc": a + b + c + d + e + f + g + h + i + j + k,
              "op": "+",
              "right": {
                "id": 74,
                "kind": "id",
                "loc": k,
                "text": "k",
              },
            },
            "loc": a + b + c + d + e + f + g + h + i + j + k + l,
            "op": "+",
            "right": {
              "id": 76,
              "kind": "id",
              "loc": l,
              "text": "l",
            },
          },
          "id": 78,
          "kind": "statement_return",
          "loc": return a + b + c + d + e + f + g + h + i + j + k + l;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse stmt-augmented-assign-arith 1`] = `
{
  "id": 72,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 71,
      "kind": "function_def",
      "loc": fun testFunc(): Int {
    let a: Int = 1;
    let b: Int = 2;
    a += b;
    b += a;
    a += 3;
    a += b + 4;
    b -= 1;
    a -= b;
    a -= b - 1;
    b *= 2;
    a *= b;
    a *= b * 2;
    b /= 2;
    a /= b;
    a /= b / 2;
    a %= 2;
    a %= b;
    a %= b % 2;
    return a;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 5,
            "kind": "number",
            "loc": 1,
            "value": 1n,
          },
          "id": 6,
          "kind": "statement_let",
          "loc": let a: Int = 1;,
          "name": {
            "id": 3,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 4,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 9,
            "kind": "number",
            "loc": 2,
            "value": 2n,
          },
          "id": 10,
          "kind": "statement_let",
          "loc": let b: Int = 2;,
          "name": {
            "id": 7,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "type": {
            "id": 8,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 12,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "id": 13,
          "kind": "statement_augmentedassign",
          "loc": a += b;,
          "op": "+",
          "path": {
            "id": 11,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 15,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "id": 16,
          "kind": "statement_augmentedassign",
          "loc": b += a;,
          "op": "+",
          "path": {
            "id": 14,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
        },
        {
          "expression": {
            "id": 18,
            "kind": "number",
            "loc": 3,
            "value": 3n,
          },
          "id": 19,
          "kind": "statement_augmentedassign",
          "loc": a += 3;,
          "op": "+",
          "path": {
            "id": 17,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 23,
            "kind": "op_binary",
            "left": {
              "id": 21,
              "kind": "id",
              "loc": b,
              "text": "b",
            },
            "loc": b + 4,
            "op": "+",
            "right": {
              "id": 22,
              "kind": "number",
              "loc": 4,
              "value": 4n,
            },
          },
          "id": 24,
          "kind": "statement_augmentedassign",
          "loc": a += b + 4;,
          "op": "+",
          "path": {
            "id": 20,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 26,
            "kind": "number",
            "loc": 1,
            "value": 1n,
          },
          "id": 27,
          "kind": "statement_augmentedassign",
          "loc": b -= 1;,
          "op": "-",
          "path": {
            "id": 25,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
        },
        {
          "expression": {
            "id": 29,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "id": 30,
          "kind": "statement_augmentedassign",
          "loc": a -= b;,
          "op": "-",
          "path": {
            "id": 28,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 34,
            "kind": "op_binary",
            "left": {
              "id": 32,
              "kind": "id",
              "loc": b,
              "text": "b",
            },
            "loc": b - 1,
            "op": "-",
            "right": {
              "id": 33,
              "kind": "number",
              "loc": 1,
              "value": 1n,
            },
          },
          "id": 35,
          "kind": "statement_augmentedassign",
          "loc": a -= b - 1;,
          "op": "-",
          "path": {
            "id": 31,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 37,
            "kind": "number",
            "loc": 2,
            "value": 2n,
          },
          "id": 38,
          "kind": "statement_augmentedassign",
          "loc": b *= 2;,
          "op": "*",
          "path": {
            "id": 36,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
        },
        {
          "expression": {
            "id": 40,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "id": 41,
          "kind": "statement_augmentedassign",
          "loc": a *= b;,
          "op": "*",
          "path": {
            "id": 39,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 45,
            "kind": "op_binary",
            "left": {
              "id": 43,
              "kind": "id",
              "loc": b,
              "text": "b",
            },
            "loc": b * 2,
            "op": "*",
            "right": {
              "id": 44,
              "kind": "number",
              "loc": 2,
              "value": 2n,
            },
          },
          "id": 46,
          "kind": "statement_augmentedassign",
          "loc": a *= b * 2;,
          "op": "*",
          "path": {
            "id": 42,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 48,
            "kind": "number",
            "loc": 2,
            "value": 2n,
          },
          "id": 49,
          "kind": "statement_augmentedassign",
          "loc": b /= 2;,
          "op": "/",
          "path": {
            "id": 47,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
        },
        {
          "expression": {
            "id": 51,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "id": 52,
          "kind": "statement_augmentedassign",
          "loc": a /= b;,
          "op": "/",
          "path": {
            "id": 50,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 56,
            "kind": "op_binary",
            "left": {
              "id": 54,
              "kind": "id",
              "loc": b,
              "text": "b",
            },
            "loc": b / 2,
            "op": "/",
            "right": {
              "id": 55,
              "kind": "number",
              "loc": 2,
              "value": 2n,
            },
          },
          "id": 57,
          "kind": "statement_augmentedassign",
          "loc": a /= b / 2;,
          "op": "/",
          "path": {
            "id": 53,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 59,
            "kind": "number",
            "loc": 2,
            "value": 2n,
          },
          "id": 60,
          "kind": "statement_augmentedassign",
          "loc": a %= 2;,
          "op": "%",
          "path": {
            "id": 58,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 62,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "id": 63,
          "kind": "statement_augmentedassign",
          "loc": a %= b;,
          "op": "%",
          "path": {
            "id": 61,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 67,
            "kind": "op_binary",
            "left": {
              "id": 65,
              "kind": "id",
              "loc": b,
              "text": "b",
            },
            "loc": b % 2,
            "op": "%",
            "right": {
              "id": 66,
              "kind": "number",
              "loc": 2,
              "value": 2n,
            },
          },
          "id": 68,
          "kind": "statement_augmentedassign",
          "loc": a %= b % 2;,
          "op": "%",
          "path": {
            "id": 64,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 69,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "id": 70,
          "kind": "statement_return",
          "loc": return a;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse stmt-augmented-assign-bitwise 1`] = `
{
  "id": 56,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 55,
      "kind": "function_def",
      "loc": fun testFunc(): Int {
    let a: Int = 1;
    let b: Int = 2;
    a |= b;
    b |= a;
    a |= 3;
    a |= b | 4;
    b &= 1;
    a &= b;
    b &= a;
    a &= b & 1;
    b ^= 2;
    a ^= b;
    b ^= a;
    a ^= b ^ 2;
    return a;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 5,
            "kind": "number",
            "loc": 1,
            "value": 1n,
          },
          "id": 6,
          "kind": "statement_let",
          "loc": let a: Int = 1;,
          "name": {
            "id": 3,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 4,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 9,
            "kind": "number",
            "loc": 2,
            "value": 2n,
          },
          "id": 10,
          "kind": "statement_let",
          "loc": let b: Int = 2;,
          "name": {
            "id": 7,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "type": {
            "id": 8,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "expression": {
            "id": 12,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "id": 13,
          "kind": "statement_augmentedassign",
          "loc": a |= b;,
          "op": "|",
          "path": {
            "id": 11,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 15,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "id": 16,
          "kind": "statement_augmentedassign",
          "loc": b |= a;,
          "op": "|",
          "path": {
            "id": 14,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
        },
        {
          "expression": {
            "id": 18,
            "kind": "number",
            "loc": 3,
            "value": 3n,
          },
          "id": 19,
          "kind": "statement_augmentedassign",
          "loc": a |= 3;,
          "op": "|",
          "path": {
            "id": 17,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 23,
            "kind": "op_binary",
            "left": {
              "id": 21,
              "kind": "id",
              "loc": b,
              "text": "b",
            },
            "loc": b | 4,
            "op": "|",
            "right": {
              "id": 22,
              "kind": "number",
              "loc": 4,
              "value": 4n,
            },
          },
          "id": 24,
          "kind": "statement_augmentedassign",
          "loc": a |= b | 4;,
          "op": "|",
          "path": {
            "id": 20,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 26,
            "kind": "number",
            "loc": 1,
            "value": 1n,
          },
          "id": 27,
          "kind": "statement_augmentedassign",
          "loc": b &= 1;,
          "op": "&",
          "path": {
            "id": 25,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
        },
        {
          "expression": {
            "id": 29,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "id": 30,
          "kind": "statement_augmentedassign",
          "loc": a &= b;,
          "op": "&",
          "path": {
            "id": 28,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 32,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "id": 33,
          "kind": "statement_augmentedassign",
          "loc": b &= a;,
          "op": "&",
          "path": {
            "id": 31,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
        },
        {
          "expression": {
            "id": 37,
            "kind": "op_binary",
            "left": {
              "id": 35,
              "kind": "id",
              "loc": b,
              "text": "b",
            },
            "loc": b & 1,
            "op": "&",
            "right": {
              "id": 36,
              "kind": "number",
              "loc": 1,
              "value": 1n,
            },
          },
          "id": 38,
          "kind": "statement_augmentedassign",
          "loc": a &= b & 1;,
          "op": "&",
          "path": {
            "id": 34,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 40,
            "kind": "number",
            "loc": 2,
            "value": 2n,
          },
          "id": 41,
          "kind": "statement_augmentedassign",
          "loc": b ^= 2;,
          "op": "^",
          "path": {
            "id": 39,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
        },
        {
          "expression": {
            "id": 43,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "id": 44,
          "kind": "statement_augmentedassign",
          "loc": a ^= b;,
          "op": "^",
          "path": {
            "id": 42,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 46,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "id": 47,
          "kind": "statement_augmentedassign",
          "loc": b ^= a;,
          "op": "^",
          "path": {
            "id": 45,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
        },
        {
          "expression": {
            "id": 51,
            "kind": "op_binary",
            "left": {
              "id": 49,
              "kind": "id",
              "loc": b,
              "text": "b",
            },
            "loc": b ^ 2,
            "op": "^",
            "right": {
              "id": 50,
              "kind": "number",
              "loc": 2,
              "value": 2n,
            },
          },
          "id": 52,
          "kind": "statement_augmentedassign",
          "loc": a ^= b ^ 2;,
          "op": "^",
          "path": {
            "id": 48,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
        },
        {
          "expression": {
            "id": 53,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "id": 54,
          "kind": "statement_return",
          "loc": return a;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse stmt-if 1`] = `
{
  "id": 16,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 15,
      "kind": "function_def",
      "loc": fun testFunc(src: Int?): Int {
    if (src != null) {
        return src;
    }
    return 0;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [
        {
          "id": 6,
          "kind": "typed_parameter",
          "loc": src: Int?,
          "name": {
            "id": 3,
            "kind": "id",
            "loc": src,
            "text": "src",
          },
          "type": {
            "id": 5,
            "kind": "optional_type",
            "loc": Int?,
            "typeArg": {
              "id": 4,
              "kind": "type_id",
              "loc": Int,
              "text": "Int",
            },
          },
        },
      ],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "condition": {
            "id": 9,
            "kind": "op_binary",
            "left": {
              "id": 7,
              "kind": "id",
              "loc": src,
              "text": "src",
            },
            "loc": src != null,
            "op": "!=",
            "right": {
              "id": 8,
              "kind": "null",
              "loc": null,
            },
          },
          "elseif": null,
          "falseStatements": null,
          "id": 12,
          "kind": "statement_condition",
          "loc": if (src != null) {
        return src;
    },
          "trueStatements": [
            {
              "expression": {
                "id": 10,
                "kind": "id",
                "loc": src,
                "text": "src",
              },
              "id": 11,
              "kind": "statement_return",
              "loc": return src;,
            },
          ],
        },
        {
          "expression": {
            "id": 13,
            "kind": "number",
            "loc": 0,
            "value": 0n,
          },
          "id": 14,
          "kind": "statement_return",
          "loc": return 0;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse stmt-if-else 1`] = `
{
  "id": 16,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 15,
      "kind": "function_def",
      "loc": fun testFunc(src: Int?): Int {
    if (src != null) {
        return src;
    } else {
        return 10;
    }
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [
        {
          "id": 6,
          "kind": "typed_parameter",
          "loc": src: Int?,
          "name": {
            "id": 3,
            "kind": "id",
            "loc": src,
            "text": "src",
          },
          "type": {
            "id": 5,
            "kind": "optional_type",
            "loc": Int?,
            "typeArg": {
              "id": 4,
              "kind": "type_id",
              "loc": Int,
              "text": "Int",
            },
          },
        },
      ],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "condition": {
            "id": 9,
            "kind": "op_binary",
            "left": {
              "id": 7,
              "kind": "id",
              "loc": src,
              "text": "src",
            },
            "loc": src != null,
            "op": "!=",
            "right": {
              "id": 8,
              "kind": "null",
              "loc": null,
            },
          },
          "elseif": null,
          "falseStatements": [
            {
              "expression": {
                "id": 12,
                "kind": "number",
                "loc": 10,
                "value": 10n,
              },
              "id": 13,
              "kind": "statement_return",
              "loc": return 10;,
            },
          ],
          "id": 14,
          "kind": "statement_condition",
          "loc": if (src != null) {
        return src;
    } else {
        return 10;
    },
          "trueStatements": [
            {
              "expression": {
                "id": 10,
                "kind": "id",
                "loc": src,
                "text": "src",
              },
              "id": 11,
              "kind": "statement_return",
              "loc": return src;,
            },
          ],
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse stmt-optional-semicolon-for-last-statement 1`] = `
{
  "id": 40,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 20,
      "kind": "function_def",
      "loc": fun test1() {
    let i: Int = 1;
    while(i >= 10 || i <= 100) { i += 1 }
    let i = 42
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": test1,
        "text": "test1",
      },
      "params": [],
      "return": null,
      "statements": [
        {
          "expression": {
            "id": 4,
            "kind": "number",
            "loc": 1,
            "value": 1n,
          },
          "id": 5,
          "kind": "statement_let",
          "loc": let i: Int = 1;,
          "name": {
            "id": 2,
            "kind": "id",
            "loc": i,
            "text": "i",
          },
          "type": {
            "id": 3,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "condition": {
            "id": 12,
            "kind": "op_binary",
            "left": {
              "id": 8,
              "kind": "op_binary",
              "left": {
                "id": 6,
                "kind": "id",
                "loc": i,
                "text": "i",
              },
              "loc": i >= 10,
              "op": ">=",
              "right": {
                "id": 7,
                "kind": "number",
                "loc": 10,
                "value": 10n,
              },
            },
            "loc": i >= 10 || i <= 100,
            "op": "||",
            "right": {
              "id": 11,
              "kind": "op_binary",
              "left": {
                "id": 9,
                "kind": "id",
                "loc": i,
                "text": "i",
              },
              "loc": i <= 100,
              "op": "<=",
              "right": {
                "id": 10,
                "kind": "number",
                "loc": 100,
                "value": 100n,
              },
            },
          },
          "id": 16,
          "kind": "statement_while",
          "loc": while(i >= 10 || i <= 100) { i += 1 },
          "statements": [
            {
              "expression": {
                "id": 14,
                "kind": "number",
                "loc": 1,
                "value": 1n,
              },
              "id": 15,
              "kind": "statement_augmentedassign",
              "loc": i += 1,
              "op": "+",
              "path": {
                "id": 13,
                "kind": "id",
                "loc": i,
                "text": "i",
              },
            },
          ],
        },
        {
          "expression": {
            "id": 18,
            "kind": "number",
            "loc": 42,
            "value": 42n,
          },
          "id": 19,
          "kind": "statement_let",
          "loc": let i = 42,
          "name": {
            "id": 17,
            "kind": "id",
            "loc": i,
            "text": "i",
          },
          "type": null,
        },
      ],
    },
    {
      "attributes": [],
      "id": 23,
      "kind": "function_def",
      "loc": fun test2() { return },
      "name": {
        "id": 21,
        "kind": "id",
        "loc": test2,
        "text": "test2",
      },
      "params": [],
      "return": null,
      "statements": [
        {
          "expression": null,
          "id": 22,
          "kind": "statement_return",
          "loc": return,
        },
      ],
    },
    {
      "attributes": [],
      "id": 28,
      "kind": "function_def",
      "loc": fun test3(): Int { return 42 },
      "name": {
        "id": 24,
        "kind": "id",
        "loc": test3,
        "text": "test3",
      },
      "params": [],
      "return": {
        "id": 25,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 26,
            "kind": "number",
            "loc": 42,
            "value": 42n,
          },
          "id": 27,
          "kind": "statement_return",
          "loc": return 42,
        },
      ],
    },
    {
      "attributes": [],
      "id": 39,
      "kind": "function_def",
      "loc": fun test4(): Int {
    do { 21 + 21 } until (true && true)
},
      "name": {
        "id": 29,
        "kind": "id",
        "loc": test4,
        "text": "test4",
      },
      "params": [],
      "return": {
        "id": 30,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "condition": {
            "id": 33,
            "kind": "op_binary",
            "left": {
              "id": 31,
              "kind": "boolean",
              "loc": true,
              "value": true,
            },
            "loc": true && true,
            "op": "&&",
            "right": {
              "id": 32,
              "kind": "boolean",
              "loc": true,
              "value": true,
            },
          },
          "id": 38,
          "kind": "statement_until",
          "loc": do { 21 + 21 } until (true && true),
          "statements": [
            {
              "expression": {
                "id": 36,
                "kind": "op_binary",
                "left": {
                  "id": 34,
                  "kind": "number",
                  "loc": 21,
                  "value": 21n,
                },
                "loc": 21 + 21,
                "op": "+",
                "right": {
                  "id": 35,
                  "kind": "number",
                  "loc": 21,
                  "value": 21n,
                },
              },
              "id": 37,
              "kind": "statement_expression",
              "loc": 21 + 21,
            },
          ],
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse stmt-while-loop 1`] = `
{
  "id": 20,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 19,
      "kind": "function_def",
      "loc": fun main() {
    let i: Int = 1;
    while(i >= 10 || i <= 100) {
        i = i + 1;
    }
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": main,
        "text": "main",
      },
      "params": [],
      "return": null,
      "statements": [
        {
          "expression": {
            "id": 4,
            "kind": "number",
            "loc": 1,
            "value": 1n,
          },
          "id": 5,
          "kind": "statement_let",
          "loc": let i: Int = 1;,
          "name": {
            "id": 2,
            "kind": "id",
            "loc": i,
            "text": "i",
          },
          "type": {
            "id": 3,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "condition": {
            "id": 12,
            "kind": "op_binary",
            "left": {
              "id": 8,
              "kind": "op_binary",
              "left": {
                "id": 6,
                "kind": "id",
                "loc": i,
                "text": "i",
              },
              "loc": i >= 10,
              "op": ">=",
              "right": {
                "id": 7,
                "kind": "number",
                "loc": 10,
                "value": 10n,
              },
            },
            "loc": i >= 10 || i <= 100,
            "op": "||",
            "right": {
              "id": 11,
              "kind": "op_binary",
              "left": {
                "id": 9,
                "kind": "id",
                "loc": i,
                "text": "i",
              },
              "loc": i <= 100,
              "op": "<=",
              "right": {
                "id": 10,
                "kind": "number",
                "loc": 100,
                "value": 100n,
              },
            },
          },
          "id": 18,
          "kind": "statement_while",
          "loc": while(i >= 10 || i <= 100) {
        i = i + 1;
    },
          "statements": [
            {
              "expression": {
                "id": 16,
                "kind": "op_binary",
                "left": {
                  "id": 14,
                  "kind": "id",
                  "loc": i,
                  "text": "i",
                },
                "loc": i + 1,
                "op": "+",
                "right": {
                  "id": 15,
                  "kind": "number",
                  "loc": 1,
                  "value": 1n,
                },
              },
              "id": 17,
              "kind": "statement_assign",
              "loc": i = i + 1;,
              "path": {
                "id": 13,
                "kind": "id",
                "loc": i,
                "text": "i",
              },
            },
          ],
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse stmt-while-repeat-do-loops 1`] = `
{
  "id": 28,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 27,
      "kind": "function_def",
      "loc": fun main() {
    let i: Int = 1;
    while(true) {
        i = i + 1;
    }
    repeat(10) {
        i = i * 10;
    }
    do {
        i = i - 1;
    } until(false);
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": main,
        "text": "main",
      },
      "params": [],
      "return": null,
      "statements": [
        {
          "expression": {
            "id": 4,
            "kind": "number",
            "loc": 1,
            "value": 1n,
          },
          "id": 5,
          "kind": "statement_let",
          "loc": let i: Int = 1;,
          "name": {
            "id": 2,
            "kind": "id",
            "loc": i,
            "text": "i",
          },
          "type": {
            "id": 3,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "condition": {
            "id": 6,
            "kind": "boolean",
            "loc": true,
            "value": true,
          },
          "id": 12,
          "kind": "statement_while",
          "loc": while(true) {
        i = i + 1;
    },
          "statements": [
            {
              "expression": {
                "id": 10,
                "kind": "op_binary",
                "left": {
                  "id": 8,
                  "kind": "id",
                  "loc": i,
                  "text": "i",
                },
                "loc": i + 1,
                "op": "+",
                "right": {
                  "id": 9,
                  "kind": "number",
                  "loc": 1,
                  "value": 1n,
                },
              },
              "id": 11,
              "kind": "statement_assign",
              "loc": i = i + 1;,
              "path": {
                "id": 7,
                "kind": "id",
                "loc": i,
                "text": "i",
              },
            },
          ],
        },
        {
          "id": 19,
          "iterations": {
            "id": 13,
            "kind": "number",
            "loc": 10,
            "value": 10n,
          },
          "kind": "statement_repeat",
          "loc": repeat(10) {
        i = i * 10;
    },
          "statements": [
            {
              "expression": {
                "id": 17,
                "kind": "op_binary",
                "left": {
                  "id": 15,
                  "kind": "id",
                  "loc": i,
                  "text": "i",
                },
                "loc": i * 10,
                "op": "*",
                "right": {
                  "id": 16,
                  "kind": "number",
                  "loc": 10,
                  "value": 10n,
                },
              },
              "id": 18,
              "kind": "statement_assign",
              "loc": i = i * 10;,
              "path": {
                "id": 14,
                "kind": "id",
                "loc": i,
                "text": "i",
              },
            },
          ],
        },
        {
          "condition": {
            "id": 20,
            "kind": "boolean",
            "loc": false,
            "value": false,
          },
          "id": 26,
          "kind": "statement_until",
          "loc": do {
        i = i - 1;
    } until(false);,
          "statements": [
            {
              "expression": {
                "id": 24,
                "kind": "op_binary",
                "left": {
                  "id": 22,
                  "kind": "id",
                  "loc": i,
                  "text": "i",
                },
                "loc": i - 1,
                "op": "-",
                "right": {
                  "id": 23,
                  "kind": "number",
                  "loc": 1,
                  "value": 1n,
                },
              },
              "id": 25,
              "kind": "statement_assign",
              "loc": i = i - 1;,
              "path": {
                "id": 21,
                "kind": "id",
                "loc": i,
                "text": "i",
              },
            },
          ],
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse struct-field-punning 1`] = `
{
  "id": 28,
  "imports": [],
  "items": [
    {
      "fields": [
        {
          "as": null,
          "id": 4,
          "initializer": null,
          "kind": "field_decl",
          "loc": x: Int,
          "name": {
            "id": 2,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 3,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "as": null,
          "id": 7,
          "initializer": null,
          "kind": "field_decl",
          "loc": y: Int,
          "name": {
            "id": 5,
            "kind": "id",
            "loc": y,
            "text": "y",
          },
          "type": {
            "id": 6,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 8,
      "kind": "struct_decl",
      "loc": struct A {
    x: Int;
    y: Int;
},
      "name": {
        "id": 1,
        "kind": "type_id",
        "loc": A,
        "text": "A",
      },
    },
    {
      "attributes": [],
      "id": 12,
      "initializer": {
        "id": 11,
        "kind": "number",
        "loc": 5,
        "value": 5n,
      },
      "kind": "constant_def",
      "loc": const x: Int = 5;,
      "name": {
        "id": 9,
        "kind": "id",
        "loc": x,
        "text": "x",
      },
      "type": {
        "id": 10,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
    },
    {
      "attributes": [],
      "id": 16,
      "initializer": {
        "id": 15,
        "kind": "number",
        "loc": 6,
        "value": 6n,
      },
      "kind": "constant_def",
      "loc": const y: Int = 6;,
      "name": {
        "id": 13,
        "kind": "id",
        "loc": y,
        "text": "y",
      },
      "type": {
        "id": 14,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
    },
    {
      "attributes": [],
      "id": 27,
      "initializer": {
        "args": [
          {
            "field": {
              "id": 20,
              "kind": "id",
              "loc": x,
              "text": "x",
            },
            "id": 22,
            "initializer": {
              "id": 21,
              "kind": "id",
              "loc": x,
              "text": "x",
            },
            "kind": "struct_field_initializer",
            "loc": x,
          },
          {
            "field": {
              "id": 23,
              "kind": "id",
              "loc": y,
              "text": "y",
            },
            "id": 25,
            "initializer": {
              "id": 24,
              "kind": "id",
              "loc": y,
              "text": "y",
            },
            "kind": "struct_field_initializer",
            "loc": y,
          },
        ],
        "id": 26,
        "kind": "struct_instance",
        "loc": A { x, y },
        "type": {
          "id": 19,
          "kind": "type_id",
          "loc": A,
          "text": "A",
        },
      },
      "kind": "constant_def",
      "loc": const D: A = A { x, y };,
      "name": {
        "id": 17,
        "kind": "id",
        "loc": D,
        "text": "D",
      },
      "type": {
        "id": 18,
        "kind": "type_id",
        "loc": A,
        "text": "A",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse struct-msg-as 1`] = `
{
  "id": 12,
  "imports": [],
  "items": [
    {
      "fields": [
        {
          "as": null,
          "id": 4,
          "initializer": null,
          "kind": "field_decl",
          "loc": x: Int,
          "name": {
            "id": 2,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 3,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 5,
      "kind": "struct_decl",
      "loc": struct A {
    x: Int;
},
      "name": {
        "id": 1,
        "kind": "type_id",
        "loc": A,
        "text": "A",
      },
    },
    {
      "fields": [
        {
          "as": {
            "id": 9,
            "kind": "id",
            "loc": coin,
            "text": "coin",
          },
          "id": 10,
          "initializer": null,
          "kind": "field_decl",
          "loc": x: Int as coin,
          "name": {
            "id": 7,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 8,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 11,
      "kind": "message_decl",
      "loc": message B {
    x: Int as coin;
},
      "name": {
        "id": 6,
        "kind": "type_id",
        "loc": B,
        "text": "B",
      },
      "opcode": null,
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse struct-msg-initializers 1`] = `
{
  "id": 18,
  "imports": [],
  "items": [
    {
      "fields": [
        {
          "as": null,
          "id": 5,
          "initializer": {
            "id": 4,
            "kind": "number",
            "loc": 1000,
            "value": 1000n,
          },
          "kind": "field_decl",
          "loc": x: Int = 1000,
          "name": {
            "id": 2,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 3,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 6,
      "kind": "struct_decl",
      "loc": struct A {
    x: Int = 1000;
},
      "name": {
        "id": 1,
        "kind": "type_id",
        "loc": A,
        "text": "A",
      },
    },
    {
      "fields": [
        {
          "as": {
            "id": 10,
            "kind": "id",
            "loc": coins,
            "text": "coins",
          },
          "id": 12,
          "initializer": {
            "id": 11,
            "kind": "number",
            "loc": 1000,
            "value": 1000n,
          },
          "kind": "field_decl",
          "loc": x: Int as coins = 1000,
          "name": {
            "id": 8,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 9,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "as": null,
          "id": 16,
          "initializer": {
            "id": 15,
            "kind": "boolean",
            "loc": true,
            "value": true,
          },
          "kind": "field_decl",
          "loc": y: Bool = true,
          "name": {
            "id": 13,
            "kind": "id",
            "loc": y,
            "text": "y",
          },
          "type": {
            "id": 14,
            "kind": "type_id",
            "loc": Bool,
            "text": "Bool",
          },
        },
      ],
      "id": 17,
      "kind": "message_decl",
      "loc": message B {
    x: Int as coins = 1000;
    y: Bool = true;
},
      "name": {
        "id": 7,
        "kind": "type_id",
        "loc": B,
        "text": "B",
      },
      "opcode": null,
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse struct-msg-trailing-semicolon 1`] = `
{
  "id": 63,
  "imports": [],
  "items": [
    {
      "fields": [
        {
          "as": null,
          "id": 4,
          "initializer": null,
          "kind": "field_decl",
          "loc": x: Int,
          "name": {
            "id": 2,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 3,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 5,
      "kind": "struct_decl",
      "loc": struct A { x: Int },
      "name": {
        "id": 1,
        "kind": "type_id",
        "loc": A,
        "text": "A",
      },
    },
    {
      "fields": [
        {
          "as": null,
          "id": 9,
          "initializer": null,
          "kind": "field_decl",
          "loc": x: Int,
          "name": {
            "id": 7,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 8,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "as": null,
          "id": 12,
          "initializer": null,
          "kind": "field_decl",
          "loc": y: Int,
          "name": {
            "id": 10,
            "kind": "id",
            "loc": y,
            "text": "y",
          },
          "type": {
            "id": 11,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 13,
      "kind": "struct_decl",
      "loc": struct B { x: Int; y: Int },
      "name": {
        "id": 6,
        "kind": "type_id",
        "loc": B,
        "text": "B",
      },
    },
    {
      "fields": [
        {
          "as": null,
          "id": 17,
          "initializer": null,
          "kind": "field_decl",
          "loc": x: Int,
          "name": {
            "id": 15,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 16,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "as": null,
          "id": 21,
          "initializer": {
            "id": 20,
            "kind": "number",
            "loc": 42,
            "value": 42n,
          },
          "kind": "field_decl",
          "loc": y: Int = 42,
          "name": {
            "id": 18,
            "kind": "id",
            "loc": y,
            "text": "y",
          },
          "type": {
            "id": 19,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 22,
      "kind": "struct_decl",
      "loc": struct C { x: Int; y: Int = 42 },
      "name": {
        "id": 14,
        "kind": "type_id",
        "loc": C,
        "text": "C",
      },
    },
    {
      "fields": [
        {
          "as": null,
          "id": 27,
          "initializer": {
            "id": 26,
            "kind": "number",
            "loc": 42,
            "value": 42n,
          },
          "kind": "field_decl",
          "loc": x: Int = 42,
          "name": {
            "id": 24,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 25,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "as": null,
          "id": 30,
          "initializer": null,
          "kind": "field_decl",
          "loc": y: Int,
          "name": {
            "id": 28,
            "kind": "id",
            "loc": y,
            "text": "y",
          },
          "type": {
            "id": 29,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 31,
      "kind": "struct_decl",
      "loc": struct D { x: Int = 42; y: Int },
      "name": {
        "id": 23,
        "kind": "type_id",
        "loc": D,
        "text": "D",
      },
    },
    {
      "fields": [
        {
          "as": null,
          "id": 35,
          "initializer": null,
          "kind": "field_decl",
          "loc": x: Int,
          "name": {
            "id": 33,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 34,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 36,
      "kind": "message_decl",
      "loc": message E { x: Int },
      "name": {
        "id": 32,
        "kind": "type_id",
        "loc": E,
        "text": "E",
      },
      "opcode": null,
    },
    {
      "fields": [
        {
          "as": null,
          "id": 40,
          "initializer": null,
          "kind": "field_decl",
          "loc": x: Int,
          "name": {
            "id": 38,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 39,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "as": null,
          "id": 43,
          "initializer": null,
          "kind": "field_decl",
          "loc": y: Int,
          "name": {
            "id": 41,
            "kind": "id",
            "loc": y,
            "text": "y",
          },
          "type": {
            "id": 42,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 44,
      "kind": "message_decl",
      "loc": message F { x: Int; y: Int },
      "name": {
        "id": 37,
        "kind": "type_id",
        "loc": F,
        "text": "F",
      },
      "opcode": null,
    },
    {
      "fields": [
        {
          "as": null,
          "id": 48,
          "initializer": null,
          "kind": "field_decl",
          "loc": x: Int,
          "name": {
            "id": 46,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 47,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "as": null,
          "id": 52,
          "initializer": {
            "id": 51,
            "kind": "number",
            "loc": 42,
            "value": 42n,
          },
          "kind": "field_decl",
          "loc": y: Int = 42,
          "name": {
            "id": 49,
            "kind": "id",
            "loc": y,
            "text": "y",
          },
          "type": {
            "id": 50,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 53,
      "kind": "message_decl",
      "loc": message G { x: Int; y: Int = 42 },
      "name": {
        "id": 45,
        "kind": "type_id",
        "loc": G,
        "text": "G",
      },
      "opcode": null,
    },
    {
      "fields": [
        {
          "as": null,
          "id": 58,
          "initializer": {
            "id": 57,
            "kind": "number",
            "loc": 42,
            "value": 42n,
          },
          "kind": "field_decl",
          "loc": x: Int = 42,
          "name": {
            "id": 55,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 56,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
        {
          "as": null,
          "id": 61,
          "initializer": null,
          "kind": "field_decl",
          "loc": y: Int,
          "name": {
            "id": 59,
            "kind": "id",
            "loc": y,
            "text": "y",
          },
          "type": {
            "id": 60,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 62,
      "kind": "message_decl",
      "loc": message G { x: Int = 42; y: Int },
      "name": {
        "id": 54,
        "kind": "type_id",
        "loc": G,
        "text": "G",
      },
      "opcode": null,
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse traits-inheritance-trailing-comma 1`] = `
{
  "id": 20,
  "imports": [],
  "items": [
    {
      "id": 2,
      "kind": "primitive_type_decl",
      "loc": primitive Int;,
      "name": {
        "id": 1,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
    },
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 6,
          "initializer": null,
          "kind": "field_decl",
          "loc": c: Int,
          "name": {
            "id": 4,
            "kind": "id",
            "loc": c,
            "text": "c",
          },
          "type": {
            "id": 5,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 7,
      "kind": "trait",
      "loc": trait OtherTrait {
    c: Int;
},
      "name": {
        "id": 3,
        "kind": "id",
        "loc": OtherTrait,
        "text": "OtherTrait",
      },
      "traits": [],
    },
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 11,
          "initializer": null,
          "kind": "field_decl",
          "loc": a: Int,
          "name": {
            "id": 9,
            "kind": "id",
            "loc": a,
            "text": "a",
          },
          "type": {
            "id": 10,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 13,
      "kind": "trait",
      "loc": trait SomeTrait with OtherTrait, {
    a: Int;
},
      "name": {
        "id": 8,
        "kind": "id",
        "loc": SomeTrait,
        "text": "SomeTrait",
      },
      "traits": [
        {
          "id": 12,
          "kind": "id",
          "loc": OtherTrait,
          "text": "OtherTrait",
        },
      ],
    },
    {
      "attributes": [],
      "declarations": [
        {
          "as": null,
          "id": 17,
          "initializer": null,
          "kind": "field_decl",
          "loc": b: Int,
          "name": {
            "id": 15,
            "kind": "id",
            "loc": b,
            "text": "b",
          },
          "type": {
            "id": 16,
            "kind": "type_id",
            "loc": Int,
            "text": "Int",
          },
        },
      ],
      "id": 19,
      "kind": "contract",
      "loc": contract Main with SomeTrait, {
    b: Int;
},
      "name": {
        "id": 14,
        "kind": "id",
        "loc": Main,
        "text": "Main",
      },
      "traits": [
        {
          "id": 18,
          "kind": "id",
          "loc": SomeTrait,
          "text": "SomeTrait",
        },
      ],
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse type-struct-with-map 1`] = `
{
  "id": 15,
  "imports": [],
  "items": [
    {
      "fields": [
        {
          "as": null,
          "id": 6,
          "initializer": null,
          "kind": "field_decl",
          "loc": y: map<Int, Int>,
          "name": {
            "id": 2,
            "kind": "id",
            "loc": y,
            "text": "y",
          },
          "type": {
            "id": 5,
            "keyStorageType": null,
            "keyType": {
              "id": 3,
              "kind": "type_id",
              "loc": Int,
              "text": "Int",
            },
            "kind": "map_type",
            "loc": map<Int, Int>,
            "valueStorageType": null,
            "valueType": {
              "id": 4,
              "kind": "type_id",
              "loc": Int,
              "text": "Int",
            },
          },
        },
      ],
      "id": 7,
      "kind": "struct_decl",
      "loc": struct A {
    y: map<Int, Int>;
},
      "name": {
        "id": 1,
        "kind": "type_id",
        "loc": A,
        "text": "A",
      },
    },
    {
      "fields": [
        {
          "as": null,
          "id": 13,
          "initializer": null,
          "kind": "field_decl",
          "loc": x: map<Int, Int>,
          "name": {
            "id": 9,
            "kind": "id",
            "loc": x,
            "text": "x",
          },
          "type": {
            "id": 12,
            "keyStorageType": null,
            "keyType": {
              "id": 10,
              "kind": "type_id",
              "loc": Int,
              "text": "Int",
            },
            "kind": "map_type",
            "loc": map<Int, Int>,
            "valueStorageType": null,
            "valueType": {
              "id": 11,
              "kind": "type_id",
              "loc": Int,
              "text": "Int",
            },
          },
        },
      ],
      "id": 14,
      "kind": "message_decl",
      "loc": message B {
    x: map<Int, Int>;
},
      "name": {
        "id": 8,
        "kind": "type_id",
        "loc": B,
        "text": "B",
      },
      "opcode": null,
    },
  ],
  "kind": "module",
}
`;

exports[`grammar should parse types-optional 1`] = `
{
  "id": 19,
  "imports": [],
  "items": [
    {
      "attributes": [],
      "id": 18,
      "kind": "function_def",
      "loc": fun testFunc(src: Int?): Int {
    return 1 + 2 + (123 + 3)!! > 123;
},
      "name": {
        "id": 1,
        "kind": "id",
        "loc": testFunc,
        "text": "testFunc",
      },
      "params": [
        {
          "id": 6,
          "kind": "typed_parameter",
          "loc": src: Int?,
          "name": {
            "id": 3,
            "kind": "id",
            "loc": src,
            "text": "src",
          },
          "type": {
            "id": 5,
            "kind": "optional_type",
            "loc": Int?,
            "typeArg": {
              "id": 4,
              "kind": "type_id",
              "loc": Int,
              "text": "Int",
            },
          },
        },
      ],
      "return": {
        "id": 2,
        "kind": "type_id",
        "loc": Int,
        "text": "Int",
      },
      "statements": [
        {
          "expression": {
            "id": 16,
            "kind": "op_binary",
            "left": {
              "id": 14,
              "kind": "op_binary",
              "left": {
                "id": 9,
                "kind": "op_binary",
                "left": {
                  "id": 7,
                  "kind": "number",
                  "loc": 1,
                  "value": 1n,
                },
                "loc": 1 + 2,
                "op": "+",
                "right": {
                  "id": 8,
                  "kind": "number",
                  "loc": 2,
                  "value": 2n,
                },
              },
              "loc": 1 + 2 + (123 + 3)!!,
              "op": "+",
              "right": {
                "id": 13,
                "kind": "op_unary",
                "loc": (123 + 3)!!,
                "op": "!!",
                "operand": {
                  "id": 12,
                  "kind": "op_binary",
                  "left": {
                    "id": 10,
                    "kind": "number",
                    "loc": 123,
                    "value": 123n,
                  },
                  "loc": 123 + 3,
                  "op": "+",
                  "right": {
                    "id": 11,
                    "kind": "number",
                    "loc": 3,
                    "value": 3n,
                  },
                },
              },
            },
            "loc": 1 + 2 + (123 + 3)!! > 123,
            "op": ">",
            "right": {
              "id": 15,
              "kind": "number",
              "loc": 123,
              "value": 123n,
            },
          },
          "id": 17,
          "kind": "statement_return",
          "loc": return 1 + 2 + (123 + 3)!! > 123;,
        },
      ],
    },
  ],
  "kind": "module",
}
`;
