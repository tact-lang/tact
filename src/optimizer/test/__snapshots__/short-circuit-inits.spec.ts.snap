// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`constant-propagation constant-init-and should fail boolean short-circuiting during initialization 1`] = `
"<unknown>:4:35: Cannot evaluate expression to a constant: divisor expression must be non-zero
  3 | 
> 4 | const A: Bool = true && exception(0);
                                        ^
  5 | 
"
`;

exports[`constant-propagation constant-init-or should fail boolean short-circuiting during initialization 1`] = `
"<unknown>:4:36: Cannot evaluate expression to a constant: divisor expression must be non-zero
  3 | 
> 4 | const A: Bool = false || exception(0);
                                         ^
  5 | 
"
`;

exports[`constant-propagation contract-constant-init-and should fail boolean short-circuiting during initialization 1`] = `
"<unknown>:12:39: Cannot evaluate expression to a constant: divisor expression must be non-zero
  11 | contract CTest {
> 12 |     const A: Bool = true && exception(0);
                                             ^
  13 | }
"
`;

exports[`constant-propagation contract-constant-init-or should fail boolean short-circuiting during initialization 1`] = `
"<unknown>:12:40: Cannot evaluate expression to a constant: divisor expression must be non-zero
  11 | contract CTest {
> 12 |     const A: Bool = false || exception(0);
                                              ^
  13 | }
"
`;

exports[`constant-propagation contract-init-and should fail boolean short-circuiting during initialization 1`] = `
"<unknown>:12:33: Cannot evaluate expression to a constant: divisor expression must be non-zero
  11 | contract CTest {
> 12 |     A: Bool = true && exception(0);
                                       ^
  13 | }
"
`;

exports[`constant-propagation contract-init-or should fail boolean short-circuiting during initialization 1`] = `
"<unknown>:12:34: Cannot evaluate expression to a constant: divisor expression must be non-zero
  11 | contract CTest {
> 12 |     A: Bool = false || exception(0);
                                        ^
  13 | }
"
`;

exports[`constant-propagation short-circuit-initializations should pass boolean short-circuiting during initialization 1`] = `
[
  [
    "true",
    "Bool",
  ],
  [
    "loop()",
    "Bool",
  ],
  [
    "true || loop()",
    "Bool",
  ],
  [
    "true",
    "Bool",
  ],
  [
    "0",
    "Int",
  ],
  [
    "exception(0)",
    "Bool",
  ],
  [
    "true || exception(0)",
    "Bool",
  ],
  [
    "false",
    "Bool",
  ],
  [
    "loop()",
    "Bool",
  ],
  [
    "false && loop()",
    "Bool",
  ],
  [
    "false",
    "Bool",
  ],
  [
    "0",
    "Int",
  ],
  [
    "exception(0)",
    "Bool",
  ],
  [
    "false && exception(0)",
    "Bool",
  ],
  [
    "true",
    "Bool",
  ],
  [
    "loop()",
    "Bool",
  ],
  [
    "true || loop()",
    "Bool",
  ],
  [
    "true",
    "Bool",
  ],
  [
    "0",
    "Int",
  ],
  [
    "exception(0)",
    "Bool",
  ],
  [
    "true || exception(0)",
    "Bool",
  ],
  [
    "false",
    "Bool",
  ],
  [
    "loop()",
    "Bool",
  ],
  [
    "false && loop()",
    "Bool",
  ],
  [
    "false",
    "Bool",
  ],
  [
    "0",
    "Int",
  ],
  [
    "exception(0)",
    "Bool",
  ],
  [
    "false && exception(0)",
    "Bool",
  ],
  [
    "true",
    "Bool",
  ],
  [
    "loop()",
    "Bool",
  ],
  [
    "true || loop()",
    "Bool",
  ],
  [
    "true",
    "Bool",
  ],
  [
    "0",
    "Int",
  ],
  [
    "exception(0)",
    "Bool",
  ],
  [
    "true || exception(0)",
    "Bool",
  ],
  [
    "false",
    "Bool",
  ],
  [
    "loop()",
    "Bool",
  ],
  [
    "false && loop()",
    "Bool",
  ],
  [
    "false",
    "Bool",
  ],
  [
    "0",
    "Int",
  ],
  [
    "exception(0)",
    "Bool",
  ],
  [
    "false && exception(0)",
    "Bool",
  ],
  [
    "true",
    "Bool",
  ],
  [
    "loop()",
    "Bool",
  ],
  [
    "true || loop()",
    "Bool",
  ],
  [
    "true",
    "Bool",
  ],
  [
    "0",
    "Int",
  ],
  [
    "exception(0)",
    "Bool",
  ],
  [
    "true || exception(0)",
    "Bool",
  ],
  [
    "false",
    "Bool",
  ],
  [
    "loop()",
    "Bool",
  ],
  [
    "false && loop()",
    "Bool",
  ],
  [
    "false",
    "Bool",
  ],
  [
    "0",
    "Int",
  ],
  [
    "exception(0)",
    "Bool",
  ],
  [
    "false && exception(0)",
    "Bool",
  ],
  [
    "true",
    "Bool",
  ],
  [
    "true",
    "Bool",
  ],
  [
    "1",
    "Int",
  ],
  [
    "v",
    "Int",
  ],
  [
    "1 / v",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "1 / v == 0",
    "Bool",
  ],
]
`;

exports[`constant-propagation struct-init-and should fail boolean short-circuiting during initialization 1`] = `
"<unknown>:5:33: Cannot evaluate expression to a constant: divisor expression must be non-zero
  4 | struct STest {
> 5 |     A: Bool = true && exception(0);
                                      ^
  6 | }
"
`;

exports[`constant-propagation struct-init-or should fail boolean short-circuiting during initialization 1`] = `
"<unknown>:5:34: Cannot evaluate expression to a constant: divisor expression must be non-zero
  4 | struct STest {
> 5 |     A: Bool = false || exception(0);
                                       ^
  6 | }
"
`;
