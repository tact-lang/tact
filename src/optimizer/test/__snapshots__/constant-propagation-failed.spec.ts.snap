// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`constant-propagation should fail constant propagation analysis for assignments 1`] = `
"<unknown>:11:14: Cannot evaluate expression to a constant: divisor expression must be non-zero
  10 |         b += a + 1;              // 12
> 11 |         1 / (b - 12);             // Division by zero
                    ^~~~~~
  12 |         return 0;
"
`;

exports[`constant-propagation should fail constant propagation analysis for global-function 1`] = `
"<unknown>:11:17: Cannot evaluate expression to a constant: divisor expression must be non-zero
  10 |     }
> 11 |     return 1 / (a - 20);   // Division by zero
                       ^~~~~~
  12 | }                           
"
`;

exports[`constant-propagation should fail constant propagation analysis for init 1`] = `
"<unknown>:25:14: Cannot evaluate expression to a constant: divisor expression must be non-zero
  24 |         // self.f.Bb / self.f.Bb;     // Commented because it would cause a division by zero.
> 25 |         1 / (self.f.Bc - self.f.Bc);  // Division by zero             
                    ^~~~~~~~~~~~~~~~~~~~~
  26 |     }
"
`;

exports[`constant-propagation should fail constant propagation analysis for initof-1 1`] = `
"<unknown>:9:18: Cannot evaluate expression to a constant: divisor expression must be non-zero
   8 |     init(v: Int) {
>  9 |         self.a / self.a;    // Division by zero
                        ^~~~~~
  10 |     }
"
`;

exports[`constant-propagation should fail constant propagation analysis for inside-do-until 1`] = `
"<unknown>:10:25: Cannot evaluate expression to a constant: divisor expression must be non-zero
   9 |         do {                             
> 10 |             return 1 / (a - 5);          // Since the loop executes at least once, and a = 5,
                               ^~~~~
  11 |         } until (x > 0);                 // a division by zero will occur.                        
"
`;

exports[`constant-propagation should fail constant propagation analysis for inside-repeat 1`] = `
"<unknown>:10:25: Cannot evaluate expression to a constant: divisor expression must be non-zero
   9 |         repeat (x) {                     
> 10 |             return 1 / (a - 5);          // Loop executes at least once: division by zero
                               ^~~~~
  11 |         }                                
"
`;

exports[`constant-propagation should fail constant propagation analysis for inside-while 1`] = `
"<unknown>:10:25: Cannot evaluate expression to a constant: divisor expression must be non-zero
   9 |         while (x >= 0) {                  
> 10 |             return 1 / (a - 5);          // Loop executes at least once: division by zero
                               ^~~~~
  11 |         }                                
"
`;

exports[`constant-propagation should fail constant propagation analysis for null-dereference 1`] = `
"<unknown>:14:12: Cannot evaluate expression to a constant: non-null value expected but got null
  13 |     a!!;             // OK
> 14 |     return b!!;      // Null dereference
                  ^
  15 | }
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-do-until-no-iterations 1`] = `
"<unknown>:12:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  11 |         } until (x >= 0);                                
> 12 |         return 1 / (a - 6);        // Loop does not execute more than once. Hence, after the loop, a = 6,
                           ^~~~~
  13 |     }                              // which means division by zero.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-do-until-with-iterations 1`] = `
"<unknown>:14:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  13 |         } until (x > 0);                                
> 14 |         return 1 / (a - 10);        // Loop executes more than once. Hence, but after each loop iteration, a = 10,
                           ^~~~~~
  15 |     }                               // which means division by zero.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-if-else-false-branch 1`] = `
"<unknown>:13:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |         }
> 13 |         return 1 / (a - 3);   // Division by zero, because condition in the if is false at compile time,                             
                           ^~~~~
  14 |     }                         // which means that a = 3 after the conditional.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-if-else-true-branch 1`] = `
"<unknown>:13:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |         }
> 13 |         return 1 / (a - 10);   // Division by zero, because condition in the if is true at compile time,                             
                           ^~~~~~
  14 |     }                          // which means that a = 10 after the conditional.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-if-elseif-false-branch 1`] = `
"<unknown>:13:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |         }
> 13 |         return 1 / (a - 3);   // Division by zero, because conditions can be determined at compile time,                             
                           ^~~~~
  14 |     }                         // which means that a = 3 after the conditional.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-if-elseif-true-branch 1`] = `
"<unknown>:13:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |         }
> 13 |         return 1 / (a - 10);   // Division by zero, because conditions can be determined at compile time,                              
                           ^~~~~~
  14 |     }                          // which means that a = 10 after the conditional.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-if-false 1`] = `
"<unknown>:11:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  10 |         }
> 11 |         return 1 / (a - 5);   // Division by zero, because condition in the if is false at compile time,                             
                           ^~~~~
  12 |     }                         // which means that a = 5 after the conditional.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-if-true 1`] = `
"<unknown>:11:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  10 |         }
> 11 |         return 1 / (a - 10);   // Division by zero, because condition in the if is true at compile time,                             
                           ^~~~~~
  12 |     }                          // which means that a = 10 after the conditional.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-repeat-no-iterations 1`] = `
"<unknown>:12:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  11 |         }                                
> 12 |         return 1 / (a - 5);         // Loop does not execute. Hence, after the loop, a = 5,
                           ^~~~~
  13 |     }                               // which means division by zero.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-repeat-with-iterations 1`] = `
"<unknown>:13:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |         }                                
> 13 |         return 1 / (a - 3);         // Loop executes. After each iteration, a = 3,
                           ^~~~~
  14 |     }                               // which means division by zero after the loop.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-repeat-with-iterations_explicit-loop-run 1`] = `
"<unknown>:12:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  11 |         }                           // Analyzer will explicitly run repeats only if below or equal to the current limit at 2 ^ 12 = 4096 times.
> 12 |         return 1 / (a - 105);         
                           ^~~~~~~
  13 |     }
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-while-no-iterations 1`] = `
"<unknown>:12:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  11 |         }                                
> 12 |         return 1 / (a - 5);         // Loop does not execute. Hence, after the loop, a = 5,
                           ^~~~~
  13 |     }                               // which means division by zero.
"
`;

exports[`constant-propagation should fail constant propagation analysis for outside-while-with-iterations 1`] = `
"<unknown>:14:21: Cannot evaluate expression to a constant: divisor expression must be non-zero
  13 |         }                                
> 14 |         return 1 / (a - 12);         // Loop executes. After each iteration, a = 3,
                           ^~~~~~
  15 |     }                               // which means division by zero after the loop.
"
`;

exports[`constant-propagation should fail constant propagation analysis for overflow-1 1`] = `
"<unknown>:13:12: Cannot evaluate expression to a constant: integer '115792089237316195423570985008687907853269984665640564039457584007913129639936' does not fit into TVM Int type
  12 | 
> 13 |     return n << exponent;      // Overflow reported: 1 * 2^256
                  ^~~~~~~~~~~~~
  14 | }
"
`;

exports[`constant-propagation should fail constant propagation analysis for overflow-2 1`] = `
"<unknown>:11:18: Cannot evaluate expression to a constant: integer '115792089237316195423570985008687907853269984665640564039457584007913129639936' does not fit into TVM Int type
  10 |         exponent += 1;              
> 11 |         result = n << exponent;     // Reported overflow in the 10th iteration.
                        ^~~~~~~~~~~~~
  12 |     }
"
`;

exports[`constant-propagation should fail constant propagation analysis for short-circuit-and 1`] = `
"<unknown>:13:17: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |     let c: Bool = b && a.mutator();    // Since && short-circuits, "a" remains with value a = 10
> 13 |     return 1 / (a - 10);               // Division by zero.
                       ^~~~~~
  14 | }
"
`;

exports[`constant-propagation should fail constant propagation analysis for short-circuit-or 1`] = `
"<unknown>:13:17: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |     let c: Bool = b || a.mutator();    // Since || short-circuits, "a" remains with value a = 10
> 13 |     return 1 / (a - 10);               // Division by zero.
                       ^~~~~~
  14 | }
"
`;

exports[`constant-propagation should fail constant propagation analysis for static-calls 1`] = `
"<unknown>:7:16: Cannot evaluate expression to a constant: divisor expression must be non-zero
  6 |     } else {
> 7 |         return b;
                     ^
  8 |     }
"
`;

exports[`constant-propagation should fail constant propagation analysis for ternary-operator-1 1`] = `
"<unknown>:13:17: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |     let c: Bool = b ? false : a.mutator();    // "a" remains with value a = 10
> 13 |     return 1 / (a - 10);               // Division by zero.
                       ^~~~~~
  14 | }
"
`;

exports[`constant-propagation should fail constant propagation analysis for ternary-operator-2 1`] = `
"<unknown>:13:17: Cannot evaluate expression to a constant: divisor expression must be non-zero
  12 |     let c: Bool = b ? a.mutator() : false;    // "a" remains with value a = 10
> 13 |     return 1 / (a - 10);               // Division by zero.
                       ^~~~~~
  14 | }
"
`;
