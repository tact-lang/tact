// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`write-non-mutating-function should correctly add parameters to call of not_mut function 1`] = `
[
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_set",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_nop",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_str_to_slice",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_slice_to_str",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_address_to_slice",
    "signature": "<unknown>",
  },
  {
    "code": {
      "code": "slice raw = cs~load_msg_addr();
return (cs, raw);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_load_address",
    "signature": "(slice, slice) __tact_load_address(slice cs)",
  },
  {
    "code": {
      "code": "if (cs.preload_uint(2) != 0) {
    slice raw = cs~load_msg_addr();
    return (cs, raw);
} else {
    cs~skip_bits(2);
    return (cs, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_load_address_opt",
    "signature": "(slice, slice) __tact_load_address_opt(slice cs)",
  },
  {
    "code": {
      "code": "return b.store_slice(address);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_store_address",
    "signature": "builder __tact_store_address(builder b, slice address)",
  },
  {
    "code": {
      "code": "if (null?(address)) {
    b = b.store_uint(0, 2);
    return b;
} else {
    return __tact_store_address(b, address);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_store_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_store_address_opt",
    "signature": "builder __tact_store_address_opt(builder b, slice address)",
  },
  {
    "code": {
      "code": "var b = begin_cell();
b = b.store_uint(2, 2);
b = b.store_uint(0, 1);
b = b.store_int(chain, 8);
b = b.store_uint(hash, 256);
var addr = b.end_cell().begin_parse();
return addr;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_create_address",
    "signature": "slice __tact_create_address(int chain, int hash)",
  },
  {
    "code": {
      "code": "var b = begin_cell();
b = b.store_uint(0, 2);
b = b.store_uint(3, 2);
b = b.store_uint(0, 1);
b = b.store_ref(code);
b = b.store_ref(data);
var hash = cell_hash(b.end_cell());
return __tact_create_address(chain, hash);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_create_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_compute_contract_address",
    "signature": "slice __tact_compute_contract_address(int chain, cell code, cell data)",
  },
  {
    "code": {
      "code": "throw_if(128, null?(x)); return x;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
      "inline",
    },
    "name": "__tact_not_null",
    "signature": "forall X -> X __tact_not_null(X x)",
  },
  {
    "code": {
      "code": "DICTDEL",
      "kind": "asm",
      "shuffle": "(index dict key_len)",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete",
    "signature": "(cell, int) __tact_dict_delete(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "DICTIDEL",
      "kind": "asm",
      "shuffle": "(index dict key_len)",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete_int",
    "signature": "(cell, int) __tact_dict_delete_int(cell dict, int key_len, int index)",
  },
  {
    "code": {
      "code": "DICTUDEL",
      "kind": "asm",
      "shuffle": "(index dict key_len)",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete_uint",
    "signature": "(cell, int) __tact_dict_delete_uint(cell dict, int key_len, int index)",
  },
  {
    "code": {
      "code": "DICTSETREF",
      "kind": "asm",
      "shuffle": "(value index dict key_len)",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_set_ref",
    "signature": "((cell), ()) __tact_dict_set_ref(cell dict, int key_len, slice index, cell value)",
  },
  {
    "code": {
      "code": "DICTREPLACEREF",
      "kind": "asm",
      "shuffle": "(value index dict key_len)",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_replace_ref",
    "signature": "((cell), (int)) __tact_dict_replace_ref(cell dict, int key_len, slice index, cell value)",
  },
  {
    "code": {
      "code": "DICTREPLACEGETREF NULLSWAPIFNOT",
      "kind": "asm",
      "shuffle": "(value index dict key_len)",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_replaceget_ref",
    "signature": "((cell), (cell, int)) __tact_dict_replaceget_ref(cell dict, int key_len, slice index, cell value)",
  },
  {
    "code": {
      "code": "DICTGET NULLSWAPIFNOT",
      "kind": "asm",
      "shuffle": "(index dict key_len)",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_get",
    "signature": "(slice, int) __tact_dict_get(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "DICTDELGET NULLSWAPIFNOT",
      "kind": "asm",
      "shuffle": "(index dict key_len)",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete_get",
    "signature": "(cell, (slice, int)) __tact_dict_delete_get(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "DICTDELGETREF NULLSWAPIFNOT",
      "kind": "asm",
      "shuffle": "(index dict key_len)",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete_get_ref",
    "signature": "(cell, (cell, int)) __tact_dict_delete_get_ref(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "DICTGETREF NULLSWAPIFNOT",
      "kind": "asm",
      "shuffle": "(index dict key_len)",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_get_ref",
    "signature": "(cell, int) __tact_dict_get_ref(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "DICTMIN  NULLSWAPIFNOT2",
      "kind": "asm",
      "shuffle": "(dict key_len -> 1 0 2)",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_min",
    "signature": "(slice, slice, int) __tact_dict_min(cell dict, int key_len)",
  },
  {
    "code": {
      "code": "DICTMINREF NULLSWAPIFNOT2",
      "kind": "asm",
      "shuffle": "(dict key_len -> 1 0 2)",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_min_ref",
    "signature": "(slice, cell, int) __tact_dict_min_ref(cell dict, int key_len)",
  },
  {
    "code": {
      "code": "DICTGETNEXT NULLSWAPIFNOT2",
      "kind": "asm",
      "shuffle": "(pivot dict key_len -> 1 0 2)",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_next",
    "signature": "(slice, slice, int) __tact_dict_next(cell dict, int key_len, slice pivot)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(dict, key_len, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {},
    "name": "__tact_dict_next_ref",
    "signature": "(slice, cell, int) __tact_dict_next_ref(cell dict, int key_len, slice pivot)",
  },
  {
    "code": {
      "code": "STRDUMP DROP STRDUMP DROP s0 DUMP DROP",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug",
    "signature": "forall X -> () __tact_debug(X value, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "STRDUMP DROP STRDUMP DROP STRDUMP DROP",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_str",
    "signature": "() __tact_debug_str(slice value, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "if (value) {
    __tact_debug_str("true", debug_print_1, debug_print_2);
} else {
    __tact_debug_str("false", debug_print_1, debug_print_2);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_debug_str",
    },
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_bool",
    "signature": "() __tact_debug_bool(int value, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "SDSUBSTR",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_preload_offset",
    "signature": "(slice) __tact_preload_offset(slice s, int offset, int bits)",
  },
  {
    "code": {
      "code": "slice new_data = begin_cell()
    .store_slice(data)
    .store_slice("0000"s)
.end_cell().begin_parse();
int reg = 0;
while (~ new_data.slice_data_empty?()) {
    int byte = new_data~load_uint(8);
    int mask = 0x80;
    while (mask > 0) {
        reg <<= 1;
        if (byte & mask) {
            reg += 1;
        }
        mask >>= 1;
        if (reg > 0xffff) {
            reg &= 0xffff;
            reg ^= 0x1021;
        }
    }
}
(int q, int r) = divmod(reg, 256);
return begin_cell()
    .store_uint(q, 8)
    .store_uint(r, 8)
.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline_ref",
    },
    "name": "__tact_crc16",
    "signature": "(slice) __tact_crc16(slice data)",
  },
  {
    "code": {
      "code": "slice chars = "4142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A303132333435363738392D5F"s;
builder res = begin_cell();

while (data.slice_bits() >= 24) {
    (int bs1, int bs2, int bs3) = (data~load_uint(8), data~load_uint(8), data~load_uint(8));

    int n = (bs1 << 16) | (bs2 << 8) | bs3;

    res = res
        .store_slice(__tact_preload_offset(chars, ((n >> 18) & 63) * 8, 8))
        .store_slice(__tact_preload_offset(chars, ((n >> 12) & 63) * 8, 8))
        .store_slice(__tact_preload_offset(chars, ((n >>  6) & 63) * 8, 8))
        .store_slice(__tact_preload_offset(chars, ((n      ) & 63) * 8, 8));
}

return res.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_preload_offset",
    },
    "flags": Set {},
    "name": "__tact_base64_encode",
    "signature": "(slice) __tact_base64_encode(slice data)",
  },
  {
    "code": {
      "code": "(int wc, int hash) = address.parse_std_addr();

slice user_friendly_address = begin_cell()
    .store_slice("11"s)
    .store_uint((wc + 0x100) % 0x100, 8)
    .store_uint(hash, 256)
.end_cell().begin_parse();

slice checksum = __tact_crc16(user_friendly_address);
slice user_friendly_address_with_checksum = begin_cell()
    .store_slice(user_friendly_address)
    .store_slice(checksum)
.end_cell().begin_parse();

return __tact_base64_encode(user_friendly_address_with_checksum);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_crc16",
      "__tact_base64_encode",
    },
    "flags": Set {},
    "name": "__tact_address_to_user_friendly",
    "signature": "(slice) __tact_address_to_user_friendly(slice address)",
  },
  {
    "code": {
      "code": "__tact_debug_str(__tact_address_to_user_friendly(address), debug_print_1, debug_print_2);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_debug_str",
      "__tact_address_to_user_friendly",
    },
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_address",
    "signature": "() __tact_debug_address(slice address, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "STRDUMP DROP STRDUMP DROP DUMPSTK",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_stack",
    "signature": "() __tact_debug_stack(slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "return __tact_context;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_context_get",
    "signature": "(int, slice, int, slice) __tact_context_get()",
  },
  {
    "code": {
      "code": "return __tact_context_sender;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_context_get_sender",
    "signature": "slice __tact_context_get_sender()",
  },
  {
    "code": {
      "code": "if (null?(__tact_randomized)) {
    randomize_lt();
    __tact_randomized = true;
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
      "inline",
    },
    "name": "__tact_prepare_random",
    "signature": "() __tact_prepare_random()",
  },
  {
    "code": {
      "code": "return b.store_int(v, 1);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_store_bool",
    "signature": "builder __tact_store_bool(builder b, int v)",
  },
  {
    "code": {
      "code": "NOP",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_to_tuple",
    "signature": "forall X -> tuple __tact_to_tuple(X x)",
  },
  {
    "code": {
      "code": "NOP",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_from_tuple",
    "signature": "forall X -> X __tact_from_tuple(tuple x)",
  },
  {
    "code": {
      "code": "return equal_slices_bits(a, b);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_bits",
    "signature": "int __tact_slice_eq_bits(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (equal_slices_bits(a, b));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_bits_nullable_one",
    "signature": "int __tact_slice_eq_bits_nullable_one(slice a, slice b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( equal_slices_bits(a, b) ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_bits_nullable",
    "signature": "int __tact_slice_eq_bits_nullable(slice a, slice b)",
  },
  {
    "code": {
      "code": "(slice key, slice value, int flag) = __tact_dict_min(a, kl);
while (flag) {
    (slice value_b, int flag_b) = b~__tact_dict_delete_get(kl, key);
    ifnot (flag_b) {
        return 0;
    }
    ifnot (value.slice_hash() == value_b.slice_hash()) {
        return 0;
    }
    (key, value, flag) = __tact_dict_next(a, kl, key);
}
return null?(b);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
      "__tact_dict_delete_get",
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_eq",
    "signature": "int __tact_dict_eq(cell a, cell b, int kl)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (a == b);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_eq_nullable_one",
    "signature": "int __tact_int_eq_nullable_one(int a, int b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (true) : (a != b);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_neq_nullable_one",
    "signature": "int __tact_int_neq_nullable_one(int a, int b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a == b ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_eq_nullable",
    "signature": "int __tact_int_eq_nullable(int a, int b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a != b ) : ( true ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_neq_nullable",
    "signature": "int __tact_int_neq_nullable(int a, int b)",
  },
  {
    "code": {
      "code": "return (a.cell_hash() ==  b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_eq",
    "signature": "int __tact_cell_eq(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (a.cell_hash() !=  b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_neq",
    "signature": "int __tact_cell_neq(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (a.cell_hash() == b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_eq_nullable_one",
    "signature": "int __tact_cell_eq_nullable_one(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (true) : (a.cell_hash() != b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_neq_nullable_one",
    "signature": "int __tact_cell_neq_nullable_one(cell a, cell b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.cell_hash() == b.cell_hash() ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_eq_nullable",
    "signature": "int __tact_cell_eq_nullable(cell a, cell b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.cell_hash() != b.cell_hash() ) : ( true ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_neq_nullable",
    "signature": "int __tact_cell_neq_nullable(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (a.slice_hash() ==  b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq",
    "signature": "int __tact_slice_eq(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (a.slice_hash() !=  b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_neq",
    "signature": "int __tact_slice_neq(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (a.slice_hash() == b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_nullable_one",
    "signature": "int __tact_slice_eq_nullable_one(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (true) : (a.slice_hash() != b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_neq_nullable_one",
    "signature": "int __tact_slice_neq_nullable_one(slice a, slice b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.slice_hash() == b.slice_hash() ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_nullable",
    "signature": "int __tact_slice_eq_nullable(slice a, slice b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.slice_hash() != b.slice_hash() ) : ( true ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_neq_nullable",
    "signature": "int __tact_slice_neq_nullable(slice a, slice b)",
  },
  {
    "code": {
      "code": "return udict_set_ref(dict, 16, id, code);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_code",
    "signature": "cell __tact_dict_set_code(cell dict, int id, cell code)",
  },
  {
    "code": {
      "code": "var (data, ok) = udict_get_ref?(dict, 16, id);
throw_unless(135, ok);
return data;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_code",
    "signature": "cell __tact_dict_get_code(cell dict, int id)",
  },
  {
    "code": {
      "code": "NIL",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_0",
    "signature": "tuple __tact_tuple_create_0()",
  },
  {
    "code": {
      "code": "return ();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_tuple_destroy_0",
    "signature": "() __tact_tuple_destroy_0()",
  },
  {
    "code": {
      "code": "1 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_1",
    "signature": "forall X0 -> tuple __tact_tuple_create_1((X0) v)",
  },
  {
    "code": {
      "code": "1 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_1",
    "signature": "forall X0 -> (X0) __tact_tuple_destroy_1(tuple v)",
  },
  {
    "code": {
      "code": "2 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_2",
    "signature": "forall X0, X1 -> tuple __tact_tuple_create_2((X0, X1) v)",
  },
  {
    "code": {
      "code": "2 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_2",
    "signature": "forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v)",
  },
  {
    "code": {
      "code": "3 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_3",
    "signature": "forall X0, X1, X2 -> tuple __tact_tuple_create_3((X0, X1, X2) v)",
  },
  {
    "code": {
      "code": "3 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_3",
    "signature": "forall X0, X1, X2 -> (X0, X1, X2) __tact_tuple_destroy_3(tuple v)",
  },
  {
    "code": {
      "code": "4 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_4",
    "signature": "forall X0, X1, X2, X3 -> tuple __tact_tuple_create_4((X0, X1, X2, X3) v)",
  },
  {
    "code": {
      "code": "4 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_4",
    "signature": "forall X0, X1, X2, X3 -> (X0, X1, X2, X3) __tact_tuple_destroy_4(tuple v)",
  },
  {
    "code": {
      "code": "5 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_5",
    "signature": "forall X0, X1, X2, X3, X4 -> tuple __tact_tuple_create_5((X0, X1, X2, X3, X4) v)",
  },
  {
    "code": {
      "code": "5 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_5",
    "signature": "forall X0, X1, X2, X3, X4 -> (X0, X1, X2, X3, X4) __tact_tuple_destroy_5(tuple v)",
  },
  {
    "code": {
      "code": "6 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_6",
    "signature": "forall X0, X1, X2, X3, X4, X5 -> tuple __tact_tuple_create_6((X0, X1, X2, X3, X4, X5) v)",
  },
  {
    "code": {
      "code": "6 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_6",
    "signature": "forall X0, X1, X2, X3, X4, X5 -> (X0, X1, X2, X3, X4, X5) __tact_tuple_destroy_6(tuple v)",
  },
  {
    "code": {
      "code": "7 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_7",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6 -> tuple __tact_tuple_create_7((X0, X1, X2, X3, X4, X5, X6) v)",
  },
  {
    "code": {
      "code": "7 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_7",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6 -> (X0, X1, X2, X3, X4, X5, X6) __tact_tuple_destroy_7(tuple v)",
  },
  {
    "code": {
      "code": "8 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_8",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7 -> tuple __tact_tuple_create_8((X0, X1, X2, X3, X4, X5, X6, X7) v)",
  },
  {
    "code": {
      "code": "8 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_8",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7 -> (X0, X1, X2, X3, X4, X5, X6, X7) __tact_tuple_destroy_8(tuple v)",
  },
  {
    "code": {
      "code": "9 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_9",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8 -> tuple __tact_tuple_create_9((X0, X1, X2, X3, X4, X5, X6, X7, X8) v)",
  },
  {
    "code": {
      "code": "9 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_9",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8) __tact_tuple_destroy_9(tuple v)",
  },
  {
    "code": {
      "code": "10 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_10",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9 -> tuple __tact_tuple_create_10((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) v)",
  },
  {
    "code": {
      "code": "10 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_10",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) __tact_tuple_destroy_10(tuple v)",
  },
  {
    "code": {
      "code": "11 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_11",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 -> tuple __tact_tuple_create_11((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) v)",
  },
  {
    "code": {
      "code": "11 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_11",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) __tact_tuple_destroy_11(tuple v)",
  },
  {
    "code": {
      "code": "12 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_12",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11 -> tuple __tact_tuple_create_12((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) v)",
  },
  {
    "code": {
      "code": "12 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_12",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) __tact_tuple_destroy_12(tuple v)",
  },
  {
    "code": {
      "code": "13 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_13",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12 -> tuple __tact_tuple_create_13((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) v)",
  },
  {
    "code": {
      "code": "13 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_13",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) __tact_tuple_destroy_13(tuple v)",
  },
  {
    "code": {
      "code": "14 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_14",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13 -> tuple __tact_tuple_create_14((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) v)",
  },
  {
    "code": {
      "code": "14 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_14",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) __tact_tuple_destroy_14(tuple v)",
  },
  {
    "code": {
      "code": "15 TUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_15",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14 -> tuple __tact_tuple_create_15((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) v)",
  },
  {
    "code": {
      "code": "15 UNTUPLE",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_15",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) __tact_tuple_destroy_15(tuple v)",
  },
  {
    "code": {
      "code": "return tpush(tpush(empty_tuple(), b), null());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start",
    "signature": "tuple __tact_string_builder_start(builder b)",
  },
  {
    "code": {
      "code": "return __tact_string_builder_start(begin_cell().store_uint(0, 32));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_start",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start_comment",
    "signature": "tuple __tact_string_builder_start_comment()",
  },
  {
    "code": {
      "code": "return __tact_string_builder_start(begin_cell().store_uint(0, 8));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_start",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start_tail_string",
    "signature": "tuple __tact_string_builder_start_tail_string()",
  },
  {
    "code": {
      "code": "return __tact_string_builder_start(begin_cell());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_start",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start_string",
    "signature": "tuple __tact_string_builder_start_string()",
  },
  {
    "code": {
      "code": "(builder b, tuple tail) = uncons(builders);
cell c = b.end_cell();
while(~ null?(tail)) {
    (b, tail) = uncons(tail);
    c = b.store_ref(c).end_cell();
}
return c;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_end",
    "signature": "cell __tact_string_builder_end(tuple builders)",
  },
  {
    "code": {
      "code": "return __tact_string_builder_end(builders).begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_end",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_end_slice",
    "signature": "slice __tact_string_builder_end_slice(tuple builders)",
  },
  {
    "code": {
      "code": "int sliceRefs = slice_refs(sc);
int sliceBits = slice_bits(sc);

while((sliceBits > 0) | (sliceRefs > 0)) {

    ;; Load the current builder
    (builder b, tuple tail) = uncons(builders);
    int remBytes = 127 - (builder_bits(b) / 8);
    int exBytes = sliceBits / 8;

    ;; Append bits
    int amount = min(remBytes, exBytes);
    if (amount > 0) {
        slice read = sc~load_bits(amount * 8);
        b = b.store_slice(read);
    }

    ;; Update builders
    builders = cons(b, tail);

    ;; Check if we need to add a new cell and continue
    if (exBytes - amount > 0) {
        var bb = begin_cell();
        builders = cons(bb, builders);
        sliceBits = (exBytes - amount) * 8;
    } elseif (sliceRefs > 0) {
        sc = sc~load_ref().begin_parse();
        sliceRefs = slice_refs(sc);
        sliceBits = slice_bits(sc);
    } else {
        sliceBits = 0;
        sliceRefs = 0;
    }
}

return ((builders), ());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_string_builder_append",
    "signature": "((tuple), ()) __tact_string_builder_append(tuple builders, slice sc)",
  },
  {
    "code": {
      "code": "builders~__tact_string_builder_append(sc);
return builders;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_append",
    },
    "flags": Set {},
    "name": "__tact_string_builder_append_not_mut",
    "signature": "(tuple) __tact_string_builder_append_not_mut(tuple builders, slice sc)",
  },
  {
    "code": {
      "code": "var b = begin_cell();
if (src < 0) {
    b = b.store_uint(45, 8);
    src = - src;
}

if (src < 1000000000000000000000000000000) {
    int len = 0;
    int value = 0;
    int mult = 1;
    do {
        (src, int res) = src.divmod(10);
        value = value + (res + 48) * mult;
        mult = mult * 256;
        len = len + 1;
    } until (src == 0);

    b = b.store_uint(value, len * 8);
} else {
    tuple t = empty_tuple();
    int len = 0;
    do {
        int digit = src % 10;
        t~tpush(digit);
        len = len + 1;
        src = src / 10;
    } until (src == 0);

    int c = len - 1;
    repeat(len) {
        int v = t.at(c);
        b = b.store_uint(v + 48, 8);
        c = c - 1;
    }
}
return b.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_int_to_string",
    "signature": "slice __tact_int_to_string(int src)",
  },
  {
    "code": {
      "code": "throw_if(134, (digits <= 0) | (digits > 77));
builder b = begin_cell();

if (src < 0) {
    b = b.store_uint(45, 8);
    src = - src;
}

;; Process rem part
int skip = true;
int len = 0;
int rem = 0;
tuple t = empty_tuple();
repeat(digits) {
    (src, rem) = src.divmod(10);
    if ( ~ ( skip & ( rem == 0 ) ) ) {
        skip = false;
        t~tpush(rem + 48);
        len = len + 1;
    }
}

;; Process dot
if (~ skip) {
    t~tpush(46);
    len = len + 1;
}

;; Main
do {
    (src, rem) = src.divmod(10);
    t~tpush(rem + 48);
    len = len + 1;
} until (src == 0);

;; Assemble
int c = len - 1;
repeat(len) {
    int v = t.at(c);
    b = b.store_uint(v, 8);
    c = c - 1;
}

;; Result
return b.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_float_to_string",
    "signature": "slice __tact_float_to_string(int src, int digits)",
  },
  {
    "code": {
      "code": "throw_unless(5, num > 0);
throw_unless(5, base > 1);
if (num < base) {
    return 0;
}
int result = 0;
while (num >= base) {
    num /= base;
    result += 1;
}
return result;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_log",
    "signature": "int __tact_log(int num, int base)",
  },
  {
    "code": {
      "code": "throw_unless(5, exp >= 0);
int result = 1;
repeat (exp) {
    result *= base;
}
return result;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_pow",
    "signature": "int __tact_pow(int base, int exp)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_slice",
    "signature": "slice __tact_dict_get_slice_slice(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_slice",
    "signature": "(slice, slice, int) __tact_dict_min_slice_slice(cell d, int kl)",
  },
  {
    "code": {
      "code": "return __tact_dict_next(d, kl, pivot);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_slice",
    "signature": "(slice, slice, int) __tact_dict_next_slice_slice(cell d, int kl, slice pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_slice(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_slice",
    "signature": "(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, (ok));
} else {
    return dict_replace_builder?(d, kl, k, begin_cell().store_slice(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_slice_slice",
    "signature": "(cell, (int)) __tact_dict_replace_slice_slice(cell d, int kl, slice k, slice v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~__tact_dict_delete_get(kl, k) : d~dict_replaceget?(kl, k, begin_cell().store_slice(v).end_cell().begin_parse());
if (ok) {
    return (d, old);
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_slice_slice",
    "signature": "(cell, (slice)) __tact_dict_replaceget_slice_slice(cell d, int kl, slice k, slice v)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r~load_int(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_int",
    "signature": "int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_int",
    "signature": "(slice, int, int) __tact_dict_min_slice_int(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_int",
    "signature": "(slice, int, int) __tact_dict_next_slice_int(cell d, int kl, slice pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_int",
    "signature": "(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, (ok));
} else {
    return dict_replace_builder?(d, kl, k, begin_cell().store_int(v, vl));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_slice_int",
    "signature": "(cell, (int)) __tact_dict_replace_slice_int(cell d, int kl, slice k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~__tact_dict_delete_get(kl, k) : d~dict_replaceget?(kl, k, begin_cell().store_int(v, vl).end_cell().begin_parse());
if (ok) {
    return (d, old~load_int(vl));
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_slice_int",
    "signature": "(cell, (int)) __tact_dict_replaceget_slice_int(cell d, int kl, slice k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r~load_uint(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_uint",
    "signature": "int __tact_dict_get_slice_uint(cell d, int kl, slice k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_uint",
    "signature": "(slice, int, int) __tact_dict_min_slice_uint(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_uint",
    "signature": "(slice, int, int) __tact_dict_next_slice_uint(cell d, int kl, slice pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_uint",
    "signature": "(cell, ()) __tact_dict_set_slice_uint(cell d, int kl, slice k, int v, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, (ok));
} else {
    return dict_replace_builder?(d, kl, k, begin_cell().store_uint(v, vl));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_slice_uint",
    "signature": "(cell, (int)) __tact_dict_replace_slice_uint(cell d, int kl, slice k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~__tact_dict_delete_get(kl, k) : d~dict_replaceget?(kl, k, begin_cell().store_uint(v, vl).end_cell().begin_parse());
if (ok) {
    return (d, old~load_uint(vl));
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_slice_uint",
    "signature": "(cell, (int)) __tact_dict_replaceget_slice_uint(cell d, int kl, slice k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get_ref(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_cell",
    "signature": "cell __tact_dict_get_slice_cell(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min_ref(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_cell",
    "signature": "(slice, cell, int) __tact_dict_min_slice_cell(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_cell",
    "signature": "(slice, cell, int) __tact_dict_next_slice_cell(cell d, int kl, slice pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return __tact_dict_set_ref(d, kl, k, v);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
      "__tact_dict_set_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_cell",
    "signature": "(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, (ok));
} else {
    return __tact_dict_replace_ref(d, kl, k, v);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
      "__tact_dict_replace_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_slice_cell",
    "signature": "(cell, (int)) __tact_dict_replace_slice_cell(cell d, int kl, slice k, cell v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~__tact_dict_delete_get_ref(kl, k) : d~__tact_dict_replaceget_ref(kl, k, v);
if (ok) {
    return (d, old);
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete_get_ref",
      "__tact_dict_replaceget_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_slice_cell",
    "signature": "(cell, (cell)) __tact_dict_replaceget_slice_cell(cell d, int kl, slice k, cell v)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r~load_coins();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_coins",
    "signature": "int __tact_dict_get_slice_coins(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value~load_coins(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_coins",
    "signature": "(slice, int, int) __tact_dict_min_slice_coins(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_coins(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_coins",
    "signature": "(slice, int, int) __tact_dict_next_slice_coins(cell d, int kl, slice pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_coins(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_coins",
    "signature": "(cell, ()) __tact_dict_set_slice_coins(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, (ok));
} else {
    return dict_replace_builder?(d, kl, k, begin_cell().store_coins(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_slice_coins",
    "signature": "(cell, (int)) __tact_dict_replace_slice_coins(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~__tact_dict_delete_get(kl, k) : d~dict_replaceget?(kl, k, begin_cell().store_coins(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_coins());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_slice_coins",
    "signature": "(cell, (int)) __tact_dict_replaceget_slice_coins(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r~load_varint16();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_varint16",
    "signature": "int __tact_dict_get_slice_varint16(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value~load_varint16(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_varint16",
    "signature": "(slice, int, int) __tact_dict_min_slice_varint16(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_varint16(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_varint16",
    "signature": "(slice, int, int) __tact_dict_next_slice_varint16(cell d, int kl, slice pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_varint16(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_varint16",
    "signature": "(cell, ()) __tact_dict_set_slice_varint16(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, (ok));
} else {
    return dict_replace_builder?(d, kl, k, begin_cell().store_varint16(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_slice_varint16",
    "signature": "(cell, (int)) __tact_dict_replace_slice_varint16(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~__tact_dict_delete_get(kl, k) : d~dict_replaceget?(kl, k, begin_cell().store_varint16(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_varint16());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_slice_varint16",
    "signature": "(cell, (int)) __tact_dict_replaceget_slice_varint16(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r~load_varint32();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_varint32",
    "signature": "int __tact_dict_get_slice_varint32(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value~load_varint32(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_varint32",
    "signature": "(slice, int, int) __tact_dict_min_slice_varint32(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_varint32(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_varint32",
    "signature": "(slice, int, int) __tact_dict_next_slice_varint32(cell d, int kl, slice pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_varint32(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_varint32",
    "signature": "(cell, ()) __tact_dict_set_slice_varint32(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, (ok));
} else {
    return dict_replace_builder?(d, kl, k, begin_cell().store_varint32(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_slice_varint32",
    "signature": "(cell, (int)) __tact_dict_replace_slice_varint32(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~__tact_dict_delete_get(kl, k) : d~dict_replaceget?(kl, k, begin_cell().store_varint32(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_varint32());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_slice_varint32",
    "signature": "(cell, (int)) __tact_dict_replaceget_slice_varint32(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r~load_varuint16();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_varuint16",
    "signature": "int __tact_dict_get_slice_varuint16(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value~load_varuint16(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_varuint16",
    "signature": "(slice, int, int) __tact_dict_min_slice_varuint16(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_varuint16(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_varuint16",
    "signature": "(slice, int, int) __tact_dict_next_slice_varuint16(cell d, int kl, slice pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_varuint16(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_varuint16",
    "signature": "(cell, ()) __tact_dict_set_slice_varuint16(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, (ok));
} else {
    return dict_replace_builder?(d, kl, k, begin_cell().store_varuint16(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_slice_varuint16",
    "signature": "(cell, (int)) __tact_dict_replace_slice_varuint16(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~__tact_dict_delete_get(kl, k) : d~dict_replaceget?(kl, k, begin_cell().store_varuint16(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_varuint16());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_slice_varuint16",
    "signature": "(cell, (int)) __tact_dict_replaceget_slice_varuint16(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r~load_varuint32();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_varuint32",
    "signature": "int __tact_dict_get_slice_varuint32(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value~load_varuint32(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_varuint32",
    "signature": "(slice, int, int) __tact_dict_min_slice_varuint32(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_varuint32(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_varuint32",
    "signature": "(slice, int, int) __tact_dict_next_slice_varuint32(cell d, int kl, slice pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_varuint32(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_varuint32",
    "signature": "(cell, ()) __tact_dict_set_slice_varuint32(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, (ok));
} else {
    return dict_replace_builder?(d, kl, k, begin_cell().store_varuint32(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_slice_varuint32",
    "signature": "(cell, (int)) __tact_dict_replace_slice_varuint32(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~__tact_dict_delete_get(kl, k) : d~dict_replaceget?(kl, k, begin_cell().store_varuint32(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_varuint32());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_slice_varuint32",
    "signature": "(cell, (int)) __tact_dict_replaceget_slice_varuint32(cell d, int kl, slice k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_slice",
    "signature": "slice __tact_dict_get_uint_slice(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_slice",
    "signature": "(int, slice, int) __tact_dict_min_uint_slice(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_slice",
    "signature": "(int, slice, int) __tact_dict_next_uint_slice(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_slice",
    "signature": "(cell, ()) __tact_dict_set_uint_slice(cell d, int kl, int k, slice v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return udict_replace?(d, kl, k, v);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_uint_slice",
    "signature": "(cell, (int)) __tact_dict_replace_uint_slice(cell d, int kl, int k, slice v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~udict_delete_get?(kl, k) : d~udict_replaceget?(kl, k, v);
if (ok) {
    return (d, old);
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_uint_slice",
    "signature": "(cell, (slice)) __tact_dict_replaceget_uint_slice(cell d, int kl, int k, slice v)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r~load_int(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_int",
    "signature": "int __tact_dict_get_uint_int(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_int",
    "signature": "(int, int, int) __tact_dict_min_uint_int(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_int",
    "signature": "(int, int, int) __tact_dict_next_uint_int(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_int",
    "signature": "(cell, ()) __tact_dict_set_uint_int(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return udict_replace_builder?(d, kl, k, begin_cell().store_int(v, vl));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_uint_int",
    "signature": "(cell, (int)) __tact_dict_replace_uint_int(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~udict_delete_get?(kl, k) : d~udict_replaceget?(kl, k, begin_cell().store_int(v, vl).end_cell().begin_parse());
if (ok) {
    return (d, old~load_int(vl));
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_uint_int",
    "signature": "(cell, (int)) __tact_dict_replaceget_uint_int(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r~load_uint(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_uint",
    "signature": "int __tact_dict_get_uint_uint(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_uint",
    "signature": "(int, int, int) __tact_dict_min_uint_uint(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_uint",
    "signature": "(int, int, int) __tact_dict_next_uint_uint(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_uint",
    "signature": "(cell, ()) __tact_dict_set_uint_uint(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return udict_replace_builder?(d, kl, k, begin_cell().store_uint(v, vl));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_uint_uint",
    "signature": "(cell, (int)) __tact_dict_replace_uint_uint(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~udict_delete_get?(kl, k) : d~udict_replaceget?(kl, k, begin_cell().store_uint(v, vl).end_cell().begin_parse());
if (ok) {
    return (d, old~load_uint(vl));
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_uint_uint",
    "signature": "(cell, (int)) __tact_dict_replaceget_uint_uint(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get_ref?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_cell",
    "signature": "cell __tact_dict_get_uint_cell(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min_ref?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_cell",
    "signature": "(int, cell, int) __tact_dict_min_uint_cell(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_cell",
    "signature": "(int, cell, int) __tact_dict_next_uint_cell(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_ref(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_cell",
    "signature": "(cell, ()) __tact_dict_set_uint_cell(cell d, int kl, int k, cell v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return udict_replace_ref?(d, kl, k, v);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_uint_cell",
    "signature": "(cell, (int)) __tact_dict_replace_uint_cell(cell d, int kl, int k, cell v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~udict_delete_get_ref?(kl, k) : d~udict_replaceget_ref?(kl, k, v);
if (ok) {
    return (d, old);
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_uint_cell",
    "signature": "(cell, (cell)) __tact_dict_replaceget_uint_cell(cell d, int kl, int k, cell v)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r~load_coins();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_coins",
    "signature": "int __tact_dict_get_uint_coins(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value~load_coins(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_coins",
    "signature": "(int, int, int) __tact_dict_min_uint_coins(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_coins(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_coins",
    "signature": "(int, int, int) __tact_dict_next_uint_coins(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_builder(d, kl, k, begin_cell().store_coins(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_coins",
    "signature": "(cell, ()) __tact_dict_set_uint_coins(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return udict_replace_builder?(d, kl, k, begin_cell().store_coins(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_uint_coins",
    "signature": "(cell, (int)) __tact_dict_replace_uint_coins(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~udict_delete_get?(kl, k) : d~udict_replaceget?(kl, k, begin_cell().store_coins(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_coins());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_uint_coins",
    "signature": "(cell, (int)) __tact_dict_replaceget_uint_coins(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r~load_varint16();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_varint16",
    "signature": "int __tact_dict_get_uint_varint16(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value~load_varint16(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_varint16",
    "signature": "(int, int, int) __tact_dict_min_uint_varint16(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_varint16(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_varint16",
    "signature": "(int, int, int) __tact_dict_next_uint_varint16(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_builder(d, kl, k, begin_cell().store_varint16(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_varint16",
    "signature": "(cell, ()) __tact_dict_set_uint_varint16(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return udict_replace_builder?(d, kl, k, begin_cell().store_varint16(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_uint_varint16",
    "signature": "(cell, (int)) __tact_dict_replace_uint_varint16(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~udict_delete_get?(kl, k) : d~udict_replaceget?(kl, k, begin_cell().store_varint16(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_varint16());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_uint_varint16",
    "signature": "(cell, (int)) __tact_dict_replaceget_uint_varint16(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r~load_varint32();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_varint32",
    "signature": "int __tact_dict_get_uint_varint32(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value~load_varint32(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_varint32",
    "signature": "(int, int, int) __tact_dict_min_uint_varint32(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_varint32(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_varint32",
    "signature": "(int, int, int) __tact_dict_next_uint_varint32(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_builder(d, kl, k, begin_cell().store_varint32(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_varint32",
    "signature": "(cell, ()) __tact_dict_set_uint_varint32(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return udict_replace_builder?(d, kl, k, begin_cell().store_varint32(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_uint_varint32",
    "signature": "(cell, (int)) __tact_dict_replace_uint_varint32(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~udict_delete_get?(kl, k) : d~udict_replaceget?(kl, k, begin_cell().store_varint32(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_varint32());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_uint_varint32",
    "signature": "(cell, (int)) __tact_dict_replaceget_uint_varint32(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r~load_varuint16();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_varuint16",
    "signature": "int __tact_dict_get_uint_varuint16(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value~load_varuint16(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_varuint16",
    "signature": "(int, int, int) __tact_dict_min_uint_varuint16(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_varuint16(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_varuint16",
    "signature": "(int, int, int) __tact_dict_next_uint_varuint16(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_builder(d, kl, k, begin_cell().store_varuint16(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_varuint16",
    "signature": "(cell, ()) __tact_dict_set_uint_varuint16(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return udict_replace_builder?(d, kl, k, begin_cell().store_varuint16(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_uint_varuint16",
    "signature": "(cell, (int)) __tact_dict_replace_uint_varuint16(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~udict_delete_get?(kl, k) : d~udict_replaceget?(kl, k, begin_cell().store_varuint16(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_varuint16());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_uint_varuint16",
    "signature": "(cell, (int)) __tact_dict_replaceget_uint_varuint16(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r~load_varuint32();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_varuint32",
    "signature": "int __tact_dict_get_uint_varuint32(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value~load_varuint32(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_varuint32",
    "signature": "(int, int, int) __tact_dict_min_uint_varuint32(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_varuint32(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_varuint32",
    "signature": "(int, int, int) __tact_dict_next_uint_varuint32(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_builder(d, kl, k, begin_cell().store_varuint32(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_varuint32",
    "signature": "(cell, ()) __tact_dict_set_uint_varuint32(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return udict_replace_builder?(d, kl, k, begin_cell().store_varuint32(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_uint_varuint32",
    "signature": "(cell, (int)) __tact_dict_replace_uint_varuint32(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~udict_delete_get?(kl, k) : d~udict_replaceget?(kl, k, begin_cell().store_varuint32(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_varuint32());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_uint_varuint32",
    "signature": "(cell, (int)) __tact_dict_replaceget_uint_varuint32(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_slice",
    "signature": "slice __tact_dict_get_int_slice(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_slice",
    "signature": "(int, slice, int) __tact_dict_min_int_slice(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_slice",
    "signature": "(int, slice, int) __tact_dict_next_int_slice(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_slice",
    "signature": "(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return idict_replace?(d, kl, k, v);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_int_slice",
    "signature": "(cell, (int)) __tact_dict_replace_int_slice(cell d, int kl, int k, slice v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~idict_delete_get?(kl, k) : d~idict_replaceget?(kl, k, v);
if (ok) {
    return (d, old);
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_int_slice",
    "signature": "(cell, (slice)) __tact_dict_replaceget_int_slice(cell d, int kl, int k, slice v)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r~load_int(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_int",
    "signature": "int __tact_dict_get_int_int(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_int",
    "signature": "(int, int, int) __tact_dict_min_int_int(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_int",
    "signature": "(int, int, int) __tact_dict_next_int_int(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_int",
    "signature": "(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return idict_replace_builder?(d, kl, k, begin_cell().store_int(v, vl));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_int_int",
    "signature": "(cell, (int)) __tact_dict_replace_int_int(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~idict_delete_get?(kl, k) : d~idict_replaceget?(kl, k, begin_cell().store_int(v, vl).end_cell().begin_parse());
if (ok) {
    return (d, old~load_int(vl));
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_int_int",
    "signature": "(cell, (int)) __tact_dict_replaceget_int_int(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r~load_uint(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_uint",
    "signature": "int __tact_dict_get_int_uint(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_uint",
    "signature": "(int, int, int) __tact_dict_min_int_uint(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_uint",
    "signature": "(int, int, int) __tact_dict_next_int_uint(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_uint",
    "signature": "(cell, ()) __tact_dict_set_int_uint(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return idict_replace_builder?(d, kl, k, begin_cell().store_uint(v, vl));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_int_uint",
    "signature": "(cell, (int)) __tact_dict_replace_int_uint(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~idict_delete_get?(kl, k) : d~idict_replaceget?(kl, k, begin_cell().store_uint(v, vl).end_cell().begin_parse());
if (ok) {
    return (d, old~load_uint(vl));
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_int_uint",
    "signature": "(cell, (int)) __tact_dict_replaceget_int_uint(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get_ref?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_cell",
    "signature": "cell __tact_dict_get_int_cell(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min_ref?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_cell",
    "signature": "(int, cell, int) __tact_dict_min_int_cell(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_cell",
    "signature": "(int, cell, int) __tact_dict_next_int_cell(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_ref(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_cell",
    "signature": "(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return idict_replace_ref?(d, kl, k, v);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_int_cell",
    "signature": "(cell, (int)) __tact_dict_replace_int_cell(cell d, int kl, int k, cell v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~idict_delete_get_ref?(kl, k) : d~idict_replaceget_ref?(kl, k, v);
if (ok) {
    return (d, old);
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_int_cell",
    "signature": "(cell, (cell)) __tact_dict_replaceget_int_cell(cell d, int kl, int k, cell v)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r~load_coins();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_coins",
    "signature": "int __tact_dict_get_int_coins(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value~load_coins(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_coins",
    "signature": "(int, int, int) __tact_dict_min_int_coins(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_coins(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_coins",
    "signature": "(int, int, int) __tact_dict_next_int_coins(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_builder(d, kl, k, begin_cell().store_coins(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_coins",
    "signature": "(cell, ()) __tact_dict_set_int_coins(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return idict_replace_builder?(d, kl, k, begin_cell().store_coins(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_int_coins",
    "signature": "(cell, (int)) __tact_dict_replace_int_coins(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~idict_delete_get?(kl, k) : d~idict_replaceget?(kl, k, begin_cell().store_coins(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_coins());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_int_coins",
    "signature": "(cell, (int)) __tact_dict_replaceget_int_coins(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r~load_varint16();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_varint16",
    "signature": "int __tact_dict_get_int_varint16(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value~load_varint16(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_varint16",
    "signature": "(int, int, int) __tact_dict_min_int_varint16(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_varint16(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_varint16",
    "signature": "(int, int, int) __tact_dict_next_int_varint16(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_builder(d, kl, k, begin_cell().store_varint16(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_varint16",
    "signature": "(cell, ()) __tact_dict_set_int_varint16(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return idict_replace_builder?(d, kl, k, begin_cell().store_varint16(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_int_varint16",
    "signature": "(cell, (int)) __tact_dict_replace_int_varint16(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~idict_delete_get?(kl, k) : d~idict_replaceget?(kl, k, begin_cell().store_varint16(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_varint16());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_int_varint16",
    "signature": "(cell, (int)) __tact_dict_replaceget_int_varint16(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r~load_varint32();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_varint32",
    "signature": "int __tact_dict_get_int_varint32(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value~load_varint32(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_varint32",
    "signature": "(int, int, int) __tact_dict_min_int_varint32(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_varint32(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_varint32",
    "signature": "(int, int, int) __tact_dict_next_int_varint32(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_builder(d, kl, k, begin_cell().store_varint32(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_varint32",
    "signature": "(cell, ()) __tact_dict_set_int_varint32(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return idict_replace_builder?(d, kl, k, begin_cell().store_varint32(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_int_varint32",
    "signature": "(cell, (int)) __tact_dict_replace_int_varint32(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~idict_delete_get?(kl, k) : d~idict_replaceget?(kl, k, begin_cell().store_varint32(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_varint32());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_int_varint32",
    "signature": "(cell, (int)) __tact_dict_replaceget_int_varint32(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r~load_varuint16();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_varuint16",
    "signature": "int __tact_dict_get_int_varuint16(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value~load_varuint16(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_varuint16",
    "signature": "(int, int, int) __tact_dict_min_int_varuint16(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_varuint16(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_varuint16",
    "signature": "(int, int, int) __tact_dict_next_int_varuint16(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_builder(d, kl, k, begin_cell().store_varuint16(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_varuint16",
    "signature": "(cell, ()) __tact_dict_set_int_varuint16(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return idict_replace_builder?(d, kl, k, begin_cell().store_varuint16(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_int_varuint16",
    "signature": "(cell, (int)) __tact_dict_replace_int_varuint16(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~idict_delete_get?(kl, k) : d~idict_replaceget?(kl, k, begin_cell().store_varuint16(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_varuint16());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_int_varuint16",
    "signature": "(cell, (int)) __tact_dict_replaceget_int_varuint16(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r~load_varuint32();
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_varuint32",
    "signature": "int __tact_dict_get_int_varuint32(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value~load_varuint32(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_varuint32",
    "signature": "(int, int, int) __tact_dict_min_int_varuint32(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_varuint32(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_varuint32",
    "signature": "(int, int, int) __tact_dict_next_int_varuint32(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_builder(d, kl, k, begin_cell().store_varuint32(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_varuint32",
    "signature": "(cell, ()) __tact_dict_set_int_varuint32(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, (ok));
} else {
    return idict_replace_builder?(d, kl, k, begin_cell().store_varuint32(v));
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replace_int_varuint32",
    "signature": "(cell, (int)) __tact_dict_replace_int_varuint32(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (old, ok) = null?(v) ? d~idict_delete_get?(kl, k) : d~idict_replaceget?(kl, k, begin_cell().store_varuint32(v).end_cell().begin_parse());
if (ok) {
    return (d, old~load_varuint32());
} else {
    return (d, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_replaceget_int_varuint32",
    "signature": "(cell, (int)) __tact_dict_replaceget_int_varuint32(cell d, int kl, int k, int v)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
return ok;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_exists_slice",
    "signature": "int __tact_dict_exists_slice(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
return ok;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_exists_uint",
    "signature": "int __tact_dict_exists_uint(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
return ok;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_exists_int",
    "signature": "int __tact_dict_exists_int(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "NOP",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": null,
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "$Int$_fun_withoutArgument",
    "signature": "(int, ()) $Int$_fun_withoutArgument(int $self)",
  },
  {
    "code": {
      "code": "return $self~$Int$_fun_withoutArgument();",
      "kind": "generic",
    },
    "comment": null,
    "context": null,
    "depends": Set {
      "$Int$_fun_withoutArgument",
    },
    "flags": Set {
      "impure",
    },
    "name": "$Int$_fun_withoutArgument$not_mut",
    "signature": "() $Int$_fun_withoutArgument$not_mut(int $self)",
  },
  {
    "code": {
      "code": "DROP",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": null,
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "$Int$_fun_withArgument",
    "signature": "(int, ()) $Int$_fun_withArgument(int $self, int $arg)",
  },
  {
    "code": {
      "code": "return $self~$Int$_fun_withArgument($arg);",
      "kind": "generic",
    },
    "comment": null,
    "context": null,
    "depends": Set {
      "$Int$_fun_withArgument",
    },
    "flags": Set {
      "impure",
    },
    "name": "$Int$_fun_withArgument$not_mut",
    "signature": "() $Int$_fun_withArgument$not_mut(int $self, int $arg)",
  },
  {
    "code": {
      "code": "DROP DROP",
      "kind": "asm",
      "shuffle": "",
    },
    "comment": null,
    "context": null,
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "$Int$_fun_withSeveralArguments",
    "signature": "(int, ()) $Int$_fun_withSeveralArguments(int $self, int $arg, int $arg2)",
  },
  {
    "code": {
      "code": "return $self~$Int$_fun_withSeveralArguments($arg, $arg2);",
      "kind": "generic",
    },
    "comment": null,
    "context": null,
    "depends": Set {
      "$Int$_fun_withSeveralArguments",
    },
    "flags": Set {
      "impure",
    },
    "name": "$Int$_fun_withSeveralArguments$not_mut",
    "signature": "() $Int$_fun_withSeveralArguments$not_mut(int $self, int $arg, int $arg2)",
  },
]
`;
