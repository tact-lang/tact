// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`writeSerialization should write serializer for A 1`] = `
[
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_set",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_nop",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_str_to_slice",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_slice_to_str",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_address_to_slice",
    "signature": "<unknown>",
  },
  {
    "code": {
      "code": "throw_unless(136, address.slice_bits() == 267);
var h = address.preload_uint(11);
throw_if(137, h == 1279);
throw_unless(136, h == 1024);
return address;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
      "inline",
    },
    "name": "__tact_verify_address",
    "signature": "slice __tact_verify_address(slice address)",
  },
  {
    "code": {
      "code": "asm( -> 1 0) "1 LDI"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_load_bool",
    "signature": "(slice, int) __tact_load_bool(slice s)",
  },
  {
    "code": {
      "code": "slice raw = cs~load_msg_addr();
return (cs, __tact_verify_address(raw));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_verify_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_load_address",
    "signature": "(slice, slice) __tact_load_address(slice cs)",
  },
  {
    "code": {
      "code": "if (cs.preload_uint(2) != 0) {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
} else {
    cs~skip_bits(2);
    return (cs, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_verify_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_load_address_opt",
    "signature": "(slice, slice) __tact_load_address_opt(slice cs)",
  },
  {
    "code": {
      "code": "return b.store_slice(__tact_verify_address(address));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_verify_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_store_address",
    "signature": "builder __tact_store_address(builder b, slice address)",
  },
  {
    "code": {
      "code": "if (null?(address)) {
    b = b.store_uint(0, 2);
    return b;
} else {
    return __tact_store_address(b, address);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_store_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_store_address_opt",
    "signature": "builder __tact_store_address_opt(builder b, slice address)",
  },
  {
    "code": {
      "code": "var b = begin_cell();
b = b.store_uint(2, 2);
b = b.store_uint(0, 1);
b = b.store_int(chain, 8);
b = b.store_uint(hash, 256);
var addr = b.end_cell().begin_parse();
return __tact_verify_address(addr);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_verify_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_create_address",
    "signature": "slice __tact_create_address(int chain, int hash)",
  },
  {
    "code": {
      "code": "var b = begin_cell();
b = b.store_uint(0, 2);
b = b.store_uint(3, 2);
b = b.store_uint(0, 1);
b = b.store_ref(code);
b = b.store_ref(data);
var hash = cell_hash(b.end_cell());
return __tact_create_address(chain, hash);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_create_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_compute_contract_address",
    "signature": "slice __tact_compute_contract_address(int chain, cell code, cell data)",
  },
  {
    "code": {
      "code": "return pair_first(get_balance());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_my_balance",
    "signature": "int __tact_my_balance()",
  },
  {
    "code": {
      "code": "throw_if(128, null?(x)); return x;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
      "inline",
    },
    "name": "__tact_not_null",
    "signature": "forall X -> X __tact_not_null(X x)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTDEL"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete",
    "signature": "(cell, int) __tact_dict_delete(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTIDEL"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete_int",
    "signature": "(cell, int) __tact_dict_delete_int(cell dict, int key_len, int index)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTUDEL"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete_uint",
    "signature": "(cell, int) __tact_dict_delete_uint(cell dict, int key_len, int index)",
  },
  {
    "code": {
      "code": "asm(value index dict key_len) "DICTSETREF"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_set_ref",
    "signature": "((cell), ()) __tact_dict_set_ref(cell dict, int key_len, slice index, cell value)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_get",
    "signature": "(slice, int) __tact_dict_get(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTGETREF" "NULLSWAPIFNOT"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_get_ref",
    "signature": "(cell, int) __tact_dict_get_ref(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "asm(dict key_len -> 1 0 2) "DICTMIN" "NULLSWAPIFNOT2"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_min",
    "signature": "(slice, slice, int) __tact_dict_min(cell dict, int key_len)",
  },
  {
    "code": {
      "code": "asm(dict key_len -> 1 0 2) "DICTMINREF" "NULLSWAPIFNOT2"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_min_ref",
    "signature": "(slice, cell, int) __tact_dict_min_ref(cell dict, int key_len)",
  },
  {
    "code": {
      "code": "asm(pivot dict key_len -> 1 0 2) "DICTGETNEXT" "NULLSWAPIFNOT2"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_next",
    "signature": "(slice, slice, int) __tact_dict_next(cell dict, int key_len, slice pivot)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(dict, key_len, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {},
    "name": "__tact_dict_next_ref",
    "signature": "(slice, cell, int) __tact_dict_next_ref(cell dict, int key_len, slice pivot)",
  },
  {
    "code": {
      "code": "asm "STRDUMP" "DROP" "STRDUMP" "DROP" "s0 DUMP" "DROP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug",
    "signature": "forall X -> () __tact_debug(X value, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "asm "STRDUMP" "DROP" "STRDUMP" "DROP" "STRDUMP" "DROP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_str",
    "signature": "() __tact_debug_str(slice value, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "if (value) {
    __tact_debug_str("true", debug_print_1, debug_print_2);
} else {
    __tact_debug_str("false", debug_print_1, debug_print_2);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_debug_str",
    },
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_bool",
    "signature": "() __tact_debug_bool(int value, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "asm "SDSUBSTR"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_preload_offset",
    "signature": "(slice) __tact_preload_offset(slice s, int offset, int bits)",
  },
  {
    "code": {
      "code": "slice new_data = begin_cell()
    .store_slice(data)
    .store_slice("0000"s)
.end_cell().begin_parse();
int reg = 0;
while (~ new_data.slice_data_empty?()) {
    int byte = new_data~load_uint(8);
    int mask = 0x80;
    while (mask > 0) {
        reg <<= 1;
        if (byte & mask) {
            reg += 1;
        }
        mask >>= 1;
        if (reg > 0xffff) {
            reg &= 0xffff;
            reg ^= 0x1021;
        }
    }
}
(int q, int r) = divmod(reg, 256);
return begin_cell()
    .store_uint(q, 8)
    .store_uint(r, 8)
.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline_ref",
    },
    "name": "__tact_crc16",
    "signature": "(slice) __tact_crc16(slice data)",
  },
  {
    "code": {
      "code": "slice chars = "4142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A303132333435363738392D5F"s;
builder res = begin_cell();

while (data.slice_bits() >= 24) {
    (int bs1, int bs2, int bs3) = (data~load_uint(8), data~load_uint(8), data~load_uint(8));

    int n = (bs1 << 16) | (bs2 << 8) | bs3;

    res = res
        .store_slice(__tact_preload_offset(chars, ((n >> 18) & 63) * 8, 8))
        .store_slice(__tact_preload_offset(chars, ((n >> 12) & 63) * 8, 8))
        .store_slice(__tact_preload_offset(chars, ((n >>  6) & 63) * 8, 8))
        .store_slice(__tact_preload_offset(chars, ((n      ) & 63) * 8, 8));
}

return res.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_preload_offset",
    },
    "flags": Set {},
    "name": "__tact_base64_encode",
    "signature": "(slice) __tact_base64_encode(slice data)",
  },
  {
    "code": {
      "code": "(int wc, int hash) = address.parse_std_addr();

slice user_friendly_address = begin_cell()
    .store_slice("11"s)
    .store_uint((wc + 0x100) % 0x100, 8)
    .store_uint(hash, 256)
.end_cell().begin_parse();

slice checksum = __tact_crc16(user_friendly_address);
slice user_friendly_address_with_checksum = begin_cell()
    .store_slice(user_friendly_address)
    .store_slice(checksum)
.end_cell().begin_parse();

return __tact_base64_encode(user_friendly_address_with_checksum);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_crc16",
      "__tact_base64_encode",
    },
    "flags": Set {},
    "name": "__tact_address_to_user_friendly",
    "signature": "(slice) __tact_address_to_user_friendly(slice address)",
  },
  {
    "code": {
      "code": "__tact_debug_str(__tact_address_to_user_friendly(address), debug_print_1, debug_print_2);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_debug_str",
      "__tact_address_to_user_friendly",
    },
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_address",
    "signature": "() __tact_debug_address(slice address, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "asm "STRDUMP" "DROP" "STRDUMP" "DROP" "DUMPSTK"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_stack",
    "signature": "() __tact_debug_stack(slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "return __tact_context;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_context_get",
    "signature": "(int, slice, int, slice) __tact_context_get()",
  },
  {
    "code": {
      "code": "return __tact_context_sender;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_context_get_sender",
    "signature": "slice __tact_context_get_sender()",
  },
  {
    "code": {
      "code": "if (null?(__tact_randomized)) {
    randomize_lt();
    __tact_randomized = true;
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
      "inline",
    },
    "name": "__tact_prepare_random",
    "signature": "() __tact_prepare_random()",
  },
  {
    "code": {
      "code": "return b.store_int(v, 1);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_store_bool",
    "signature": "builder __tact_store_bool(builder b, int v)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_to_tuple",
    "signature": "forall X -> tuple __tact_to_tuple(X x)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_from_tuple",
    "signature": "forall X -> X __tact_from_tuple(tuple x)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_int",
    "signature": "(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r~load_int(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_int",
    "signature": "int __tact_dict_get_int_int(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_int",
    "signature": "(int, int, int) __tact_dict_min_int_int(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_int",
    "signature": "(int, int, int) __tact_dict_next_int_int(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_uint",
    "signature": "(cell, ()) __tact_dict_set_int_uint(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r~load_uint(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_uint",
    "signature": "int __tact_dict_get_int_uint(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_uint",
    "signature": "(int, int, int) __tact_dict_min_int_uint(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_uint",
    "signature": "(int, int, int) __tact_dict_next_int_uint(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_int",
    "signature": "(cell, ()) __tact_dict_set_uint_int(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r~load_int(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_int",
    "signature": "int __tact_dict_get_uint_int(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_int",
    "signature": "(int, int, int) __tact_dict_min_uint_int(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_int",
    "signature": "(int, int, int) __tact_dict_next_uint_int(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_uint",
    "signature": "(cell, ()) __tact_dict_set_uint_uint(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r~load_uint(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_uint",
    "signature": "int __tact_dict_get_uint_uint(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_uint",
    "signature": "(int, int, int) __tact_dict_min_uint_uint(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_uint",
    "signature": "(int, int, int) __tact_dict_next_uint_uint(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_ref(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_cell",
    "signature": "(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get_ref?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_cell",
    "signature": "cell __tact_dict_get_int_cell(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min_ref?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_cell",
    "signature": "(int, cell, int) __tact_dict_min_int_cell(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_cell",
    "signature": "(int, cell, int) __tact_dict_next_int_cell(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_ref(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_cell",
    "signature": "(cell, ()) __tact_dict_set_uint_cell(cell d, int kl, int k, cell v)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get_ref?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_cell",
    "signature": "cell __tact_dict_get_uint_cell(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min_ref?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_cell",
    "signature": "(int, cell, int) __tact_dict_min_uint_cell(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_cell",
    "signature": "(int, cell, int) __tact_dict_next_uint_cell(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_slice",
    "signature": "(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_slice",
    "signature": "slice __tact_dict_get_int_slice(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_slice",
    "signature": "(int, slice, int) __tact_dict_min_int_slice(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_slice",
    "signature": "(int, slice, int) __tact_dict_next_int_slice(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_slice",
    "signature": "(cell, ()) __tact_dict_set_uint_slice(cell d, int kl, int k, slice v)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_slice",
    "signature": "slice __tact_dict_get_uint_slice(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_slice",
    "signature": "(int, slice, int) __tact_dict_min_uint_slice(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_slice",
    "signature": "(int, slice, int) __tact_dict_next_uint_slice(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_int",
    "signature": "(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r~load_int(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_int",
    "signature": "int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_int",
    "signature": "(slice, int, int) __tact_dict_min_slice_int(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_int",
    "signature": "(slice, int, int) __tact_dict_next_slice_int(cell d, int kl, slice pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_uint",
    "signature": "(cell, ()) __tact_dict_set_slice_uint(cell d, int kl, slice k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r~load_uint(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_uint",
    "signature": "int __tact_dict_get_slice_uint(cell d, int kl, slice k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_uint",
    "signature": "(slice, int, int) __tact_dict_min_slice_uint(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_uint",
    "signature": "(slice, int, int) __tact_dict_next_slice_uint(cell d, int kl, slice pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return __tact_dict_set_ref(d, kl, k, v);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
      "__tact_dict_set_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_cell",
    "signature": "(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get_ref(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_cell",
    "signature": "cell __tact_dict_get_slice_cell(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min_ref(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_cell",
    "signature": "(slice, cell, int) __tact_dict_min_slice_cell(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_cell",
    "signature": "(slice, cell, int) __tact_dict_next_slice_cell(cell d, int kl, slice pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_slice(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_slice",
    "signature": "(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_slice",
    "signature": "slice __tact_dict_get_slice_slice(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_slice",
    "signature": "(slice, slice, int) __tact_dict_min_slice_slice(cell d, int kl)",
  },
  {
    "code": {
      "code": "return __tact_dict_next(d, kl, pivot);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_slice",
    "signature": "(slice, slice, int) __tact_dict_next_slice_slice(cell d, int kl, slice pivot)",
  },
  {
    "code": {
      "code": "return equal_slice_bits(a, b);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_bits",
    "signature": "int __tact_slice_eq_bits(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (equal_slice_bits(a, b));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_bits_nullable_one",
    "signature": "int __tact_slice_eq_bits_nullable_one(slice a, slice b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( equal_slice_bits(a, b) ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_bits_nullable",
    "signature": "int __tact_slice_eq_bits_nullable(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (a == b);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_eq_nullable_one",
    "signature": "int __tact_int_eq_nullable_one(int a, int b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (true) : (a != b);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_neq_nullable_one",
    "signature": "int __tact_int_neq_nullable_one(int a, int b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a == b ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_eq_nullable",
    "signature": "int __tact_int_eq_nullable(int a, int b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a != b ) : ( true ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_neq_nullable",
    "signature": "int __tact_int_neq_nullable(int a, int b)",
  },
  {
    "code": {
      "code": "return (a.cell_hash() ==  b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_eq",
    "signature": "int __tact_cell_eq(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (a.cell_hash() !=  b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_neq",
    "signature": "int __tact_cell_neq(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (a.cell_hash() == b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_eq_nullable_one",
    "signature": "int __tact_cell_eq_nullable_one(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (true) : (a.cell_hash() != b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_neq_nullable_one",
    "signature": "int __tact_cell_neq_nullable_one(cell a, cell b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.cell_hash() == b.cell_hash() ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_eq_nullable",
    "signature": "int __tact_cell_eq_nullable(cell a, cell b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.cell_hash() != b.cell_hash() ) : ( true ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_neq_nullable",
    "signature": "int __tact_cell_neq_nullable(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (a.slice_hash() ==  b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq",
    "signature": "int __tact_slice_eq(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (a.slice_hash() !=  b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_neq",
    "signature": "int __tact_slice_neq(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (a.slice_hash() == b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_nullable_one",
    "signature": "int __tact_slice_eq_nullable_one(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (true) : (a.slice_hash() != b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_neq_nullable_one",
    "signature": "int __tact_slice_neq_nullable_one(slice a, slice b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.slice_hash() == b.slice_hash() ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_nullable",
    "signature": "int __tact_slice_eq_nullable(slice a, slice b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.slice_hash() != b.slice_hash() ) : ( true ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_neq_nullable",
    "signature": "int __tact_slice_neq_nullable(slice a, slice b)",
  },
  {
    "code": {
      "code": "return udict_set_ref(dict, 16, id, code);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_code",
    "signature": "cell __tact_dict_set_code(cell dict, int id, cell code)",
  },
  {
    "code": {
      "code": "var (data, ok) = udict_get_ref?(dict, 16, id);
throw_unless(135, ok);
return data;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_code",
    "signature": "cell __tact_dict_get_code(cell dict, int id)",
  },
  {
    "code": {
      "code": "asm "NIL"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_0",
    "signature": "tuple __tact_tuple_create_0()",
  },
  {
    "code": {
      "code": "return ();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_tuple_destroy_0",
    "signature": "() __tact_tuple_destroy_0()",
  },
  {
    "code": {
      "code": "asm "1 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_1",
    "signature": "forall X0 -> tuple __tact_tuple_create_1((X0) v)",
  },
  {
    "code": {
      "code": "asm "1 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_1",
    "signature": "forall X0 -> (X0) __tact_tuple_destroy_1(tuple v)",
  },
  {
    "code": {
      "code": "asm "2 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_2",
    "signature": "forall X0, X1 -> tuple __tact_tuple_create_2((X0, X1) v)",
  },
  {
    "code": {
      "code": "asm "2 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_2",
    "signature": "forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v)",
  },
  {
    "code": {
      "code": "asm "3 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_3",
    "signature": "forall X0, X1, X2 -> tuple __tact_tuple_create_3((X0, X1, X2) v)",
  },
  {
    "code": {
      "code": "asm "3 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_3",
    "signature": "forall X0, X1, X2 -> (X0, X1, X2) __tact_tuple_destroy_3(tuple v)",
  },
  {
    "code": {
      "code": "asm "4 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_4",
    "signature": "forall X0, X1, X2, X3 -> tuple __tact_tuple_create_4((X0, X1, X2, X3) v)",
  },
  {
    "code": {
      "code": "asm "4 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_4",
    "signature": "forall X0, X1, X2, X3 -> (X0, X1, X2, X3) __tact_tuple_destroy_4(tuple v)",
  },
  {
    "code": {
      "code": "asm "5 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_5",
    "signature": "forall X0, X1, X2, X3, X4 -> tuple __tact_tuple_create_5((X0, X1, X2, X3, X4) v)",
  },
  {
    "code": {
      "code": "asm "5 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_5",
    "signature": "forall X0, X1, X2, X3, X4 -> (X0, X1, X2, X3, X4) __tact_tuple_destroy_5(tuple v)",
  },
  {
    "code": {
      "code": "asm "6 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_6",
    "signature": "forall X0, X1, X2, X3, X4, X5 -> tuple __tact_tuple_create_6((X0, X1, X2, X3, X4, X5) v)",
  },
  {
    "code": {
      "code": "asm "6 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_6",
    "signature": "forall X0, X1, X2, X3, X4, X5 -> (X0, X1, X2, X3, X4, X5) __tact_tuple_destroy_6(tuple v)",
  },
  {
    "code": {
      "code": "asm "7 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_7",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6 -> tuple __tact_tuple_create_7((X0, X1, X2, X3, X4, X5, X6) v)",
  },
  {
    "code": {
      "code": "asm "7 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_7",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6 -> (X0, X1, X2, X3, X4, X5, X6) __tact_tuple_destroy_7(tuple v)",
  },
  {
    "code": {
      "code": "asm "8 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_8",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7 -> tuple __tact_tuple_create_8((X0, X1, X2, X3, X4, X5, X6, X7) v)",
  },
  {
    "code": {
      "code": "asm "8 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_8",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7 -> (X0, X1, X2, X3, X4, X5, X6, X7) __tact_tuple_destroy_8(tuple v)",
  },
  {
    "code": {
      "code": "asm "9 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_9",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8 -> tuple __tact_tuple_create_9((X0, X1, X2, X3, X4, X5, X6, X7, X8) v)",
  },
  {
    "code": {
      "code": "asm "9 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_9",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8) __tact_tuple_destroy_9(tuple v)",
  },
  {
    "code": {
      "code": "asm "10 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_10",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9 -> tuple __tact_tuple_create_10((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) v)",
  },
  {
    "code": {
      "code": "asm "10 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_10",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) __tact_tuple_destroy_10(tuple v)",
  },
  {
    "code": {
      "code": "asm "11 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_11",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 -> tuple __tact_tuple_create_11((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) v)",
  },
  {
    "code": {
      "code": "asm "11 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_11",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) __tact_tuple_destroy_11(tuple v)",
  },
  {
    "code": {
      "code": "asm "12 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_12",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11 -> tuple __tact_tuple_create_12((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) v)",
  },
  {
    "code": {
      "code": "asm "12 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_12",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) __tact_tuple_destroy_12(tuple v)",
  },
  {
    "code": {
      "code": "asm "13 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_13",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12 -> tuple __tact_tuple_create_13((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) v)",
  },
  {
    "code": {
      "code": "asm "13 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_13",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) __tact_tuple_destroy_13(tuple v)",
  },
  {
    "code": {
      "code": "asm "14 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_14",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13 -> tuple __tact_tuple_create_14((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) v)",
  },
  {
    "code": {
      "code": "asm "14 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_14",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) __tact_tuple_destroy_14(tuple v)",
  },
  {
    "code": {
      "code": "asm "15 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_15",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14 -> tuple __tact_tuple_create_15((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) v)",
  },
  {
    "code": {
      "code": "asm "15 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_15",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) __tact_tuple_destroy_15(tuple v)",
  },
  {
    "code": {
      "code": "asm "16 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_16",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15 -> tuple __tact_tuple_create_16((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15) v)",
  },
  {
    "code": {
      "code": "asm "16 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_16",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15) __tact_tuple_destroy_16(tuple v)",
  },
  {
    "code": {
      "code": "asm "17 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_17",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16 -> tuple __tact_tuple_create_17((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16) v)",
  },
  {
    "code": {
      "code": "asm "17 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_17",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16) __tact_tuple_destroy_17(tuple v)",
  },
  {
    "code": {
      "code": "asm "18 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_18",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17 -> tuple __tact_tuple_create_18((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17) v)",
  },
  {
    "code": {
      "code": "asm "18 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_18",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17) __tact_tuple_destroy_18(tuple v)",
  },
  {
    "code": {
      "code": "asm "19 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_19",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18 -> tuple __tact_tuple_create_19((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18) v)",
  },
  {
    "code": {
      "code": "asm "19 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_19",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18) __tact_tuple_destroy_19(tuple v)",
  },
  {
    "code": {
      "code": "asm "20 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_20",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19 -> tuple __tact_tuple_create_20((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19) v)",
  },
  {
    "code": {
      "code": "asm "20 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_20",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19) __tact_tuple_destroy_20(tuple v)",
  },
  {
    "code": {
      "code": "asm "21 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_21",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20 -> tuple __tact_tuple_create_21((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20) v)",
  },
  {
    "code": {
      "code": "asm "21 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_21",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20) __tact_tuple_destroy_21(tuple v)",
  },
  {
    "code": {
      "code": "asm "22 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_22",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21 -> tuple __tact_tuple_create_22((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21) v)",
  },
  {
    "code": {
      "code": "asm "22 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_22",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21) __tact_tuple_destroy_22(tuple v)",
  },
  {
    "code": {
      "code": "asm "23 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_23",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22 -> tuple __tact_tuple_create_23((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22) v)",
  },
  {
    "code": {
      "code": "asm "23 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_23",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22) __tact_tuple_destroy_23(tuple v)",
  },
  {
    "code": {
      "code": "asm "24 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_24",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23 -> tuple __tact_tuple_create_24((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23) v)",
  },
  {
    "code": {
      "code": "asm "24 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_24",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23) __tact_tuple_destroy_24(tuple v)",
  },
  {
    "code": {
      "code": "asm "25 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_25",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24 -> tuple __tact_tuple_create_25((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24) v)",
  },
  {
    "code": {
      "code": "asm "25 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_25",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24) __tact_tuple_destroy_25(tuple v)",
  },
  {
    "code": {
      "code": "asm "26 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_26",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25 -> tuple __tact_tuple_create_26((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25) v)",
  },
  {
    "code": {
      "code": "asm "26 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_26",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25) __tact_tuple_destroy_26(tuple v)",
  },
  {
    "code": {
      "code": "asm "27 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_27",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26 -> tuple __tact_tuple_create_27((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26) v)",
  },
  {
    "code": {
      "code": "asm "27 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_27",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26) __tact_tuple_destroy_27(tuple v)",
  },
  {
    "code": {
      "code": "asm "28 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_28",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27 -> tuple __tact_tuple_create_28((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27) v)",
  },
  {
    "code": {
      "code": "asm "28 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_28",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27) __tact_tuple_destroy_28(tuple v)",
  },
  {
    "code": {
      "code": "asm "29 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_29",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28 -> tuple __tact_tuple_create_29((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28) v)",
  },
  {
    "code": {
      "code": "asm "29 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_29",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28) __tact_tuple_destroy_29(tuple v)",
  },
  {
    "code": {
      "code": "asm "30 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_30",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29 -> tuple __tact_tuple_create_30((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29) v)",
  },
  {
    "code": {
      "code": "asm "30 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_30",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29) __tact_tuple_destroy_30(tuple v)",
  },
  {
    "code": {
      "code": "asm "31 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_31",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30 -> tuple __tact_tuple_create_31((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30) v)",
  },
  {
    "code": {
      "code": "asm "31 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_31",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30) __tact_tuple_destroy_31(tuple v)",
  },
  {
    "code": {
      "code": "asm "32 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_32",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31 -> tuple __tact_tuple_create_32((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31) v)",
  },
  {
    "code": {
      "code": "asm "32 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_32",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31) __tact_tuple_destroy_32(tuple v)",
  },
  {
    "code": {
      "code": "asm "33 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_33",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32 -> tuple __tact_tuple_create_33((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32) v)",
  },
  {
    "code": {
      "code": "asm "33 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_33",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32) __tact_tuple_destroy_33(tuple v)",
  },
  {
    "code": {
      "code": "asm "34 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_34",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33 -> tuple __tact_tuple_create_34((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33) v)",
  },
  {
    "code": {
      "code": "asm "34 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_34",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33) __tact_tuple_destroy_34(tuple v)",
  },
  {
    "code": {
      "code": "asm "35 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_35",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34 -> tuple __tact_tuple_create_35((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34) v)",
  },
  {
    "code": {
      "code": "asm "35 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_35",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34) __tact_tuple_destroy_35(tuple v)",
  },
  {
    "code": {
      "code": "asm "36 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_36",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35 -> tuple __tact_tuple_create_36((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35) v)",
  },
  {
    "code": {
      "code": "asm "36 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_36",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35) __tact_tuple_destroy_36(tuple v)",
  },
  {
    "code": {
      "code": "asm "37 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_37",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36 -> tuple __tact_tuple_create_37((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36) v)",
  },
  {
    "code": {
      "code": "asm "37 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_37",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36) __tact_tuple_destroy_37(tuple v)",
  },
  {
    "code": {
      "code": "asm "38 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_38",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37 -> tuple __tact_tuple_create_38((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37) v)",
  },
  {
    "code": {
      "code": "asm "38 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_38",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37) __tact_tuple_destroy_38(tuple v)",
  },
  {
    "code": {
      "code": "asm "39 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_39",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38 -> tuple __tact_tuple_create_39((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38) v)",
  },
  {
    "code": {
      "code": "asm "39 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_39",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38) __tact_tuple_destroy_39(tuple v)",
  },
  {
    "code": {
      "code": "asm "40 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_40",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39 -> tuple __tact_tuple_create_40((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39) v)",
  },
  {
    "code": {
      "code": "asm "40 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_40",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39) __tact_tuple_destroy_40(tuple v)",
  },
  {
    "code": {
      "code": "asm "41 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_41",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40 -> tuple __tact_tuple_create_41((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40) v)",
  },
  {
    "code": {
      "code": "asm "41 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_41",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40) __tact_tuple_destroy_41(tuple v)",
  },
  {
    "code": {
      "code": "asm "42 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_42",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41 -> tuple __tact_tuple_create_42((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41) v)",
  },
  {
    "code": {
      "code": "asm "42 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_42",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41) __tact_tuple_destroy_42(tuple v)",
  },
  {
    "code": {
      "code": "asm "43 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_43",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42 -> tuple __tact_tuple_create_43((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42) v)",
  },
  {
    "code": {
      "code": "asm "43 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_43",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42) __tact_tuple_destroy_43(tuple v)",
  },
  {
    "code": {
      "code": "asm "44 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_44",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43 -> tuple __tact_tuple_create_44((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43) v)",
  },
  {
    "code": {
      "code": "asm "44 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_44",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43) __tact_tuple_destroy_44(tuple v)",
  },
  {
    "code": {
      "code": "asm "45 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_45",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44 -> tuple __tact_tuple_create_45((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44) v)",
  },
  {
    "code": {
      "code": "asm "45 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_45",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44) __tact_tuple_destroy_45(tuple v)",
  },
  {
    "code": {
      "code": "asm "46 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_46",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45 -> tuple __tact_tuple_create_46((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45) v)",
  },
  {
    "code": {
      "code": "asm "46 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_46",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45) __tact_tuple_destroy_46(tuple v)",
  },
  {
    "code": {
      "code": "asm "47 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_47",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46 -> tuple __tact_tuple_create_47((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46) v)",
  },
  {
    "code": {
      "code": "asm "47 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_47",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46) __tact_tuple_destroy_47(tuple v)",
  },
  {
    "code": {
      "code": "asm "48 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_48",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47 -> tuple __tact_tuple_create_48((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47) v)",
  },
  {
    "code": {
      "code": "asm "48 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_48",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47) __tact_tuple_destroy_48(tuple v)",
  },
  {
    "code": {
      "code": "asm "49 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_49",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48 -> tuple __tact_tuple_create_49((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48) v)",
  },
  {
    "code": {
      "code": "asm "49 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_49",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48) __tact_tuple_destroy_49(tuple v)",
  },
  {
    "code": {
      "code": "asm "50 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_50",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49 -> tuple __tact_tuple_create_50((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49) v)",
  },
  {
    "code": {
      "code": "asm "50 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_50",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49) __tact_tuple_destroy_50(tuple v)",
  },
  {
    "code": {
      "code": "asm "51 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_51",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50 -> tuple __tact_tuple_create_51((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50) v)",
  },
  {
    "code": {
      "code": "asm "51 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_51",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50) __tact_tuple_destroy_51(tuple v)",
  },
  {
    "code": {
      "code": "asm "52 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_52",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51 -> tuple __tact_tuple_create_52((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51) v)",
  },
  {
    "code": {
      "code": "asm "52 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_52",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51) __tact_tuple_destroy_52(tuple v)",
  },
  {
    "code": {
      "code": "asm "53 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_53",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52 -> tuple __tact_tuple_create_53((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52) v)",
  },
  {
    "code": {
      "code": "asm "53 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_53",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52) __tact_tuple_destroy_53(tuple v)",
  },
  {
    "code": {
      "code": "asm "54 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_54",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53 -> tuple __tact_tuple_create_54((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53) v)",
  },
  {
    "code": {
      "code": "asm "54 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_54",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53) __tact_tuple_destroy_54(tuple v)",
  },
  {
    "code": {
      "code": "asm "55 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_55",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54 -> tuple __tact_tuple_create_55((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54) v)",
  },
  {
    "code": {
      "code": "asm "55 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_55",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54) __tact_tuple_destroy_55(tuple v)",
  },
  {
    "code": {
      "code": "asm "56 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_56",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55 -> tuple __tact_tuple_create_56((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55) v)",
  },
  {
    "code": {
      "code": "asm "56 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_56",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55) __tact_tuple_destroy_56(tuple v)",
  },
  {
    "code": {
      "code": "asm "57 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_57",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56 -> tuple __tact_tuple_create_57((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56) v)",
  },
  {
    "code": {
      "code": "asm "57 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_57",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56) __tact_tuple_destroy_57(tuple v)",
  },
  {
    "code": {
      "code": "asm "58 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_58",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57 -> tuple __tact_tuple_create_58((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57) v)",
  },
  {
    "code": {
      "code": "asm "58 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_58",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57) __tact_tuple_destroy_58(tuple v)",
  },
  {
    "code": {
      "code": "asm "59 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_59",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58 -> tuple __tact_tuple_create_59((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58) v)",
  },
  {
    "code": {
      "code": "asm "59 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_59",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58) __tact_tuple_destroy_59(tuple v)",
  },
  {
    "code": {
      "code": "asm "60 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_60",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59 -> tuple __tact_tuple_create_60((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59) v)",
  },
  {
    "code": {
      "code": "asm "60 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_60",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59) __tact_tuple_destroy_60(tuple v)",
  },
  {
    "code": {
      "code": "asm "61 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_61",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60 -> tuple __tact_tuple_create_61((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60) v)",
  },
  {
    "code": {
      "code": "asm "61 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_61",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60) __tact_tuple_destroy_61(tuple v)",
  },
  {
    "code": {
      "code": "asm "62 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_62",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61 -> tuple __tact_tuple_create_62((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61) v)",
  },
  {
    "code": {
      "code": "asm "62 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_62",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61) __tact_tuple_destroy_62(tuple v)",
  },
  {
    "code": {
      "code": "asm "63 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_63",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62 -> tuple __tact_tuple_create_63((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62) v)",
  },
  {
    "code": {
      "code": "asm "63 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_63",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62) __tact_tuple_destroy_63(tuple v)",
  },
  {
    "code": {
      "code": "return tpush(tpush(empty_tuple(), b), null());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start",
    "signature": "tuple __tact_string_builder_start(builder b)",
  },
  {
    "code": {
      "code": "return __tact_string_builder_start(begin_cell().store_uint(0, 32));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_start",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start_comment",
    "signature": "tuple __tact_string_builder_start_comment()",
  },
  {
    "code": {
      "code": "return __tact_string_builder_start(begin_cell().store_uint(0, 8));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_start",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start_tail_string",
    "signature": "tuple __tact_string_builder_start_tail_string()",
  },
  {
    "code": {
      "code": "return __tact_string_builder_start(begin_cell());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_start",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start_string",
    "signature": "tuple __tact_string_builder_start_string()",
  },
  {
    "code": {
      "code": "(builder b, tuple tail) = uncons(builders);
cell c = b.end_cell();
while(~ null?(tail)) {
    (b, tail) = uncons(tail);
    c = b.store_ref(c).end_cell();
}
return c;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_end",
    "signature": "cell __tact_string_builder_end(tuple builders)",
  },
  {
    "code": {
      "code": "return __tact_string_builder_end(builders).begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_end",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_end_slice",
    "signature": "slice __tact_string_builder_end_slice(tuple builders)",
  },
  {
    "code": {
      "code": "int sliceRefs = slice_refs(sc);
int sliceBits = slice_bits(sc);

while((sliceBits > 0) | (sliceRefs > 0)) {

    ;; Load the current builder
    (builder b, tuple tail) = uncons(builders);
    int remBytes = 127 - (builder_bits(b) / 8);
    int exBytes = sliceBits / 8;

    ;; Append bits
    int amount = min(remBytes, exBytes);
    if (amount > 0) {
        slice read = sc~load_bits(amount * 8);
        b = b.store_slice(read);
    }

    ;; Update builders
    builders = cons(b, tail);

    ;; Check if we need to add a new cell and continue
    if (exBytes - amount > 0) {
        var bb = begin_cell();
        builders = cons(bb, builders);
        sliceBits = (exBytes - amount) * 8;
    } elseif (sliceRefs > 0) {
        sc = sc~load_ref().begin_parse();
        sliceRefs = slice_refs(sc);
        sliceBits = slice_bits(sc);
    } else {
        sliceBits = 0;
        sliceRefs = 0;
    }
}

return ((builders), ());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_string_builder_append",
    "signature": "((tuple), ()) __tact_string_builder_append(tuple builders, slice sc)",
  },
  {
    "code": {
      "code": "builders~__tact_string_builder_append(sc);
return builders;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_append",
    },
    "flags": Set {},
    "name": "__tact_string_builder_append_not_mut",
    "signature": "(tuple) __tact_string_builder_append_not_mut(tuple builders, slice sc)",
  },
  {
    "code": {
      "code": "var b = begin_cell();
if (src < 0) {
    b = b.store_uint(45, 8);
    src = - src;
}

if (src < 1000000000000000000000000000000) {
    int len = 0;
    int value = 0;
    int mult = 1;
    do {
        (src, int res) = src.divmod(10);
        value = value + (res + 48) * mult;
        mult = mult * 256;
        len = len + 1;
    } until (src == 0);

    b = b.store_uint(value, len * 8);
} else {
    tuple t = empty_tuple();
    int len = 0;
    do {
        int digit = src % 10;
        t~tpush(digit);
        len = len + 1;
        src = src / 10;
    } until (src == 0);

    int c = len - 1;
    repeat(len) {
        int v = t.at(c);
        b = b.store_uint(v + 48, 8);
        c = c - 1;
    }
}
return b.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_int_to_string",
    "signature": "slice __tact_int_to_string(int src)",
  },
  {
    "code": {
      "code": "throw_if(134, (digits <= 0) | (digits > 77));
builder b = begin_cell();

if (src < 0) {
    b = b.store_uint(45, 8);
    src = - src;
}

;; Process rem part
int skip = true;
int len = 0;
int rem = 0;
tuple t = empty_tuple();
repeat(digits) {
    (src, rem) = src.divmod(10);
    if ( ~ ( skip & ( rem == 0 ) ) ) {
        skip = false;
        t~tpush(rem + 48);
        len = len + 1;
    }
}

;; Process dot
if (~ skip) {
    t~tpush(46);
    len = len + 1;
}

;; Main
do {
    (src, rem) = src.divmod(10);
    t~tpush(rem + 48);
    len = len + 1;
} until (src == 0);

;; Assemble
int c = len - 1;
repeat(len) {
    int v = t.at(c);
    b = b.store_uint(v, 8);
    c = c - 1;
}

;; Result
return b.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_float_to_string",
    "signature": "slice __tact_float_to_string(int src, int digits)",
  },
  {
    "code": {
      "code": "asm "DUP 5 THROWIFNOT UBITSIZE DEC"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_log2",
    "signature": "int __tact_log2(int num)",
  },
  {
    "code": {
      "code": "throw_unless(5, num > 0);
throw_unless(5, base > 1);
if (num < base) {
    return 0;
}
int result = 0;
while (num >= base) {
    num /= base;
    result += 1;
}
return result;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_log",
    "signature": "int __tact_log(int num, int base)",
  },
  {
    "code": {
      "code": "throw_unless(5, exp >= 0);
int result = 1;
repeat (exp) {
    result *= base;
}
return result;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_pow",
    "signature": "int __tact_pow(int base, int exp)",
  },
  {
    "code": {
      "code": "asm "POW2"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_pow2",
    "signature": "int __tact_pow2(int exp)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
build_0 = build_0.store_int(v'a, 257);
build_0 = build_0.store_int(v'b, 257);
build_0 = ~ null?(v'c) ? build_0.store_int(true, 1).store_int(v'c, 257) : build_0.store_int(false, 1);
build_0 = build_0.store_int(v'd, 1);
build_0 = ~ null?(v'e) ? build_0.store_int(true, 1).store_int(v'e, 1) : build_0.store_int(false, 1);
var build_1 = begin_cell();
build_1 = build_1.store_int(v'f, 257);
build_1 = build_1.store_int(v'g, 257);
build_0 = store_ref(build_0, build_1.end_cell());
return build_0;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {},
    "name": "$A$_store",
    "signature": "builder $A$_store(builder build_0, (int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "return $A$_store(begin_cell(), v).end_cell();",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "$A$_store",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_store_cell",
    "signature": "cell $A$_store_cell((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'a;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_a",
    "signature": "_ $A$_get_a((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'b;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_b",
    "signature": "_ $A$_get_b((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'c;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_c",
    "signature": "_ $A$_get_c((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'd;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_d",
    "signature": "_ $A$_get_d((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'e;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_e",
    "signature": "_ $A$_get_e((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'f;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_f",
    "signature": "_ $A$_get_f((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'g;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_g",
    "signature": "_ $A$_get_g((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {},
    "name": "$A$_tensor_cast",
    "signature": "((int, int, int, int, int, int, int)) $A$_tensor_cast((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "throw_if(128, null?(v));
var (int vvv'a, int vvv'b, int vvv'c, int vvv'd, int vvv'e, int vvv'f, int vvv'g) = __tact_tuple_destroy_7(v);
return (vvv'a, vvv'b, vvv'c, vvv'd, vvv'e, vvv'f, vvv'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "__tact_tuple_destroy_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_not_null",
    "signature": "((int, int, int, int, int, int, int)) $A$_not_null(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return __tact_tuple_create_7(v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "__tact_tuple_create_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_as_optional",
    "signature": "tuple $A$_as_optional((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return __tact_tuple_create_7(v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "__tact_tuple_create_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_to_tuple",
    "signature": "tuple $A$_to_tuple(((int, int, int, int, int, int, int)) v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $A$_to_tuple($A$_not_null(v)); ",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "$A$_to_tuple",
      "$A$_not_null",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_to_opt_tuple",
    "signature": "tuple $A$_to_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (int v'a, int v'b, int v'c, int v'd, int v'e, int v'f, int v'g) = __tact_tuple_destroy_7(v);
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "__tact_tuple_destroy_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_from_tuple",
    "signature": "(int, int, int, int, int, int, int) $A$_from_tuple(tuple v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $A$_as_optional($A$_from_tuple(v));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "$A$_as_optional",
      "$A$_from_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_from_opt_tuple",
    "signature": "tuple $A$_from_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v; 
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_to_external",
    "signature": "(int, int, int, int, int, int, int) $A$_to_external(((int, int, int, int, int, int, int)) v)",
  },
  {
    "code": {
      "code": "var loaded = $A$_to_opt_tuple(v);
if (null?(loaded)) {
    return null();
} else {
    return (loaded);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "$A$_to_opt_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_to_opt_external",
    "signature": "tuple $A$_to_opt_external(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'a;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_a",
    "signature": "_ $B$_get_a((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'b;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_b",
    "signature": "_ $B$_get_b((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'c;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_c",
    "signature": "_ $B$_get_c((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'd;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_d",
    "signature": "_ $B$_get_d((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'e;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_e",
    "signature": "_ $B$_get_e((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'f;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_f",
    "signature": "_ $B$_get_f((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'g;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_g",
    "signature": "_ $B$_get_g((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {},
    "name": "$B$_tensor_cast",
    "signature": "((int, int, int, int, int, int, int)) $B$_tensor_cast((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "throw_if(128, null?(v));
var (int vvv'a, int vvv'b, int vvv'c, int vvv'd, int vvv'e, int vvv'f, int vvv'g) = __tact_tuple_destroy_7(v);
return (vvv'a, vvv'b, vvv'c, vvv'd, vvv'e, vvv'f, vvv'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "__tact_tuple_destroy_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_not_null",
    "signature": "((int, int, int, int, int, int, int)) $B$_not_null(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return __tact_tuple_create_7(v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "__tact_tuple_create_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_as_optional",
    "signature": "tuple $B$_as_optional((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return __tact_tuple_create_7(v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "__tact_tuple_create_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_to_tuple",
    "signature": "tuple $B$_to_tuple(((int, int, int, int, int, int, int)) v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $B$_to_tuple($B$_not_null(v)); ",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "$B$_to_tuple",
      "$B$_not_null",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_to_opt_tuple",
    "signature": "tuple $B$_to_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (int v'a, int v'b, int v'c, int v'd, int v'e, int v'f, int v'g) = __tact_tuple_destroy_7(v);
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "__tact_tuple_destroy_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_from_tuple",
    "signature": "(int, int, int, int, int, int, int) $B$_from_tuple(tuple v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $B$_as_optional($B$_from_tuple(v));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "$B$_as_optional",
      "$B$_from_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_from_opt_tuple",
    "signature": "tuple $B$_from_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v; 
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_to_external",
    "signature": "(int, int, int, int, int, int, int) $B$_to_external(((int, int, int, int, int, int, int)) v)",
  },
  {
    "code": {
      "code": "var loaded = $B$_to_opt_tuple(v);
if (null?(loaded)) {
    return null();
} else {
    return (loaded);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "$B$_to_opt_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_to_opt_external",
    "signature": "tuple $B$_to_opt_external(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'a;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_a",
    "signature": "_ $C$_get_a((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'b;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_b",
    "signature": "_ $C$_get_b((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'c;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_c",
    "signature": "_ $C$_get_c((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'd;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_d",
    "signature": "_ $C$_get_d((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'e;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_e",
    "signature": "_ $C$_get_e((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'f;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_f",
    "signature": "_ $C$_get_f((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'g;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_g",
    "signature": "_ $C$_get_g((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'h;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_h",
    "signature": "_ $C$_get_h((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {},
    "name": "$C$_tensor_cast",
    "signature": "((cell, cell, slice, slice, int, int, int, slice)) $C$_tensor_cast((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "throw_if(128, null?(v));
var (cell vvv'a, cell vvv'b, slice vvv'c, slice vvv'd, int vvv'e, int vvv'f, int vvv'g, slice vvv'h) = __tact_tuple_destroy_8(v);
return (vvv'a, vvv'b, vvv'c, vvv'd, vvv'e, vvv'f, vvv'g, vvv'h);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_tuple_destroy_8",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_not_null",
    "signature": "((cell, cell, slice, slice, int, int, int, slice)) $C$_not_null(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return __tact_tuple_create_8(v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_tuple_create_8",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_as_optional",
    "signature": "tuple $C$_as_optional((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return __tact_tuple_create_8(v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_tuple_create_8",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_to_tuple",
    "signature": "tuple $C$_to_tuple(((cell, cell, slice, slice, int, int, int, slice)) v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $C$_to_tuple($C$_not_null(v)); ",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "$C$_to_tuple",
      "$C$_not_null",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_to_opt_tuple",
    "signature": "tuple $C$_to_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (cell v'a, cell v'b, slice v'c, slice v'd, int v'e, int v'f, int v'g, slice v'h) = __tact_tuple_destroy_8(v);
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g, __tact_verify_address(v'h));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_verify_address",
      "__tact_tuple_destroy_8",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_from_tuple",
    "signature": "(cell, cell, slice, slice, int, int, int, slice) $C$_from_tuple(tuple v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $C$_as_optional($C$_from_tuple(v));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "$C$_as_optional",
      "$C$_from_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_from_opt_tuple",
    "signature": "tuple $C$_from_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v; 
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_to_external",
    "signature": "(cell, cell, slice, slice, int, int, int, slice) $C$_to_external(((cell, cell, slice, slice, int, int, int, slice)) v)",
  },
  {
    "code": {
      "code": "var loaded = $C$_to_opt_tuple(v);
if (null?(loaded)) {
    return null();
} else {
    return (loaded);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "$C$_to_opt_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_to_opt_external",
    "signature": "tuple $C$_to_opt_external(tuple v)",
  },
  {
    "code": {
      "code": "var v'a = sc_0~load_int(257);
var v'b = sc_0~load_int(257);
var v'c = sc_0~load_int(1) ? sc_0~load_int(257) : null();
var v'd = sc_0~load_int(1);
var v'e = sc_0~load_int(1) ? sc_0~load_int(1) : null();
slice sc_1 = sc_0~load_ref().begin_parse();
var v'f = sc_1~load_int(257);
var v'g = sc_1~load_int(257);
return (sc_0, (v'a, v'b, v'c, v'd, v'e, v'f, v'g));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {},
    "name": "$A$_load",
    "signature": "(slice, ((int, int, int, int, int, int, int))) $A$_load(slice sc_0)",
  },
  {
    "code": {
      "code": "var r = sc_0~$A$_load();
sc_0.end_parse();
return r;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "$A$_load",
    },
    "flags": Set {},
    "name": "$A$_load_not_mut",
    "signature": "((int, int, int, int, int, int, int)) $A$_load_not_mut(slice sc_0)",
  },
]
`;

exports[`writeSerialization should write serializer for B 1`] = `
[
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_set",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_nop",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_str_to_slice",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_slice_to_str",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_address_to_slice",
    "signature": "<unknown>",
  },
  {
    "code": {
      "code": "throw_unless(136, address.slice_bits() == 267);
var h = address.preload_uint(11);
throw_if(137, h == 1279);
throw_unless(136, h == 1024);
return address;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
      "inline",
    },
    "name": "__tact_verify_address",
    "signature": "slice __tact_verify_address(slice address)",
  },
  {
    "code": {
      "code": "asm( -> 1 0) "1 LDI"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_load_bool",
    "signature": "(slice, int) __tact_load_bool(slice s)",
  },
  {
    "code": {
      "code": "slice raw = cs~load_msg_addr();
return (cs, __tact_verify_address(raw));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_verify_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_load_address",
    "signature": "(slice, slice) __tact_load_address(slice cs)",
  },
  {
    "code": {
      "code": "if (cs.preload_uint(2) != 0) {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
} else {
    cs~skip_bits(2);
    return (cs, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_verify_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_load_address_opt",
    "signature": "(slice, slice) __tact_load_address_opt(slice cs)",
  },
  {
    "code": {
      "code": "return b.store_slice(__tact_verify_address(address));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_verify_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_store_address",
    "signature": "builder __tact_store_address(builder b, slice address)",
  },
  {
    "code": {
      "code": "if (null?(address)) {
    b = b.store_uint(0, 2);
    return b;
} else {
    return __tact_store_address(b, address);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_store_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_store_address_opt",
    "signature": "builder __tact_store_address_opt(builder b, slice address)",
  },
  {
    "code": {
      "code": "var b = begin_cell();
b = b.store_uint(2, 2);
b = b.store_uint(0, 1);
b = b.store_int(chain, 8);
b = b.store_uint(hash, 256);
var addr = b.end_cell().begin_parse();
return __tact_verify_address(addr);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_verify_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_create_address",
    "signature": "slice __tact_create_address(int chain, int hash)",
  },
  {
    "code": {
      "code": "var b = begin_cell();
b = b.store_uint(0, 2);
b = b.store_uint(3, 2);
b = b.store_uint(0, 1);
b = b.store_ref(code);
b = b.store_ref(data);
var hash = cell_hash(b.end_cell());
return __tact_create_address(chain, hash);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_create_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_compute_contract_address",
    "signature": "slice __tact_compute_contract_address(int chain, cell code, cell data)",
  },
  {
    "code": {
      "code": "return pair_first(get_balance());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_my_balance",
    "signature": "int __tact_my_balance()",
  },
  {
    "code": {
      "code": "throw_if(128, null?(x)); return x;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
      "inline",
    },
    "name": "__tact_not_null",
    "signature": "forall X -> X __tact_not_null(X x)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTDEL"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete",
    "signature": "(cell, int) __tact_dict_delete(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTIDEL"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete_int",
    "signature": "(cell, int) __tact_dict_delete_int(cell dict, int key_len, int index)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTUDEL"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete_uint",
    "signature": "(cell, int) __tact_dict_delete_uint(cell dict, int key_len, int index)",
  },
  {
    "code": {
      "code": "asm(value index dict key_len) "DICTSETREF"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_set_ref",
    "signature": "((cell), ()) __tact_dict_set_ref(cell dict, int key_len, slice index, cell value)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_get",
    "signature": "(slice, int) __tact_dict_get(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTGETREF" "NULLSWAPIFNOT"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_get_ref",
    "signature": "(cell, int) __tact_dict_get_ref(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "asm(dict key_len -> 1 0 2) "DICTMIN" "NULLSWAPIFNOT2"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_min",
    "signature": "(slice, slice, int) __tact_dict_min(cell dict, int key_len)",
  },
  {
    "code": {
      "code": "asm(dict key_len -> 1 0 2) "DICTMINREF" "NULLSWAPIFNOT2"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_min_ref",
    "signature": "(slice, cell, int) __tact_dict_min_ref(cell dict, int key_len)",
  },
  {
    "code": {
      "code": "asm(pivot dict key_len -> 1 0 2) "DICTGETNEXT" "NULLSWAPIFNOT2"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_next",
    "signature": "(slice, slice, int) __tact_dict_next(cell dict, int key_len, slice pivot)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(dict, key_len, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {},
    "name": "__tact_dict_next_ref",
    "signature": "(slice, cell, int) __tact_dict_next_ref(cell dict, int key_len, slice pivot)",
  },
  {
    "code": {
      "code": "asm "STRDUMP" "DROP" "STRDUMP" "DROP" "s0 DUMP" "DROP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug",
    "signature": "forall X -> () __tact_debug(X value, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "asm "STRDUMP" "DROP" "STRDUMP" "DROP" "STRDUMP" "DROP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_str",
    "signature": "() __tact_debug_str(slice value, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "if (value) {
    __tact_debug_str("true", debug_print_1, debug_print_2);
} else {
    __tact_debug_str("false", debug_print_1, debug_print_2);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_debug_str",
    },
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_bool",
    "signature": "() __tact_debug_bool(int value, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "asm "SDSUBSTR"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_preload_offset",
    "signature": "(slice) __tact_preload_offset(slice s, int offset, int bits)",
  },
  {
    "code": {
      "code": "slice new_data = begin_cell()
    .store_slice(data)
    .store_slice("0000"s)
.end_cell().begin_parse();
int reg = 0;
while (~ new_data.slice_data_empty?()) {
    int byte = new_data~load_uint(8);
    int mask = 0x80;
    while (mask > 0) {
        reg <<= 1;
        if (byte & mask) {
            reg += 1;
        }
        mask >>= 1;
        if (reg > 0xffff) {
            reg &= 0xffff;
            reg ^= 0x1021;
        }
    }
}
(int q, int r) = divmod(reg, 256);
return begin_cell()
    .store_uint(q, 8)
    .store_uint(r, 8)
.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline_ref",
    },
    "name": "__tact_crc16",
    "signature": "(slice) __tact_crc16(slice data)",
  },
  {
    "code": {
      "code": "slice chars = "4142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A303132333435363738392D5F"s;
builder res = begin_cell();

while (data.slice_bits() >= 24) {
    (int bs1, int bs2, int bs3) = (data~load_uint(8), data~load_uint(8), data~load_uint(8));

    int n = (bs1 << 16) | (bs2 << 8) | bs3;

    res = res
        .store_slice(__tact_preload_offset(chars, ((n >> 18) & 63) * 8, 8))
        .store_slice(__tact_preload_offset(chars, ((n >> 12) & 63) * 8, 8))
        .store_slice(__tact_preload_offset(chars, ((n >>  6) & 63) * 8, 8))
        .store_slice(__tact_preload_offset(chars, ((n      ) & 63) * 8, 8));
}

return res.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_preload_offset",
    },
    "flags": Set {},
    "name": "__tact_base64_encode",
    "signature": "(slice) __tact_base64_encode(slice data)",
  },
  {
    "code": {
      "code": "(int wc, int hash) = address.parse_std_addr();

slice user_friendly_address = begin_cell()
    .store_slice("11"s)
    .store_uint((wc + 0x100) % 0x100, 8)
    .store_uint(hash, 256)
.end_cell().begin_parse();

slice checksum = __tact_crc16(user_friendly_address);
slice user_friendly_address_with_checksum = begin_cell()
    .store_slice(user_friendly_address)
    .store_slice(checksum)
.end_cell().begin_parse();

return __tact_base64_encode(user_friendly_address_with_checksum);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_crc16",
      "__tact_base64_encode",
    },
    "flags": Set {},
    "name": "__tact_address_to_user_friendly",
    "signature": "(slice) __tact_address_to_user_friendly(slice address)",
  },
  {
    "code": {
      "code": "__tact_debug_str(__tact_address_to_user_friendly(address), debug_print_1, debug_print_2);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_debug_str",
      "__tact_address_to_user_friendly",
    },
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_address",
    "signature": "() __tact_debug_address(slice address, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "asm "STRDUMP" "DROP" "STRDUMP" "DROP" "DUMPSTK"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_stack",
    "signature": "() __tact_debug_stack(slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "return __tact_context;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_context_get",
    "signature": "(int, slice, int, slice) __tact_context_get()",
  },
  {
    "code": {
      "code": "return __tact_context_sender;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_context_get_sender",
    "signature": "slice __tact_context_get_sender()",
  },
  {
    "code": {
      "code": "if (null?(__tact_randomized)) {
    randomize_lt();
    __tact_randomized = true;
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
      "inline",
    },
    "name": "__tact_prepare_random",
    "signature": "() __tact_prepare_random()",
  },
  {
    "code": {
      "code": "return b.store_int(v, 1);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_store_bool",
    "signature": "builder __tact_store_bool(builder b, int v)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_to_tuple",
    "signature": "forall X -> tuple __tact_to_tuple(X x)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_from_tuple",
    "signature": "forall X -> X __tact_from_tuple(tuple x)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_int",
    "signature": "(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r~load_int(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_int",
    "signature": "int __tact_dict_get_int_int(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_int",
    "signature": "(int, int, int) __tact_dict_min_int_int(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_int",
    "signature": "(int, int, int) __tact_dict_next_int_int(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_uint",
    "signature": "(cell, ()) __tact_dict_set_int_uint(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r~load_uint(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_uint",
    "signature": "int __tact_dict_get_int_uint(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_uint",
    "signature": "(int, int, int) __tact_dict_min_int_uint(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_uint",
    "signature": "(int, int, int) __tact_dict_next_int_uint(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_int",
    "signature": "(cell, ()) __tact_dict_set_uint_int(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r~load_int(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_int",
    "signature": "int __tact_dict_get_uint_int(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_int",
    "signature": "(int, int, int) __tact_dict_min_uint_int(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_int",
    "signature": "(int, int, int) __tact_dict_next_uint_int(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_uint",
    "signature": "(cell, ()) __tact_dict_set_uint_uint(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r~load_uint(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_uint",
    "signature": "int __tact_dict_get_uint_uint(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_uint",
    "signature": "(int, int, int) __tact_dict_min_uint_uint(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_uint",
    "signature": "(int, int, int) __tact_dict_next_uint_uint(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_ref(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_cell",
    "signature": "(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get_ref?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_cell",
    "signature": "cell __tact_dict_get_int_cell(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min_ref?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_cell",
    "signature": "(int, cell, int) __tact_dict_min_int_cell(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_cell",
    "signature": "(int, cell, int) __tact_dict_next_int_cell(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_ref(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_cell",
    "signature": "(cell, ()) __tact_dict_set_uint_cell(cell d, int kl, int k, cell v)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get_ref?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_cell",
    "signature": "cell __tact_dict_get_uint_cell(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min_ref?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_cell",
    "signature": "(int, cell, int) __tact_dict_min_uint_cell(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_cell",
    "signature": "(int, cell, int) __tact_dict_next_uint_cell(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_slice",
    "signature": "(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_slice",
    "signature": "slice __tact_dict_get_int_slice(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_slice",
    "signature": "(int, slice, int) __tact_dict_min_int_slice(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_slice",
    "signature": "(int, slice, int) __tact_dict_next_int_slice(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_slice",
    "signature": "(cell, ()) __tact_dict_set_uint_slice(cell d, int kl, int k, slice v)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_slice",
    "signature": "slice __tact_dict_get_uint_slice(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_slice",
    "signature": "(int, slice, int) __tact_dict_min_uint_slice(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_slice",
    "signature": "(int, slice, int) __tact_dict_next_uint_slice(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_int",
    "signature": "(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r~load_int(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_int",
    "signature": "int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_int",
    "signature": "(slice, int, int) __tact_dict_min_slice_int(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_int",
    "signature": "(slice, int, int) __tact_dict_next_slice_int(cell d, int kl, slice pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_uint",
    "signature": "(cell, ()) __tact_dict_set_slice_uint(cell d, int kl, slice k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r~load_uint(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_uint",
    "signature": "int __tact_dict_get_slice_uint(cell d, int kl, slice k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_uint",
    "signature": "(slice, int, int) __tact_dict_min_slice_uint(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_uint",
    "signature": "(slice, int, int) __tact_dict_next_slice_uint(cell d, int kl, slice pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return __tact_dict_set_ref(d, kl, k, v);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
      "__tact_dict_set_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_cell",
    "signature": "(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get_ref(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_cell",
    "signature": "cell __tact_dict_get_slice_cell(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min_ref(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_cell",
    "signature": "(slice, cell, int) __tact_dict_min_slice_cell(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_cell",
    "signature": "(slice, cell, int) __tact_dict_next_slice_cell(cell d, int kl, slice pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_slice(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_slice",
    "signature": "(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_slice",
    "signature": "slice __tact_dict_get_slice_slice(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_slice",
    "signature": "(slice, slice, int) __tact_dict_min_slice_slice(cell d, int kl)",
  },
  {
    "code": {
      "code": "return __tact_dict_next(d, kl, pivot);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_slice",
    "signature": "(slice, slice, int) __tact_dict_next_slice_slice(cell d, int kl, slice pivot)",
  },
  {
    "code": {
      "code": "return equal_slice_bits(a, b);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_bits",
    "signature": "int __tact_slice_eq_bits(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (equal_slice_bits(a, b));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_bits_nullable_one",
    "signature": "int __tact_slice_eq_bits_nullable_one(slice a, slice b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( equal_slice_bits(a, b) ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_bits_nullable",
    "signature": "int __tact_slice_eq_bits_nullable(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (a == b);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_eq_nullable_one",
    "signature": "int __tact_int_eq_nullable_one(int a, int b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (true) : (a != b);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_neq_nullable_one",
    "signature": "int __tact_int_neq_nullable_one(int a, int b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a == b ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_eq_nullable",
    "signature": "int __tact_int_eq_nullable(int a, int b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a != b ) : ( true ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_neq_nullable",
    "signature": "int __tact_int_neq_nullable(int a, int b)",
  },
  {
    "code": {
      "code": "return (a.cell_hash() ==  b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_eq",
    "signature": "int __tact_cell_eq(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (a.cell_hash() !=  b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_neq",
    "signature": "int __tact_cell_neq(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (a.cell_hash() == b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_eq_nullable_one",
    "signature": "int __tact_cell_eq_nullable_one(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (true) : (a.cell_hash() != b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_neq_nullable_one",
    "signature": "int __tact_cell_neq_nullable_one(cell a, cell b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.cell_hash() == b.cell_hash() ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_eq_nullable",
    "signature": "int __tact_cell_eq_nullable(cell a, cell b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.cell_hash() != b.cell_hash() ) : ( true ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_neq_nullable",
    "signature": "int __tact_cell_neq_nullable(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (a.slice_hash() ==  b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq",
    "signature": "int __tact_slice_eq(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (a.slice_hash() !=  b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_neq",
    "signature": "int __tact_slice_neq(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (a.slice_hash() == b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_nullable_one",
    "signature": "int __tact_slice_eq_nullable_one(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (true) : (a.slice_hash() != b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_neq_nullable_one",
    "signature": "int __tact_slice_neq_nullable_one(slice a, slice b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.slice_hash() == b.slice_hash() ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_nullable",
    "signature": "int __tact_slice_eq_nullable(slice a, slice b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.slice_hash() != b.slice_hash() ) : ( true ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_neq_nullable",
    "signature": "int __tact_slice_neq_nullable(slice a, slice b)",
  },
  {
    "code": {
      "code": "return udict_set_ref(dict, 16, id, code);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_code",
    "signature": "cell __tact_dict_set_code(cell dict, int id, cell code)",
  },
  {
    "code": {
      "code": "var (data, ok) = udict_get_ref?(dict, 16, id);
throw_unless(135, ok);
return data;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_code",
    "signature": "cell __tact_dict_get_code(cell dict, int id)",
  },
  {
    "code": {
      "code": "asm "NIL"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_0",
    "signature": "tuple __tact_tuple_create_0()",
  },
  {
    "code": {
      "code": "return ();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_tuple_destroy_0",
    "signature": "() __tact_tuple_destroy_0()",
  },
  {
    "code": {
      "code": "asm "1 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_1",
    "signature": "forall X0 -> tuple __tact_tuple_create_1((X0) v)",
  },
  {
    "code": {
      "code": "asm "1 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_1",
    "signature": "forall X0 -> (X0) __tact_tuple_destroy_1(tuple v)",
  },
  {
    "code": {
      "code": "asm "2 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_2",
    "signature": "forall X0, X1 -> tuple __tact_tuple_create_2((X0, X1) v)",
  },
  {
    "code": {
      "code": "asm "2 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_2",
    "signature": "forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v)",
  },
  {
    "code": {
      "code": "asm "3 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_3",
    "signature": "forall X0, X1, X2 -> tuple __tact_tuple_create_3((X0, X1, X2) v)",
  },
  {
    "code": {
      "code": "asm "3 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_3",
    "signature": "forall X0, X1, X2 -> (X0, X1, X2) __tact_tuple_destroy_3(tuple v)",
  },
  {
    "code": {
      "code": "asm "4 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_4",
    "signature": "forall X0, X1, X2, X3 -> tuple __tact_tuple_create_4((X0, X1, X2, X3) v)",
  },
  {
    "code": {
      "code": "asm "4 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_4",
    "signature": "forall X0, X1, X2, X3 -> (X0, X1, X2, X3) __tact_tuple_destroy_4(tuple v)",
  },
  {
    "code": {
      "code": "asm "5 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_5",
    "signature": "forall X0, X1, X2, X3, X4 -> tuple __tact_tuple_create_5((X0, X1, X2, X3, X4) v)",
  },
  {
    "code": {
      "code": "asm "5 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_5",
    "signature": "forall X0, X1, X2, X3, X4 -> (X0, X1, X2, X3, X4) __tact_tuple_destroy_5(tuple v)",
  },
  {
    "code": {
      "code": "asm "6 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_6",
    "signature": "forall X0, X1, X2, X3, X4, X5 -> tuple __tact_tuple_create_6((X0, X1, X2, X3, X4, X5) v)",
  },
  {
    "code": {
      "code": "asm "6 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_6",
    "signature": "forall X0, X1, X2, X3, X4, X5 -> (X0, X1, X2, X3, X4, X5) __tact_tuple_destroy_6(tuple v)",
  },
  {
    "code": {
      "code": "asm "7 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_7",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6 -> tuple __tact_tuple_create_7((X0, X1, X2, X3, X4, X5, X6) v)",
  },
  {
    "code": {
      "code": "asm "7 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_7",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6 -> (X0, X1, X2, X3, X4, X5, X6) __tact_tuple_destroy_7(tuple v)",
  },
  {
    "code": {
      "code": "asm "8 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_8",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7 -> tuple __tact_tuple_create_8((X0, X1, X2, X3, X4, X5, X6, X7) v)",
  },
  {
    "code": {
      "code": "asm "8 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_8",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7 -> (X0, X1, X2, X3, X4, X5, X6, X7) __tact_tuple_destroy_8(tuple v)",
  },
  {
    "code": {
      "code": "asm "9 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_9",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8 -> tuple __tact_tuple_create_9((X0, X1, X2, X3, X4, X5, X6, X7, X8) v)",
  },
  {
    "code": {
      "code": "asm "9 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_9",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8) __tact_tuple_destroy_9(tuple v)",
  },
  {
    "code": {
      "code": "asm "10 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_10",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9 -> tuple __tact_tuple_create_10((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) v)",
  },
  {
    "code": {
      "code": "asm "10 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_10",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) __tact_tuple_destroy_10(tuple v)",
  },
  {
    "code": {
      "code": "asm "11 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_11",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 -> tuple __tact_tuple_create_11((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) v)",
  },
  {
    "code": {
      "code": "asm "11 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_11",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) __tact_tuple_destroy_11(tuple v)",
  },
  {
    "code": {
      "code": "asm "12 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_12",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11 -> tuple __tact_tuple_create_12((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) v)",
  },
  {
    "code": {
      "code": "asm "12 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_12",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) __tact_tuple_destroy_12(tuple v)",
  },
  {
    "code": {
      "code": "asm "13 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_13",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12 -> tuple __tact_tuple_create_13((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) v)",
  },
  {
    "code": {
      "code": "asm "13 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_13",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) __tact_tuple_destroy_13(tuple v)",
  },
  {
    "code": {
      "code": "asm "14 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_14",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13 -> tuple __tact_tuple_create_14((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) v)",
  },
  {
    "code": {
      "code": "asm "14 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_14",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) __tact_tuple_destroy_14(tuple v)",
  },
  {
    "code": {
      "code": "asm "15 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_15",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14 -> tuple __tact_tuple_create_15((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) v)",
  },
  {
    "code": {
      "code": "asm "15 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_15",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) __tact_tuple_destroy_15(tuple v)",
  },
  {
    "code": {
      "code": "asm "16 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_16",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15 -> tuple __tact_tuple_create_16((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15) v)",
  },
  {
    "code": {
      "code": "asm "16 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_16",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15) __tact_tuple_destroy_16(tuple v)",
  },
  {
    "code": {
      "code": "asm "17 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_17",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16 -> tuple __tact_tuple_create_17((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16) v)",
  },
  {
    "code": {
      "code": "asm "17 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_17",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16) __tact_tuple_destroy_17(tuple v)",
  },
  {
    "code": {
      "code": "asm "18 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_18",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17 -> tuple __tact_tuple_create_18((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17) v)",
  },
  {
    "code": {
      "code": "asm "18 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_18",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17) __tact_tuple_destroy_18(tuple v)",
  },
  {
    "code": {
      "code": "asm "19 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_19",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18 -> tuple __tact_tuple_create_19((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18) v)",
  },
  {
    "code": {
      "code": "asm "19 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_19",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18) __tact_tuple_destroy_19(tuple v)",
  },
  {
    "code": {
      "code": "asm "20 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_20",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19 -> tuple __tact_tuple_create_20((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19) v)",
  },
  {
    "code": {
      "code": "asm "20 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_20",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19) __tact_tuple_destroy_20(tuple v)",
  },
  {
    "code": {
      "code": "asm "21 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_21",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20 -> tuple __tact_tuple_create_21((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20) v)",
  },
  {
    "code": {
      "code": "asm "21 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_21",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20) __tact_tuple_destroy_21(tuple v)",
  },
  {
    "code": {
      "code": "asm "22 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_22",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21 -> tuple __tact_tuple_create_22((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21) v)",
  },
  {
    "code": {
      "code": "asm "22 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_22",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21) __tact_tuple_destroy_22(tuple v)",
  },
  {
    "code": {
      "code": "asm "23 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_23",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22 -> tuple __tact_tuple_create_23((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22) v)",
  },
  {
    "code": {
      "code": "asm "23 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_23",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22) __tact_tuple_destroy_23(tuple v)",
  },
  {
    "code": {
      "code": "asm "24 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_24",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23 -> tuple __tact_tuple_create_24((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23) v)",
  },
  {
    "code": {
      "code": "asm "24 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_24",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23) __tact_tuple_destroy_24(tuple v)",
  },
  {
    "code": {
      "code": "asm "25 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_25",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24 -> tuple __tact_tuple_create_25((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24) v)",
  },
  {
    "code": {
      "code": "asm "25 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_25",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24) __tact_tuple_destroy_25(tuple v)",
  },
  {
    "code": {
      "code": "asm "26 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_26",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25 -> tuple __tact_tuple_create_26((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25) v)",
  },
  {
    "code": {
      "code": "asm "26 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_26",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25) __tact_tuple_destroy_26(tuple v)",
  },
  {
    "code": {
      "code": "asm "27 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_27",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26 -> tuple __tact_tuple_create_27((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26) v)",
  },
  {
    "code": {
      "code": "asm "27 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_27",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26) __tact_tuple_destroy_27(tuple v)",
  },
  {
    "code": {
      "code": "asm "28 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_28",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27 -> tuple __tact_tuple_create_28((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27) v)",
  },
  {
    "code": {
      "code": "asm "28 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_28",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27) __tact_tuple_destroy_28(tuple v)",
  },
  {
    "code": {
      "code": "asm "29 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_29",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28 -> tuple __tact_tuple_create_29((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28) v)",
  },
  {
    "code": {
      "code": "asm "29 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_29",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28) __tact_tuple_destroy_29(tuple v)",
  },
  {
    "code": {
      "code": "asm "30 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_30",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29 -> tuple __tact_tuple_create_30((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29) v)",
  },
  {
    "code": {
      "code": "asm "30 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_30",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29) __tact_tuple_destroy_30(tuple v)",
  },
  {
    "code": {
      "code": "asm "31 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_31",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30 -> tuple __tact_tuple_create_31((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30) v)",
  },
  {
    "code": {
      "code": "asm "31 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_31",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30) __tact_tuple_destroy_31(tuple v)",
  },
  {
    "code": {
      "code": "asm "32 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_32",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31 -> tuple __tact_tuple_create_32((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31) v)",
  },
  {
    "code": {
      "code": "asm "32 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_32",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31) __tact_tuple_destroy_32(tuple v)",
  },
  {
    "code": {
      "code": "asm "33 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_33",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32 -> tuple __tact_tuple_create_33((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32) v)",
  },
  {
    "code": {
      "code": "asm "33 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_33",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32) __tact_tuple_destroy_33(tuple v)",
  },
  {
    "code": {
      "code": "asm "34 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_34",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33 -> tuple __tact_tuple_create_34((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33) v)",
  },
  {
    "code": {
      "code": "asm "34 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_34",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33) __tact_tuple_destroy_34(tuple v)",
  },
  {
    "code": {
      "code": "asm "35 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_35",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34 -> tuple __tact_tuple_create_35((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34) v)",
  },
  {
    "code": {
      "code": "asm "35 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_35",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34) __tact_tuple_destroy_35(tuple v)",
  },
  {
    "code": {
      "code": "asm "36 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_36",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35 -> tuple __tact_tuple_create_36((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35) v)",
  },
  {
    "code": {
      "code": "asm "36 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_36",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35) __tact_tuple_destroy_36(tuple v)",
  },
  {
    "code": {
      "code": "asm "37 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_37",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36 -> tuple __tact_tuple_create_37((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36) v)",
  },
  {
    "code": {
      "code": "asm "37 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_37",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36) __tact_tuple_destroy_37(tuple v)",
  },
  {
    "code": {
      "code": "asm "38 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_38",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37 -> tuple __tact_tuple_create_38((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37) v)",
  },
  {
    "code": {
      "code": "asm "38 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_38",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37) __tact_tuple_destroy_38(tuple v)",
  },
  {
    "code": {
      "code": "asm "39 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_39",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38 -> tuple __tact_tuple_create_39((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38) v)",
  },
  {
    "code": {
      "code": "asm "39 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_39",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38) __tact_tuple_destroy_39(tuple v)",
  },
  {
    "code": {
      "code": "asm "40 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_40",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39 -> tuple __tact_tuple_create_40((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39) v)",
  },
  {
    "code": {
      "code": "asm "40 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_40",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39) __tact_tuple_destroy_40(tuple v)",
  },
  {
    "code": {
      "code": "asm "41 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_41",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40 -> tuple __tact_tuple_create_41((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40) v)",
  },
  {
    "code": {
      "code": "asm "41 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_41",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40) __tact_tuple_destroy_41(tuple v)",
  },
  {
    "code": {
      "code": "asm "42 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_42",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41 -> tuple __tact_tuple_create_42((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41) v)",
  },
  {
    "code": {
      "code": "asm "42 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_42",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41) __tact_tuple_destroy_42(tuple v)",
  },
  {
    "code": {
      "code": "asm "43 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_43",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42 -> tuple __tact_tuple_create_43((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42) v)",
  },
  {
    "code": {
      "code": "asm "43 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_43",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42) __tact_tuple_destroy_43(tuple v)",
  },
  {
    "code": {
      "code": "asm "44 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_44",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43 -> tuple __tact_tuple_create_44((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43) v)",
  },
  {
    "code": {
      "code": "asm "44 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_44",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43) __tact_tuple_destroy_44(tuple v)",
  },
  {
    "code": {
      "code": "asm "45 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_45",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44 -> tuple __tact_tuple_create_45((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44) v)",
  },
  {
    "code": {
      "code": "asm "45 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_45",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44) __tact_tuple_destroy_45(tuple v)",
  },
  {
    "code": {
      "code": "asm "46 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_46",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45 -> tuple __tact_tuple_create_46((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45) v)",
  },
  {
    "code": {
      "code": "asm "46 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_46",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45) __tact_tuple_destroy_46(tuple v)",
  },
  {
    "code": {
      "code": "asm "47 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_47",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46 -> tuple __tact_tuple_create_47((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46) v)",
  },
  {
    "code": {
      "code": "asm "47 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_47",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46) __tact_tuple_destroy_47(tuple v)",
  },
  {
    "code": {
      "code": "asm "48 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_48",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47 -> tuple __tact_tuple_create_48((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47) v)",
  },
  {
    "code": {
      "code": "asm "48 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_48",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47) __tact_tuple_destroy_48(tuple v)",
  },
  {
    "code": {
      "code": "asm "49 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_49",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48 -> tuple __tact_tuple_create_49((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48) v)",
  },
  {
    "code": {
      "code": "asm "49 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_49",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48) __tact_tuple_destroy_49(tuple v)",
  },
  {
    "code": {
      "code": "asm "50 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_50",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49 -> tuple __tact_tuple_create_50((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49) v)",
  },
  {
    "code": {
      "code": "asm "50 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_50",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49) __tact_tuple_destroy_50(tuple v)",
  },
  {
    "code": {
      "code": "asm "51 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_51",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50 -> tuple __tact_tuple_create_51((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50) v)",
  },
  {
    "code": {
      "code": "asm "51 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_51",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50) __tact_tuple_destroy_51(tuple v)",
  },
  {
    "code": {
      "code": "asm "52 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_52",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51 -> tuple __tact_tuple_create_52((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51) v)",
  },
  {
    "code": {
      "code": "asm "52 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_52",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51) __tact_tuple_destroy_52(tuple v)",
  },
  {
    "code": {
      "code": "asm "53 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_53",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52 -> tuple __tact_tuple_create_53((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52) v)",
  },
  {
    "code": {
      "code": "asm "53 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_53",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52) __tact_tuple_destroy_53(tuple v)",
  },
  {
    "code": {
      "code": "asm "54 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_54",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53 -> tuple __tact_tuple_create_54((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53) v)",
  },
  {
    "code": {
      "code": "asm "54 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_54",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53) __tact_tuple_destroy_54(tuple v)",
  },
  {
    "code": {
      "code": "asm "55 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_55",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54 -> tuple __tact_tuple_create_55((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54) v)",
  },
  {
    "code": {
      "code": "asm "55 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_55",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54) __tact_tuple_destroy_55(tuple v)",
  },
  {
    "code": {
      "code": "asm "56 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_56",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55 -> tuple __tact_tuple_create_56((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55) v)",
  },
  {
    "code": {
      "code": "asm "56 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_56",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55) __tact_tuple_destroy_56(tuple v)",
  },
  {
    "code": {
      "code": "asm "57 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_57",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56 -> tuple __tact_tuple_create_57((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56) v)",
  },
  {
    "code": {
      "code": "asm "57 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_57",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56) __tact_tuple_destroy_57(tuple v)",
  },
  {
    "code": {
      "code": "asm "58 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_58",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57 -> tuple __tact_tuple_create_58((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57) v)",
  },
  {
    "code": {
      "code": "asm "58 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_58",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57) __tact_tuple_destroy_58(tuple v)",
  },
  {
    "code": {
      "code": "asm "59 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_59",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58 -> tuple __tact_tuple_create_59((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58) v)",
  },
  {
    "code": {
      "code": "asm "59 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_59",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58) __tact_tuple_destroy_59(tuple v)",
  },
  {
    "code": {
      "code": "asm "60 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_60",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59 -> tuple __tact_tuple_create_60((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59) v)",
  },
  {
    "code": {
      "code": "asm "60 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_60",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59) __tact_tuple_destroy_60(tuple v)",
  },
  {
    "code": {
      "code": "asm "61 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_61",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60 -> tuple __tact_tuple_create_61((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60) v)",
  },
  {
    "code": {
      "code": "asm "61 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_61",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60) __tact_tuple_destroy_61(tuple v)",
  },
  {
    "code": {
      "code": "asm "62 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_62",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61 -> tuple __tact_tuple_create_62((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61) v)",
  },
  {
    "code": {
      "code": "asm "62 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_62",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61) __tact_tuple_destroy_62(tuple v)",
  },
  {
    "code": {
      "code": "asm "63 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_63",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62 -> tuple __tact_tuple_create_63((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62) v)",
  },
  {
    "code": {
      "code": "asm "63 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_63",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62) __tact_tuple_destroy_63(tuple v)",
  },
  {
    "code": {
      "code": "return tpush(tpush(empty_tuple(), b), null());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start",
    "signature": "tuple __tact_string_builder_start(builder b)",
  },
  {
    "code": {
      "code": "return __tact_string_builder_start(begin_cell().store_uint(0, 32));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_start",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start_comment",
    "signature": "tuple __tact_string_builder_start_comment()",
  },
  {
    "code": {
      "code": "return __tact_string_builder_start(begin_cell().store_uint(0, 8));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_start",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start_tail_string",
    "signature": "tuple __tact_string_builder_start_tail_string()",
  },
  {
    "code": {
      "code": "return __tact_string_builder_start(begin_cell());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_start",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start_string",
    "signature": "tuple __tact_string_builder_start_string()",
  },
  {
    "code": {
      "code": "(builder b, tuple tail) = uncons(builders);
cell c = b.end_cell();
while(~ null?(tail)) {
    (b, tail) = uncons(tail);
    c = b.store_ref(c).end_cell();
}
return c;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_end",
    "signature": "cell __tact_string_builder_end(tuple builders)",
  },
  {
    "code": {
      "code": "return __tact_string_builder_end(builders).begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_end",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_end_slice",
    "signature": "slice __tact_string_builder_end_slice(tuple builders)",
  },
  {
    "code": {
      "code": "int sliceRefs = slice_refs(sc);
int sliceBits = slice_bits(sc);

while((sliceBits > 0) | (sliceRefs > 0)) {

    ;; Load the current builder
    (builder b, tuple tail) = uncons(builders);
    int remBytes = 127 - (builder_bits(b) / 8);
    int exBytes = sliceBits / 8;

    ;; Append bits
    int amount = min(remBytes, exBytes);
    if (amount > 0) {
        slice read = sc~load_bits(amount * 8);
        b = b.store_slice(read);
    }

    ;; Update builders
    builders = cons(b, tail);

    ;; Check if we need to add a new cell and continue
    if (exBytes - amount > 0) {
        var bb = begin_cell();
        builders = cons(bb, builders);
        sliceBits = (exBytes - amount) * 8;
    } elseif (sliceRefs > 0) {
        sc = sc~load_ref().begin_parse();
        sliceRefs = slice_refs(sc);
        sliceBits = slice_bits(sc);
    } else {
        sliceBits = 0;
        sliceRefs = 0;
    }
}

return ((builders), ());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_string_builder_append",
    "signature": "((tuple), ()) __tact_string_builder_append(tuple builders, slice sc)",
  },
  {
    "code": {
      "code": "builders~__tact_string_builder_append(sc);
return builders;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_append",
    },
    "flags": Set {},
    "name": "__tact_string_builder_append_not_mut",
    "signature": "(tuple) __tact_string_builder_append_not_mut(tuple builders, slice sc)",
  },
  {
    "code": {
      "code": "var b = begin_cell();
if (src < 0) {
    b = b.store_uint(45, 8);
    src = - src;
}

if (src < 1000000000000000000000000000000) {
    int len = 0;
    int value = 0;
    int mult = 1;
    do {
        (src, int res) = src.divmod(10);
        value = value + (res + 48) * mult;
        mult = mult * 256;
        len = len + 1;
    } until (src == 0);

    b = b.store_uint(value, len * 8);
} else {
    tuple t = empty_tuple();
    int len = 0;
    do {
        int digit = src % 10;
        t~tpush(digit);
        len = len + 1;
        src = src / 10;
    } until (src == 0);

    int c = len - 1;
    repeat(len) {
        int v = t.at(c);
        b = b.store_uint(v + 48, 8);
        c = c - 1;
    }
}
return b.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_int_to_string",
    "signature": "slice __tact_int_to_string(int src)",
  },
  {
    "code": {
      "code": "throw_if(134, (digits <= 0) | (digits > 77));
builder b = begin_cell();

if (src < 0) {
    b = b.store_uint(45, 8);
    src = - src;
}

;; Process rem part
int skip = true;
int len = 0;
int rem = 0;
tuple t = empty_tuple();
repeat(digits) {
    (src, rem) = src.divmod(10);
    if ( ~ ( skip & ( rem == 0 ) ) ) {
        skip = false;
        t~tpush(rem + 48);
        len = len + 1;
    }
}

;; Process dot
if (~ skip) {
    t~tpush(46);
    len = len + 1;
}

;; Main
do {
    (src, rem) = src.divmod(10);
    t~tpush(rem + 48);
    len = len + 1;
} until (src == 0);

;; Assemble
int c = len - 1;
repeat(len) {
    int v = t.at(c);
    b = b.store_uint(v, 8);
    c = c - 1;
}

;; Result
return b.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_float_to_string",
    "signature": "slice __tact_float_to_string(int src, int digits)",
  },
  {
    "code": {
      "code": "asm "DUP 5 THROWIFNOT UBITSIZE DEC"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_log2",
    "signature": "int __tact_log2(int num)",
  },
  {
    "code": {
      "code": "throw_unless(5, num > 0);
throw_unless(5, base > 1);
if (num < base) {
    return 0;
}
int result = 0;
while (num >= base) {
    num /= base;
    result += 1;
}
return result;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_log",
    "signature": "int __tact_log(int num, int base)",
  },
  {
    "code": {
      "code": "throw_unless(5, exp >= 0);
int result = 1;
repeat (exp) {
    result *= base;
}
return result;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_pow",
    "signature": "int __tact_pow(int base, int exp)",
  },
  {
    "code": {
      "code": "asm "POW2"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_pow2",
    "signature": "int __tact_pow2(int exp)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
build_0 = build_0.store_int(v'a, 257);
build_0 = build_0.store_int(v'b, 257);
build_0 = ~ null?(v'c) ? build_0.store_int(true, 1).store_int(v'c, 257) : build_0.store_int(false, 1);
build_0 = build_0.store_int(v'd, 1);
build_0 = ~ null?(v'e) ? build_0.store_int(true, 1).store_int(v'e, 1) : build_0.store_int(false, 1);
var build_1 = begin_cell();
build_1 = build_1.store_int(v'f, 257);
build_1 = build_1.store_int(v'g, 257);
build_0 = store_ref(build_0, build_1.end_cell());
return build_0;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {},
    "name": "$B$_store",
    "signature": "builder $B$_store(builder build_0, (int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "return $B$_store(begin_cell(), v).end_cell();",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "$B$_store",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_store_cell",
    "signature": "cell $B$_store_cell((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'a;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_a",
    "signature": "_ $A$_get_a((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'b;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_b",
    "signature": "_ $A$_get_b((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'c;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_c",
    "signature": "_ $A$_get_c((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'd;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_d",
    "signature": "_ $A$_get_d((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'e;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_e",
    "signature": "_ $A$_get_e((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'f;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_f",
    "signature": "_ $A$_get_f((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'g;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_g",
    "signature": "_ $A$_get_g((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {},
    "name": "$A$_tensor_cast",
    "signature": "((int, int, int, int, int, int, int)) $A$_tensor_cast((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "throw_if(128, null?(v));
var (int vvv'a, int vvv'b, int vvv'c, int vvv'd, int vvv'e, int vvv'f, int vvv'g) = __tact_tuple_destroy_7(v);
return (vvv'a, vvv'b, vvv'c, vvv'd, vvv'e, vvv'f, vvv'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "__tact_tuple_destroy_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_not_null",
    "signature": "((int, int, int, int, int, int, int)) $A$_not_null(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return __tact_tuple_create_7(v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "__tact_tuple_create_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_as_optional",
    "signature": "tuple $A$_as_optional((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return __tact_tuple_create_7(v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "__tact_tuple_create_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_to_tuple",
    "signature": "tuple $A$_to_tuple(((int, int, int, int, int, int, int)) v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $A$_to_tuple($A$_not_null(v)); ",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "$A$_to_tuple",
      "$A$_not_null",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_to_opt_tuple",
    "signature": "tuple $A$_to_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (int v'a, int v'b, int v'c, int v'd, int v'e, int v'f, int v'g) = __tact_tuple_destroy_7(v);
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "__tact_tuple_destroy_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_from_tuple",
    "signature": "(int, int, int, int, int, int, int) $A$_from_tuple(tuple v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $A$_as_optional($A$_from_tuple(v));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "$A$_as_optional",
      "$A$_from_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_from_opt_tuple",
    "signature": "tuple $A$_from_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v; 
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_to_external",
    "signature": "(int, int, int, int, int, int, int) $A$_to_external(((int, int, int, int, int, int, int)) v)",
  },
  {
    "code": {
      "code": "var loaded = $A$_to_opt_tuple(v);
if (null?(loaded)) {
    return null();
} else {
    return (loaded);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "$A$_to_opt_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_to_opt_external",
    "signature": "tuple $A$_to_opt_external(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'a;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_a",
    "signature": "_ $B$_get_a((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'b;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_b",
    "signature": "_ $B$_get_b((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'c;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_c",
    "signature": "_ $B$_get_c((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'd;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_d",
    "signature": "_ $B$_get_d((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'e;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_e",
    "signature": "_ $B$_get_e((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'f;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_f",
    "signature": "_ $B$_get_f((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'g;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_g",
    "signature": "_ $B$_get_g((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {},
    "name": "$B$_tensor_cast",
    "signature": "((int, int, int, int, int, int, int)) $B$_tensor_cast((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "throw_if(128, null?(v));
var (int vvv'a, int vvv'b, int vvv'c, int vvv'd, int vvv'e, int vvv'f, int vvv'g) = __tact_tuple_destroy_7(v);
return (vvv'a, vvv'b, vvv'c, vvv'd, vvv'e, vvv'f, vvv'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "__tact_tuple_destroy_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_not_null",
    "signature": "((int, int, int, int, int, int, int)) $B$_not_null(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return __tact_tuple_create_7(v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "__tact_tuple_create_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_as_optional",
    "signature": "tuple $B$_as_optional((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return __tact_tuple_create_7(v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "__tact_tuple_create_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_to_tuple",
    "signature": "tuple $B$_to_tuple(((int, int, int, int, int, int, int)) v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $B$_to_tuple($B$_not_null(v)); ",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "$B$_to_tuple",
      "$B$_not_null",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_to_opt_tuple",
    "signature": "tuple $B$_to_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (int v'a, int v'b, int v'c, int v'd, int v'e, int v'f, int v'g) = __tact_tuple_destroy_7(v);
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "__tact_tuple_destroy_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_from_tuple",
    "signature": "(int, int, int, int, int, int, int) $B$_from_tuple(tuple v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $B$_as_optional($B$_from_tuple(v));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "$B$_as_optional",
      "$B$_from_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_from_opt_tuple",
    "signature": "tuple $B$_from_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v; 
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_to_external",
    "signature": "(int, int, int, int, int, int, int) $B$_to_external(((int, int, int, int, int, int, int)) v)",
  },
  {
    "code": {
      "code": "var loaded = $B$_to_opt_tuple(v);
if (null?(loaded)) {
    return null();
} else {
    return (loaded);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "$B$_to_opt_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_to_opt_external",
    "signature": "tuple $B$_to_opt_external(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'a;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_a",
    "signature": "_ $C$_get_a((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'b;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_b",
    "signature": "_ $C$_get_b((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'c;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_c",
    "signature": "_ $C$_get_c((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'd;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_d",
    "signature": "_ $C$_get_d((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'e;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_e",
    "signature": "_ $C$_get_e((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'f;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_f",
    "signature": "_ $C$_get_f((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'g;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_g",
    "signature": "_ $C$_get_g((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'h;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_h",
    "signature": "_ $C$_get_h((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {},
    "name": "$C$_tensor_cast",
    "signature": "((cell, cell, slice, slice, int, int, int, slice)) $C$_tensor_cast((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "throw_if(128, null?(v));
var (cell vvv'a, cell vvv'b, slice vvv'c, slice vvv'd, int vvv'e, int vvv'f, int vvv'g, slice vvv'h) = __tact_tuple_destroy_8(v);
return (vvv'a, vvv'b, vvv'c, vvv'd, vvv'e, vvv'f, vvv'g, vvv'h);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_tuple_destroy_8",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_not_null",
    "signature": "((cell, cell, slice, slice, int, int, int, slice)) $C$_not_null(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return __tact_tuple_create_8(v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_tuple_create_8",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_as_optional",
    "signature": "tuple $C$_as_optional((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return __tact_tuple_create_8(v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_tuple_create_8",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_to_tuple",
    "signature": "tuple $C$_to_tuple(((cell, cell, slice, slice, int, int, int, slice)) v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $C$_to_tuple($C$_not_null(v)); ",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "$C$_to_tuple",
      "$C$_not_null",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_to_opt_tuple",
    "signature": "tuple $C$_to_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (cell v'a, cell v'b, slice v'c, slice v'd, int v'e, int v'f, int v'g, slice v'h) = __tact_tuple_destroy_8(v);
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g, __tact_verify_address(v'h));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_verify_address",
      "__tact_tuple_destroy_8",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_from_tuple",
    "signature": "(cell, cell, slice, slice, int, int, int, slice) $C$_from_tuple(tuple v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $C$_as_optional($C$_from_tuple(v));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "$C$_as_optional",
      "$C$_from_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_from_opt_tuple",
    "signature": "tuple $C$_from_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v; 
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_to_external",
    "signature": "(cell, cell, slice, slice, int, int, int, slice) $C$_to_external(((cell, cell, slice, slice, int, int, int, slice)) v)",
  },
  {
    "code": {
      "code": "var loaded = $C$_to_opt_tuple(v);
if (null?(loaded)) {
    return null();
} else {
    return (loaded);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "$C$_to_opt_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_to_opt_external",
    "signature": "tuple $C$_to_opt_external(tuple v)",
  },
  {
    "code": {
      "code": "var v'a = sc_0~load_int(257);
var v'b = sc_0~load_int(257);
var v'c = sc_0~load_int(1) ? sc_0~load_int(257) : null();
var v'd = sc_0~load_int(1);
var v'e = sc_0~load_int(1) ? sc_0~load_int(1) : null();
slice sc_1 = sc_0~load_ref().begin_parse();
var v'f = sc_1~load_int(257);
var v'g = sc_1~load_int(257);
return (sc_0, (v'a, v'b, v'c, v'd, v'e, v'f, v'g));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {},
    "name": "$B$_load",
    "signature": "(slice, ((int, int, int, int, int, int, int))) $B$_load(slice sc_0)",
  },
  {
    "code": {
      "code": "var r = sc_0~$B$_load();
sc_0.end_parse();
return r;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "$B$_load",
    },
    "flags": Set {},
    "name": "$B$_load_not_mut",
    "signature": "((int, int, int, int, int, int, int)) $B$_load_not_mut(slice sc_0)",
  },
]
`;

exports[`writeSerialization should write serializer for C 1`] = `
[
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_set",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_nop",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_str_to_slice",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_slice_to_str",
    "signature": "<unknown>",
  },
  {
    "code": {
      "kind": "skip",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_address_to_slice",
    "signature": "<unknown>",
  },
  {
    "code": {
      "code": "throw_unless(136, address.slice_bits() == 267);
var h = address.preload_uint(11);
throw_if(137, h == 1279);
throw_unless(136, h == 1024);
return address;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
      "inline",
    },
    "name": "__tact_verify_address",
    "signature": "slice __tact_verify_address(slice address)",
  },
  {
    "code": {
      "code": "asm( -> 1 0) "1 LDI"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_load_bool",
    "signature": "(slice, int) __tact_load_bool(slice s)",
  },
  {
    "code": {
      "code": "slice raw = cs~load_msg_addr();
return (cs, __tact_verify_address(raw));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_verify_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_load_address",
    "signature": "(slice, slice) __tact_load_address(slice cs)",
  },
  {
    "code": {
      "code": "if (cs.preload_uint(2) != 0) {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
} else {
    cs~skip_bits(2);
    return (cs, null());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_verify_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_load_address_opt",
    "signature": "(slice, slice) __tact_load_address_opt(slice cs)",
  },
  {
    "code": {
      "code": "return b.store_slice(__tact_verify_address(address));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_verify_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_store_address",
    "signature": "builder __tact_store_address(builder b, slice address)",
  },
  {
    "code": {
      "code": "if (null?(address)) {
    b = b.store_uint(0, 2);
    return b;
} else {
    return __tact_store_address(b, address);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_store_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_store_address_opt",
    "signature": "builder __tact_store_address_opt(builder b, slice address)",
  },
  {
    "code": {
      "code": "var b = begin_cell();
b = b.store_uint(2, 2);
b = b.store_uint(0, 1);
b = b.store_int(chain, 8);
b = b.store_uint(hash, 256);
var addr = b.end_cell().begin_parse();
return __tact_verify_address(addr);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_verify_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_create_address",
    "signature": "slice __tact_create_address(int chain, int hash)",
  },
  {
    "code": {
      "code": "var b = begin_cell();
b = b.store_uint(0, 2);
b = b.store_uint(3, 2);
b = b.store_uint(0, 1);
b = b.store_ref(code);
b = b.store_ref(data);
var hash = cell_hash(b.end_cell());
return __tact_create_address(chain, hash);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_create_address",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_compute_contract_address",
    "signature": "slice __tact_compute_contract_address(int chain, cell code, cell data)",
  },
  {
    "code": {
      "code": "return pair_first(get_balance());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_my_balance",
    "signature": "int __tact_my_balance()",
  },
  {
    "code": {
      "code": "throw_if(128, null?(x)); return x;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
      "inline",
    },
    "name": "__tact_not_null",
    "signature": "forall X -> X __tact_not_null(X x)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTDEL"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete",
    "signature": "(cell, int) __tact_dict_delete(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTIDEL"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete_int",
    "signature": "(cell, int) __tact_dict_delete_int(cell dict, int key_len, int index)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTUDEL"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_delete_uint",
    "signature": "(cell, int) __tact_dict_delete_uint(cell dict, int key_len, int index)",
  },
  {
    "code": {
      "code": "asm(value index dict key_len) "DICTSETREF"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_set_ref",
    "signature": "((cell), ()) __tact_dict_set_ref(cell dict, int key_len, slice index, cell value)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_get",
    "signature": "(slice, int) __tact_dict_get(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "asm(index dict key_len) "DICTGETREF" "NULLSWAPIFNOT"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_get_ref",
    "signature": "(cell, int) __tact_dict_get_ref(cell dict, int key_len, slice index)",
  },
  {
    "code": {
      "code": "asm(dict key_len -> 1 0 2) "DICTMIN" "NULLSWAPIFNOT2"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_min",
    "signature": "(slice, slice, int) __tact_dict_min(cell dict, int key_len)",
  },
  {
    "code": {
      "code": "asm(dict key_len -> 1 0 2) "DICTMINREF" "NULLSWAPIFNOT2"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_min_ref",
    "signature": "(slice, cell, int) __tact_dict_min_ref(cell dict, int key_len)",
  },
  {
    "code": {
      "code": "asm(pivot dict key_len -> 1 0 2) "DICTGETNEXT" "NULLSWAPIFNOT2"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_dict_next",
    "signature": "(slice, slice, int) __tact_dict_next(cell dict, int key_len, slice pivot)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(dict, key_len, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {},
    "name": "__tact_dict_next_ref",
    "signature": "(slice, cell, int) __tact_dict_next_ref(cell dict, int key_len, slice pivot)",
  },
  {
    "code": {
      "code": "asm "STRDUMP" "DROP" "STRDUMP" "DROP" "s0 DUMP" "DROP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug",
    "signature": "forall X -> () __tact_debug(X value, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "asm "STRDUMP" "DROP" "STRDUMP" "DROP" "STRDUMP" "DROP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_str",
    "signature": "() __tact_debug_str(slice value, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "if (value) {
    __tact_debug_str("true", debug_print_1, debug_print_2);
} else {
    __tact_debug_str("false", debug_print_1, debug_print_2);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_debug_str",
    },
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_bool",
    "signature": "() __tact_debug_bool(int value, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "asm "SDSUBSTR"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_preload_offset",
    "signature": "(slice) __tact_preload_offset(slice s, int offset, int bits)",
  },
  {
    "code": {
      "code": "slice new_data = begin_cell()
    .store_slice(data)
    .store_slice("0000"s)
.end_cell().begin_parse();
int reg = 0;
while (~ new_data.slice_data_empty?()) {
    int byte = new_data~load_uint(8);
    int mask = 0x80;
    while (mask > 0) {
        reg <<= 1;
        if (byte & mask) {
            reg += 1;
        }
        mask >>= 1;
        if (reg > 0xffff) {
            reg &= 0xffff;
            reg ^= 0x1021;
        }
    }
}
(int q, int r) = divmod(reg, 256);
return begin_cell()
    .store_uint(q, 8)
    .store_uint(r, 8)
.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline_ref",
    },
    "name": "__tact_crc16",
    "signature": "(slice) __tact_crc16(slice data)",
  },
  {
    "code": {
      "code": "slice chars = "4142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A303132333435363738392D5F"s;
builder res = begin_cell();

while (data.slice_bits() >= 24) {
    (int bs1, int bs2, int bs3) = (data~load_uint(8), data~load_uint(8), data~load_uint(8));

    int n = (bs1 << 16) | (bs2 << 8) | bs3;

    res = res
        .store_slice(__tact_preload_offset(chars, ((n >> 18) & 63) * 8, 8))
        .store_slice(__tact_preload_offset(chars, ((n >> 12) & 63) * 8, 8))
        .store_slice(__tact_preload_offset(chars, ((n >>  6) & 63) * 8, 8))
        .store_slice(__tact_preload_offset(chars, ((n      ) & 63) * 8, 8));
}

return res.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_preload_offset",
    },
    "flags": Set {},
    "name": "__tact_base64_encode",
    "signature": "(slice) __tact_base64_encode(slice data)",
  },
  {
    "code": {
      "code": "(int wc, int hash) = address.parse_std_addr();

slice user_friendly_address = begin_cell()
    .store_slice("11"s)
    .store_uint((wc + 0x100) % 0x100, 8)
    .store_uint(hash, 256)
.end_cell().begin_parse();

slice checksum = __tact_crc16(user_friendly_address);
slice user_friendly_address_with_checksum = begin_cell()
    .store_slice(user_friendly_address)
    .store_slice(checksum)
.end_cell().begin_parse();

return __tact_base64_encode(user_friendly_address_with_checksum);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_crc16",
      "__tact_base64_encode",
    },
    "flags": Set {},
    "name": "__tact_address_to_user_friendly",
    "signature": "(slice) __tact_address_to_user_friendly(slice address)",
  },
  {
    "code": {
      "code": "__tact_debug_str(__tact_address_to_user_friendly(address), debug_print_1, debug_print_2);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_debug_str",
      "__tact_address_to_user_friendly",
    },
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_address",
    "signature": "() __tact_debug_address(slice address, slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "asm "STRDUMP" "DROP" "STRDUMP" "DROP" "DUMPSTK"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
    },
    "name": "__tact_debug_stack",
    "signature": "() __tact_debug_stack(slice debug_print_1, slice debug_print_2)",
  },
  {
    "code": {
      "code": "return __tact_context;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_context_get",
    "signature": "(int, slice, int, slice) __tact_context_get()",
  },
  {
    "code": {
      "code": "return __tact_context_sender;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_context_get_sender",
    "signature": "slice __tact_context_get_sender()",
  },
  {
    "code": {
      "code": "if (null?(__tact_randomized)) {
    randomize_lt();
    __tact_randomized = true;
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "impure",
      "inline",
    },
    "name": "__tact_prepare_random",
    "signature": "() __tact_prepare_random()",
  },
  {
    "code": {
      "code": "return b.store_int(v, 1);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_store_bool",
    "signature": "builder __tact_store_bool(builder b, int v)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_to_tuple",
    "signature": "forall X -> tuple __tact_to_tuple(X x)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_from_tuple",
    "signature": "forall X -> X __tact_from_tuple(tuple x)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_int",
    "signature": "(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r~load_int(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_int",
    "signature": "int __tact_dict_get_int_int(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_int",
    "signature": "(int, int, int) __tact_dict_min_int_int(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_int",
    "signature": "(int, int, int) __tact_dict_next_int_int(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_uint",
    "signature": "(cell, ()) __tact_dict_set_int_uint(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r~load_uint(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_uint",
    "signature": "int __tact_dict_get_int_uint(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_uint",
    "signature": "(int, int, int) __tact_dict_min_int_uint(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_uint",
    "signature": "(int, int, int) __tact_dict_next_int_uint(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_int",
    "signature": "(cell, ()) __tact_dict_set_uint_int(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r~load_int(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_int",
    "signature": "int __tact_dict_get_uint_int(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_int",
    "signature": "(int, int, int) __tact_dict_min_uint_int(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_int",
    "signature": "(int, int, int) __tact_dict_next_uint_int(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_uint",
    "signature": "(cell, ()) __tact_dict_set_uint_uint(cell d, int kl, int k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r~load_uint(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_uint",
    "signature": "int __tact_dict_get_uint_uint(cell d, int kl, int k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_uint",
    "signature": "(int, int, int) __tact_dict_min_uint_uint(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_uint",
    "signature": "(int, int, int) __tact_dict_next_uint_uint(cell d, int kl, int pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set_ref(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_cell",
    "signature": "(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get_ref?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_cell",
    "signature": "cell __tact_dict_get_int_cell(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min_ref?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_cell",
    "signature": "(int, cell, int) __tact_dict_min_int_cell(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_cell",
    "signature": "(int, cell, int) __tact_dict_next_int_cell(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set_ref(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_cell",
    "signature": "(cell, ()) __tact_dict_set_uint_cell(cell d, int kl, int k, cell v)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get_ref?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_cell",
    "signature": "cell __tact_dict_get_uint_cell(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min_ref?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_cell",
    "signature": "(int, cell, int) __tact_dict_min_uint_cell(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_cell",
    "signature": "(int, cell, int) __tact_dict_next_uint_cell(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = idict_delete?(d, kl, k);
    return (r, ());
} else {
    return (idict_set(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_int_slice",
    "signature": "(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v)",
  },
  {
    "code": {
      "code": "var (r, ok) = idict_get?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_int_slice",
    "signature": "slice __tact_dict_get_int_slice(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_min?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_int_slice",
    "signature": "(int, slice, int) __tact_dict_min_int_slice(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = idict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_int_slice",
    "signature": "(int, slice, int) __tact_dict_next_int_slice(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = udict_delete?(d, kl, k);
    return (r, ());
} else {
    return (udict_set(d, kl, k, v), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_uint_slice",
    "signature": "(cell, ()) __tact_dict_set_uint_slice(cell d, int kl, int k, slice v)",
  },
  {
    "code": {
      "code": "var (r, ok) = udict_get?(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_uint_slice",
    "signature": "slice __tact_dict_get_uint_slice(cell d, int kl, int k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_min?(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_uint_slice",
    "signature": "(int, slice, int) __tact_dict_min_uint_slice(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = udict_get_next?(d, kl, pivot);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_uint_slice",
    "signature": "(int, slice, int) __tact_dict_next_uint_slice(cell d, int kl, int pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_int",
    "signature": "(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r~load_int(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_int",
    "signature": "int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_int",
    "signature": "(slice, int, int) __tact_dict_min_slice_int(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_int(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_int",
    "signature": "(slice, int, int) __tact_dict_next_slice_int(cell d, int kl, slice pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_uint",
    "signature": "(cell, ()) __tact_dict_set_slice_uint(cell d, int kl, slice k, int v, int vl)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r~load_uint(vl);
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_uint",
    "signature": "int __tact_dict_get_slice_uint(cell d, int kl, slice k, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_uint",
    "signature": "(slice, int, int) __tact_dict_min_slice_uint(cell d, int kl, int vl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_uint(vl), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_uint",
    "signature": "(slice, int, int) __tact_dict_next_slice_uint(cell d, int kl, slice pivot, int vl)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return __tact_dict_set_ref(d, kl, k, v);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
      "__tact_dict_set_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_cell",
    "signature": "(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get_ref(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_cell",
    "signature": "cell __tact_dict_get_slice_cell(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min_ref(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min_ref",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_cell",
    "signature": "(slice, cell, int) __tact_dict_min_slice_cell(cell d, int kl)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_next(d, kl, pivot);
if (flag) {
    return (key, value~load_ref(), flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_cell",
    "signature": "(slice, cell, int) __tact_dict_next_slice_cell(cell d, int kl, slice pivot)",
  },
  {
    "code": {
      "code": "if (null?(v)) {
    var (r, ok) = __tact_dict_delete(d, kl, k);
    return (r, ());
} else {
    return (dict_set_builder(d, kl, k, begin_cell().store_slice(v)), ());
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_delete",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_slice_slice",
    "signature": "(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v)",
  },
  {
    "code": {
      "code": "var (r, ok) = __tact_dict_get(d, kl, k);
if (ok) {
    return r;
} else {
    return null();
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_get",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_slice_slice",
    "signature": "slice __tact_dict_get_slice_slice(cell d, int kl, slice k)",
  },
  {
    "code": {
      "code": "var (key, value, flag) = __tact_dict_min(d, kl);
if (flag) {
    return (key, value, flag);
} else {
    return (null(), null(), flag);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_min",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_min_slice_slice",
    "signature": "(slice, slice, int) __tact_dict_min_slice_slice(cell d, int kl)",
  },
  {
    "code": {
      "code": "return __tact_dict_next(d, kl, pivot);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_dict_next",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_next_slice_slice",
    "signature": "(slice, slice, int) __tact_dict_next_slice_slice(cell d, int kl, slice pivot)",
  },
  {
    "code": {
      "code": "return equal_slice_bits(a, b);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_bits",
    "signature": "int __tact_slice_eq_bits(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (equal_slice_bits(a, b));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_bits_nullable_one",
    "signature": "int __tact_slice_eq_bits_nullable_one(slice a, slice b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( equal_slice_bits(a, b) ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_bits_nullable",
    "signature": "int __tact_slice_eq_bits_nullable(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (a == b);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_eq_nullable_one",
    "signature": "int __tact_int_eq_nullable_one(int a, int b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (true) : (a != b);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_neq_nullable_one",
    "signature": "int __tact_int_neq_nullable_one(int a, int b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a == b ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_eq_nullable",
    "signature": "int __tact_int_eq_nullable(int a, int b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a != b ) : ( true ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_int_neq_nullable",
    "signature": "int __tact_int_neq_nullable(int a, int b)",
  },
  {
    "code": {
      "code": "return (a.cell_hash() ==  b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_eq",
    "signature": "int __tact_cell_eq(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (a.cell_hash() !=  b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_neq",
    "signature": "int __tact_cell_neq(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (a.cell_hash() == b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_eq_nullable_one",
    "signature": "int __tact_cell_eq_nullable_one(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (true) : (a.cell_hash() != b.cell_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_neq_nullable_one",
    "signature": "int __tact_cell_neq_nullable_one(cell a, cell b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.cell_hash() == b.cell_hash() ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_eq_nullable",
    "signature": "int __tact_cell_eq_nullable(cell a, cell b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.cell_hash() != b.cell_hash() ) : ( true ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_cell_neq_nullable",
    "signature": "int __tact_cell_neq_nullable(cell a, cell b)",
  },
  {
    "code": {
      "code": "return (a.slice_hash() ==  b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq",
    "signature": "int __tact_slice_eq(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (a.slice_hash() !=  b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_neq",
    "signature": "int __tact_slice_neq(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (false) : (a.slice_hash() == b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_nullable_one",
    "signature": "int __tact_slice_eq_nullable_one(slice a, slice b)",
  },
  {
    "code": {
      "code": "return (null?(a)) ? (true) : (a.slice_hash() != b.slice_hash());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_neq_nullable_one",
    "signature": "int __tact_slice_neq_nullable_one(slice a, slice b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.slice_hash() == b.slice_hash() ) : ( false ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_eq_nullable",
    "signature": "int __tact_slice_eq_nullable(slice a, slice b)",
  },
  {
    "code": {
      "code": "var a_is_null = null?(a);
var b_is_null = null?(b);
return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.slice_hash() != b.slice_hash() ) : ( true ) );",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_slice_neq_nullable",
    "signature": "int __tact_slice_neq_nullable(slice a, slice b)",
  },
  {
    "code": {
      "code": "return udict_set_ref(dict, 16, id, code);",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_set_code",
    "signature": "cell __tact_dict_set_code(cell dict, int id, cell code)",
  },
  {
    "code": {
      "code": "var (data, ok) = udict_get_ref?(dict, 16, id);
throw_unless(135, ok);
return data;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_dict_get_code",
    "signature": "cell __tact_dict_get_code(cell dict, int id)",
  },
  {
    "code": {
      "code": "asm "NIL"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_0",
    "signature": "tuple __tact_tuple_create_0()",
  },
  {
    "code": {
      "code": "return ();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_tuple_destroy_0",
    "signature": "() __tact_tuple_destroy_0()",
  },
  {
    "code": {
      "code": "asm "1 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_1",
    "signature": "forall X0 -> tuple __tact_tuple_create_1((X0) v)",
  },
  {
    "code": {
      "code": "asm "1 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_1",
    "signature": "forall X0 -> (X0) __tact_tuple_destroy_1(tuple v)",
  },
  {
    "code": {
      "code": "asm "2 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_2",
    "signature": "forall X0, X1 -> tuple __tact_tuple_create_2((X0, X1) v)",
  },
  {
    "code": {
      "code": "asm "2 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_2",
    "signature": "forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v)",
  },
  {
    "code": {
      "code": "asm "3 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_3",
    "signature": "forall X0, X1, X2 -> tuple __tact_tuple_create_3((X0, X1, X2) v)",
  },
  {
    "code": {
      "code": "asm "3 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_3",
    "signature": "forall X0, X1, X2 -> (X0, X1, X2) __tact_tuple_destroy_3(tuple v)",
  },
  {
    "code": {
      "code": "asm "4 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_4",
    "signature": "forall X0, X1, X2, X3 -> tuple __tact_tuple_create_4((X0, X1, X2, X3) v)",
  },
  {
    "code": {
      "code": "asm "4 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_4",
    "signature": "forall X0, X1, X2, X3 -> (X0, X1, X2, X3) __tact_tuple_destroy_4(tuple v)",
  },
  {
    "code": {
      "code": "asm "5 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_5",
    "signature": "forall X0, X1, X2, X3, X4 -> tuple __tact_tuple_create_5((X0, X1, X2, X3, X4) v)",
  },
  {
    "code": {
      "code": "asm "5 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_5",
    "signature": "forall X0, X1, X2, X3, X4 -> (X0, X1, X2, X3, X4) __tact_tuple_destroy_5(tuple v)",
  },
  {
    "code": {
      "code": "asm "6 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_6",
    "signature": "forall X0, X1, X2, X3, X4, X5 -> tuple __tact_tuple_create_6((X0, X1, X2, X3, X4, X5) v)",
  },
  {
    "code": {
      "code": "asm "6 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_6",
    "signature": "forall X0, X1, X2, X3, X4, X5 -> (X0, X1, X2, X3, X4, X5) __tact_tuple_destroy_6(tuple v)",
  },
  {
    "code": {
      "code": "asm "7 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_7",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6 -> tuple __tact_tuple_create_7((X0, X1, X2, X3, X4, X5, X6) v)",
  },
  {
    "code": {
      "code": "asm "7 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_7",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6 -> (X0, X1, X2, X3, X4, X5, X6) __tact_tuple_destroy_7(tuple v)",
  },
  {
    "code": {
      "code": "asm "8 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_8",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7 -> tuple __tact_tuple_create_8((X0, X1, X2, X3, X4, X5, X6, X7) v)",
  },
  {
    "code": {
      "code": "asm "8 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_8",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7 -> (X0, X1, X2, X3, X4, X5, X6, X7) __tact_tuple_destroy_8(tuple v)",
  },
  {
    "code": {
      "code": "asm "9 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_9",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8 -> tuple __tact_tuple_create_9((X0, X1, X2, X3, X4, X5, X6, X7, X8) v)",
  },
  {
    "code": {
      "code": "asm "9 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_9",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8) __tact_tuple_destroy_9(tuple v)",
  },
  {
    "code": {
      "code": "asm "10 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_10",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9 -> tuple __tact_tuple_create_10((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) v)",
  },
  {
    "code": {
      "code": "asm "10 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_10",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) __tact_tuple_destroy_10(tuple v)",
  },
  {
    "code": {
      "code": "asm "11 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_11",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 -> tuple __tact_tuple_create_11((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) v)",
  },
  {
    "code": {
      "code": "asm "11 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_11",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) __tact_tuple_destroy_11(tuple v)",
  },
  {
    "code": {
      "code": "asm "12 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_12",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11 -> tuple __tact_tuple_create_12((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) v)",
  },
  {
    "code": {
      "code": "asm "12 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_12",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) __tact_tuple_destroy_12(tuple v)",
  },
  {
    "code": {
      "code": "asm "13 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_13",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12 -> tuple __tact_tuple_create_13((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) v)",
  },
  {
    "code": {
      "code": "asm "13 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_13",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) __tact_tuple_destroy_13(tuple v)",
  },
  {
    "code": {
      "code": "asm "14 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_14",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13 -> tuple __tact_tuple_create_14((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) v)",
  },
  {
    "code": {
      "code": "asm "14 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_14",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) __tact_tuple_destroy_14(tuple v)",
  },
  {
    "code": {
      "code": "asm "15 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_15",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14 -> tuple __tact_tuple_create_15((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) v)",
  },
  {
    "code": {
      "code": "asm "15 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_15",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) __tact_tuple_destroy_15(tuple v)",
  },
  {
    "code": {
      "code": "asm "16 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_16",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15 -> tuple __tact_tuple_create_16((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15) v)",
  },
  {
    "code": {
      "code": "asm "16 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_16",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15) __tact_tuple_destroy_16(tuple v)",
  },
  {
    "code": {
      "code": "asm "17 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_17",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16 -> tuple __tact_tuple_create_17((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16) v)",
  },
  {
    "code": {
      "code": "asm "17 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_17",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16) __tact_tuple_destroy_17(tuple v)",
  },
  {
    "code": {
      "code": "asm "18 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_18",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17 -> tuple __tact_tuple_create_18((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17) v)",
  },
  {
    "code": {
      "code": "asm "18 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_18",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17) __tact_tuple_destroy_18(tuple v)",
  },
  {
    "code": {
      "code": "asm "19 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_19",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18 -> tuple __tact_tuple_create_19((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18) v)",
  },
  {
    "code": {
      "code": "asm "19 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_19",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18) __tact_tuple_destroy_19(tuple v)",
  },
  {
    "code": {
      "code": "asm "20 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_20",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19 -> tuple __tact_tuple_create_20((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19) v)",
  },
  {
    "code": {
      "code": "asm "20 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_20",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19) __tact_tuple_destroy_20(tuple v)",
  },
  {
    "code": {
      "code": "asm "21 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_21",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20 -> tuple __tact_tuple_create_21((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20) v)",
  },
  {
    "code": {
      "code": "asm "21 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_21",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20) __tact_tuple_destroy_21(tuple v)",
  },
  {
    "code": {
      "code": "asm "22 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_22",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21 -> tuple __tact_tuple_create_22((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21) v)",
  },
  {
    "code": {
      "code": "asm "22 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_22",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21) __tact_tuple_destroy_22(tuple v)",
  },
  {
    "code": {
      "code": "asm "23 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_23",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22 -> tuple __tact_tuple_create_23((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22) v)",
  },
  {
    "code": {
      "code": "asm "23 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_23",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22) __tact_tuple_destroy_23(tuple v)",
  },
  {
    "code": {
      "code": "asm "24 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_24",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23 -> tuple __tact_tuple_create_24((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23) v)",
  },
  {
    "code": {
      "code": "asm "24 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_24",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23) __tact_tuple_destroy_24(tuple v)",
  },
  {
    "code": {
      "code": "asm "25 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_25",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24 -> tuple __tact_tuple_create_25((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24) v)",
  },
  {
    "code": {
      "code": "asm "25 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_25",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24) __tact_tuple_destroy_25(tuple v)",
  },
  {
    "code": {
      "code": "asm "26 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_26",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25 -> tuple __tact_tuple_create_26((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25) v)",
  },
  {
    "code": {
      "code": "asm "26 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_26",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25) __tact_tuple_destroy_26(tuple v)",
  },
  {
    "code": {
      "code": "asm "27 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_27",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26 -> tuple __tact_tuple_create_27((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26) v)",
  },
  {
    "code": {
      "code": "asm "27 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_27",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26) __tact_tuple_destroy_27(tuple v)",
  },
  {
    "code": {
      "code": "asm "28 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_28",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27 -> tuple __tact_tuple_create_28((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27) v)",
  },
  {
    "code": {
      "code": "asm "28 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_28",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27) __tact_tuple_destroy_28(tuple v)",
  },
  {
    "code": {
      "code": "asm "29 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_29",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28 -> tuple __tact_tuple_create_29((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28) v)",
  },
  {
    "code": {
      "code": "asm "29 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_29",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28) __tact_tuple_destroy_29(tuple v)",
  },
  {
    "code": {
      "code": "asm "30 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_30",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29 -> tuple __tact_tuple_create_30((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29) v)",
  },
  {
    "code": {
      "code": "asm "30 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_30",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29) __tact_tuple_destroy_30(tuple v)",
  },
  {
    "code": {
      "code": "asm "31 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_31",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30 -> tuple __tact_tuple_create_31((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30) v)",
  },
  {
    "code": {
      "code": "asm "31 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_31",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30) __tact_tuple_destroy_31(tuple v)",
  },
  {
    "code": {
      "code": "asm "32 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_32",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31 -> tuple __tact_tuple_create_32((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31) v)",
  },
  {
    "code": {
      "code": "asm "32 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_32",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31) __tact_tuple_destroy_32(tuple v)",
  },
  {
    "code": {
      "code": "asm "33 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_33",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32 -> tuple __tact_tuple_create_33((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32) v)",
  },
  {
    "code": {
      "code": "asm "33 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_33",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32) __tact_tuple_destroy_33(tuple v)",
  },
  {
    "code": {
      "code": "asm "34 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_34",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33 -> tuple __tact_tuple_create_34((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33) v)",
  },
  {
    "code": {
      "code": "asm "34 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_34",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33) __tact_tuple_destroy_34(tuple v)",
  },
  {
    "code": {
      "code": "asm "35 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_35",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34 -> tuple __tact_tuple_create_35((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34) v)",
  },
  {
    "code": {
      "code": "asm "35 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_35",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34) __tact_tuple_destroy_35(tuple v)",
  },
  {
    "code": {
      "code": "asm "36 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_36",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35 -> tuple __tact_tuple_create_36((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35) v)",
  },
  {
    "code": {
      "code": "asm "36 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_36",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35) __tact_tuple_destroy_36(tuple v)",
  },
  {
    "code": {
      "code": "asm "37 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_37",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36 -> tuple __tact_tuple_create_37((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36) v)",
  },
  {
    "code": {
      "code": "asm "37 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_37",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36) __tact_tuple_destroy_37(tuple v)",
  },
  {
    "code": {
      "code": "asm "38 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_38",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37 -> tuple __tact_tuple_create_38((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37) v)",
  },
  {
    "code": {
      "code": "asm "38 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_38",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37) __tact_tuple_destroy_38(tuple v)",
  },
  {
    "code": {
      "code": "asm "39 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_39",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38 -> tuple __tact_tuple_create_39((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38) v)",
  },
  {
    "code": {
      "code": "asm "39 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_39",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38) __tact_tuple_destroy_39(tuple v)",
  },
  {
    "code": {
      "code": "asm "40 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_40",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39 -> tuple __tact_tuple_create_40((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39) v)",
  },
  {
    "code": {
      "code": "asm "40 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_40",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39) __tact_tuple_destroy_40(tuple v)",
  },
  {
    "code": {
      "code": "asm "41 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_41",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40 -> tuple __tact_tuple_create_41((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40) v)",
  },
  {
    "code": {
      "code": "asm "41 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_41",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40) __tact_tuple_destroy_41(tuple v)",
  },
  {
    "code": {
      "code": "asm "42 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_42",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41 -> tuple __tact_tuple_create_42((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41) v)",
  },
  {
    "code": {
      "code": "asm "42 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_42",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41) __tact_tuple_destroy_42(tuple v)",
  },
  {
    "code": {
      "code": "asm "43 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_43",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42 -> tuple __tact_tuple_create_43((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42) v)",
  },
  {
    "code": {
      "code": "asm "43 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_43",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42) __tact_tuple_destroy_43(tuple v)",
  },
  {
    "code": {
      "code": "asm "44 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_44",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43 -> tuple __tact_tuple_create_44((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43) v)",
  },
  {
    "code": {
      "code": "asm "44 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_44",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43) __tact_tuple_destroy_44(tuple v)",
  },
  {
    "code": {
      "code": "asm "45 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_45",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44 -> tuple __tact_tuple_create_45((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44) v)",
  },
  {
    "code": {
      "code": "asm "45 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_45",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44) __tact_tuple_destroy_45(tuple v)",
  },
  {
    "code": {
      "code": "asm "46 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_46",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45 -> tuple __tact_tuple_create_46((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45) v)",
  },
  {
    "code": {
      "code": "asm "46 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_46",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45) __tact_tuple_destroy_46(tuple v)",
  },
  {
    "code": {
      "code": "asm "47 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_47",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46 -> tuple __tact_tuple_create_47((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46) v)",
  },
  {
    "code": {
      "code": "asm "47 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_47",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46) __tact_tuple_destroy_47(tuple v)",
  },
  {
    "code": {
      "code": "asm "48 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_48",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47 -> tuple __tact_tuple_create_48((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47) v)",
  },
  {
    "code": {
      "code": "asm "48 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_48",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47) __tact_tuple_destroy_48(tuple v)",
  },
  {
    "code": {
      "code": "asm "49 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_49",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48 -> tuple __tact_tuple_create_49((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48) v)",
  },
  {
    "code": {
      "code": "asm "49 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_49",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48) __tact_tuple_destroy_49(tuple v)",
  },
  {
    "code": {
      "code": "asm "50 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_50",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49 -> tuple __tact_tuple_create_50((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49) v)",
  },
  {
    "code": {
      "code": "asm "50 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_50",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49) __tact_tuple_destroy_50(tuple v)",
  },
  {
    "code": {
      "code": "asm "51 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_51",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50 -> tuple __tact_tuple_create_51((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50) v)",
  },
  {
    "code": {
      "code": "asm "51 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_51",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50) __tact_tuple_destroy_51(tuple v)",
  },
  {
    "code": {
      "code": "asm "52 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_52",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51 -> tuple __tact_tuple_create_52((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51) v)",
  },
  {
    "code": {
      "code": "asm "52 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_52",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51) __tact_tuple_destroy_52(tuple v)",
  },
  {
    "code": {
      "code": "asm "53 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_53",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52 -> tuple __tact_tuple_create_53((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52) v)",
  },
  {
    "code": {
      "code": "asm "53 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_53",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52) __tact_tuple_destroy_53(tuple v)",
  },
  {
    "code": {
      "code": "asm "54 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_54",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53 -> tuple __tact_tuple_create_54((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53) v)",
  },
  {
    "code": {
      "code": "asm "54 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_54",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53) __tact_tuple_destroy_54(tuple v)",
  },
  {
    "code": {
      "code": "asm "55 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_55",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54 -> tuple __tact_tuple_create_55((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54) v)",
  },
  {
    "code": {
      "code": "asm "55 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_55",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54) __tact_tuple_destroy_55(tuple v)",
  },
  {
    "code": {
      "code": "asm "56 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_56",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55 -> tuple __tact_tuple_create_56((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55) v)",
  },
  {
    "code": {
      "code": "asm "56 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_56",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55) __tact_tuple_destroy_56(tuple v)",
  },
  {
    "code": {
      "code": "asm "57 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_57",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56 -> tuple __tact_tuple_create_57((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56) v)",
  },
  {
    "code": {
      "code": "asm "57 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_57",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56) __tact_tuple_destroy_57(tuple v)",
  },
  {
    "code": {
      "code": "asm "58 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_58",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57 -> tuple __tact_tuple_create_58((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57) v)",
  },
  {
    "code": {
      "code": "asm "58 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_58",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57) __tact_tuple_destroy_58(tuple v)",
  },
  {
    "code": {
      "code": "asm "59 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_59",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58 -> tuple __tact_tuple_create_59((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58) v)",
  },
  {
    "code": {
      "code": "asm "59 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_59",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58) __tact_tuple_destroy_59(tuple v)",
  },
  {
    "code": {
      "code": "asm "60 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_60",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59 -> tuple __tact_tuple_create_60((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59) v)",
  },
  {
    "code": {
      "code": "asm "60 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_60",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59) __tact_tuple_destroy_60(tuple v)",
  },
  {
    "code": {
      "code": "asm "61 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_61",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60 -> tuple __tact_tuple_create_61((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60) v)",
  },
  {
    "code": {
      "code": "asm "61 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_61",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60) __tact_tuple_destroy_61(tuple v)",
  },
  {
    "code": {
      "code": "asm "62 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_62",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61 -> tuple __tact_tuple_create_62((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61) v)",
  },
  {
    "code": {
      "code": "asm "62 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_62",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61) __tact_tuple_destroy_62(tuple v)",
  },
  {
    "code": {
      "code": "asm "63 TUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_create_63",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62 -> tuple __tact_tuple_create_63((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62) v)",
  },
  {
    "code": {
      "code": "asm "63 UNTUPLE"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_tuple_destroy_63",
    "signature": "forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62) __tact_tuple_destroy_63(tuple v)",
  },
  {
    "code": {
      "code": "return tpush(tpush(empty_tuple(), b), null());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start",
    "signature": "tuple __tact_string_builder_start(builder b)",
  },
  {
    "code": {
      "code": "return __tact_string_builder_start(begin_cell().store_uint(0, 32));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_start",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start_comment",
    "signature": "tuple __tact_string_builder_start_comment()",
  },
  {
    "code": {
      "code": "return __tact_string_builder_start(begin_cell().store_uint(0, 8));",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_start",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start_tail_string",
    "signature": "tuple __tact_string_builder_start_tail_string()",
  },
  {
    "code": {
      "code": "return __tact_string_builder_start(begin_cell());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_start",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_start_string",
    "signature": "tuple __tact_string_builder_start_string()",
  },
  {
    "code": {
      "code": "(builder b, tuple tail) = uncons(builders);
cell c = b.end_cell();
while(~ null?(tail)) {
    (b, tail) = uncons(tail);
    c = b.store_ref(c).end_cell();
}
return c;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_end",
    "signature": "cell __tact_string_builder_end(tuple builders)",
  },
  {
    "code": {
      "code": "return __tact_string_builder_end(builders).begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_end",
    },
    "flags": Set {
      "inline",
    },
    "name": "__tact_string_builder_end_slice",
    "signature": "slice __tact_string_builder_end_slice(tuple builders)",
  },
  {
    "code": {
      "code": "int sliceRefs = slice_refs(sc);
int sliceBits = slice_bits(sc);

while((sliceBits > 0) | (sliceRefs > 0)) {

    ;; Load the current builder
    (builder b, tuple tail) = uncons(builders);
    int remBytes = 127 - (builder_bits(b) / 8);
    int exBytes = sliceBits / 8;

    ;; Append bits
    int amount = min(remBytes, exBytes);
    if (amount > 0) {
        slice read = sc~load_bits(amount * 8);
        b = b.store_slice(read);
    }

    ;; Update builders
    builders = cons(b, tail);

    ;; Check if we need to add a new cell and continue
    if (exBytes - amount > 0) {
        var bb = begin_cell();
        builders = cons(bb, builders);
        sliceBits = (exBytes - amount) * 8;
    } elseif (sliceRefs > 0) {
        sc = sc~load_ref().begin_parse();
        sliceRefs = slice_refs(sc);
        sliceBits = slice_bits(sc);
    } else {
        sliceBits = 0;
        sliceRefs = 0;
    }
}

return ((builders), ());",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_string_builder_append",
    "signature": "((tuple), ()) __tact_string_builder_append(tuple builders, slice sc)",
  },
  {
    "code": {
      "code": "builders~__tact_string_builder_append(sc);
return builders;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {
      "__tact_string_builder_append",
    },
    "flags": Set {},
    "name": "__tact_string_builder_append_not_mut",
    "signature": "(tuple) __tact_string_builder_append_not_mut(tuple builders, slice sc)",
  },
  {
    "code": {
      "code": "var b = begin_cell();
if (src < 0) {
    b = b.store_uint(45, 8);
    src = - src;
}

if (src < 1000000000000000000000000000000) {
    int len = 0;
    int value = 0;
    int mult = 1;
    do {
        (src, int res) = src.divmod(10);
        value = value + (res + 48) * mult;
        mult = mult * 256;
        len = len + 1;
    } until (src == 0);

    b = b.store_uint(value, len * 8);
} else {
    tuple t = empty_tuple();
    int len = 0;
    do {
        int digit = src % 10;
        t~tpush(digit);
        len = len + 1;
        src = src / 10;
    } until (src == 0);

    int c = len - 1;
    repeat(len) {
        int v = t.at(c);
        b = b.store_uint(v + 48, 8);
        c = c - 1;
    }
}
return b.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_int_to_string",
    "signature": "slice __tact_int_to_string(int src)",
  },
  {
    "code": {
      "code": "throw_if(134, (digits <= 0) | (digits > 77));
builder b = begin_cell();

if (src < 0) {
    b = b.store_uint(45, 8);
    src = - src;
}

;; Process rem part
int skip = true;
int len = 0;
int rem = 0;
tuple t = empty_tuple();
repeat(digits) {
    (src, rem) = src.divmod(10);
    if ( ~ ( skip & ( rem == 0 ) ) ) {
        skip = false;
        t~tpush(rem + 48);
        len = len + 1;
    }
}

;; Process dot
if (~ skip) {
    t~tpush(46);
    len = len + 1;
}

;; Main
do {
    (src, rem) = src.divmod(10);
    t~tpush(rem + 48);
    len = len + 1;
} until (src == 0);

;; Assemble
int c = len - 1;
repeat(len) {
    int v = t.at(c);
    b = b.store_uint(v, 8);
    c = c - 1;
}

;; Result
return b.end_cell().begin_parse();",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_float_to_string",
    "signature": "slice __tact_float_to_string(int src, int digits)",
  },
  {
    "code": {
      "code": "asm "DUP 5 THROWIFNOT UBITSIZE DEC"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_log2",
    "signature": "int __tact_log2(int num)",
  },
  {
    "code": {
      "code": "throw_unless(5, num > 0);
throw_unless(5, base > 1);
if (num < base) {
    return 0;
}
int result = 0;
while (num >= base) {
    num /= base;
    result += 1;
}
return result;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_log",
    "signature": "int __tact_log(int num, int base)",
  },
  {
    "code": {
      "code": "throw_unless(5, exp >= 0);
int result = 1;
repeat (exp) {
    result *= base;
}
return result;",
      "kind": "generic",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "__tact_pow",
    "signature": "int __tact_pow(int base, int exp)",
  },
  {
    "code": {
      "code": "asm "POW2"",
      "kind": "asm",
    },
    "comment": null,
    "context": "stdlib",
    "depends": Set {},
    "flags": Set {},
    "name": "__tact_pow2",
    "signature": "int __tact_pow2(int exp)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
build_0 = build_0.store_ref(v'a);
build_0 = ~ null?(v'b) ? build_0.store_int(true, 1).store_ref(v'b) : build_0.store_int(false, 1);
var build_1 = begin_cell();
build_1 = ~ null?(v'c) ? build_1.store_int(true, 1).store_ref(begin_cell().store_slice(v'c).end_cell()) : build_1.store_int(false, 1);
build_1 = ~ null?(v'd) ? build_1.store_int(true, 1).store_ref(begin_cell().store_slice(v'd).end_cell()) : build_1.store_int(false, 1);
build_1 = build_1.store_int(v'e, 1);
build_1 = build_1.store_int(v'f, 257);
build_1 = build_1.store_int(v'g, 257);
build_1 = __tact_store_address(build_1, v'h);
build_0 = store_ref(build_0, build_1.end_cell());
return build_0;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_store_address",
    },
    "flags": Set {},
    "name": "$C$_store",
    "signature": "builder $C$_store(builder build_0, (cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "return $C$_store(begin_cell(), v).end_cell();",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "$C$_store",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_store_cell",
    "signature": "cell $C$_store_cell((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'a;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_a",
    "signature": "_ $A$_get_a((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'b;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_b",
    "signature": "_ $A$_get_b((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'c;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_c",
    "signature": "_ $A$_get_c((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'd;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_d",
    "signature": "_ $A$_get_d((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'e;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_e",
    "signature": "_ $A$_get_e((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'f;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_f",
    "signature": "_ $A$_get_f((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'g;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_get_g",
    "signature": "_ $A$_get_g((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {},
    "name": "$A$_tensor_cast",
    "signature": "((int, int, int, int, int, int, int)) $A$_tensor_cast((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "throw_if(128, null?(v));
var (int vvv'a, int vvv'b, int vvv'c, int vvv'd, int vvv'e, int vvv'f, int vvv'g) = __tact_tuple_destroy_7(v);
return (vvv'a, vvv'b, vvv'c, vvv'd, vvv'e, vvv'f, vvv'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "__tact_tuple_destroy_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_not_null",
    "signature": "((int, int, int, int, int, int, int)) $A$_not_null(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return __tact_tuple_create_7(v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "__tact_tuple_create_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_as_optional",
    "signature": "tuple $A$_as_optional((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return __tact_tuple_create_7(v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "__tact_tuple_create_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_to_tuple",
    "signature": "tuple $A$_to_tuple(((int, int, int, int, int, int, int)) v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $A$_to_tuple($A$_not_null(v)); ",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "$A$_to_tuple",
      "$A$_not_null",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_to_opt_tuple",
    "signature": "tuple $A$_to_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (int v'a, int v'b, int v'c, int v'd, int v'e, int v'f, int v'g) = __tact_tuple_destroy_7(v);
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "__tact_tuple_destroy_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_from_tuple",
    "signature": "(int, int, int, int, int, int, int) $A$_from_tuple(tuple v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $A$_as_optional($A$_from_tuple(v));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "$A$_as_optional",
      "$A$_from_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_from_opt_tuple",
    "signature": "tuple $A$_from_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v; 
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$A$_to_external",
    "signature": "(int, int, int, int, int, int, int) $A$_to_external(((int, int, int, int, int, int, int)) v)",
  },
  {
    "code": {
      "code": "var loaded = $A$_to_opt_tuple(v);
if (null?(loaded)) {
    return null();
} else {
    return (loaded);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:A",
    "depends": Set {
      "$A$_to_opt_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$A$_to_opt_external",
    "signature": "tuple $A$_to_opt_external(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'a;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_a",
    "signature": "_ $B$_get_a((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'b;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_b",
    "signature": "_ $B$_get_b((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'c;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_c",
    "signature": "_ $B$_get_c((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'd;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_d",
    "signature": "_ $B$_get_d((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'e;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_e",
    "signature": "_ $B$_get_e((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'f;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_f",
    "signature": "_ $B$_get_f((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return v'g;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_get_g",
    "signature": "_ $B$_get_g((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {},
    "name": "$B$_tensor_cast",
    "signature": "((int, int, int, int, int, int, int)) $B$_tensor_cast((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "throw_if(128, null?(v));
var (int vvv'a, int vvv'b, int vvv'c, int vvv'd, int vvv'e, int vvv'f, int vvv'g) = __tact_tuple_destroy_7(v);
return (vvv'a, vvv'b, vvv'c, vvv'd, vvv'e, vvv'f, vvv'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "__tact_tuple_destroy_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_not_null",
    "signature": "((int, int, int, int, int, int, int)) $B$_not_null(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return __tact_tuple_create_7(v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "__tact_tuple_create_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_as_optional",
    "signature": "tuple $B$_as_optional((int, int, int, int, int, int, int) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
return __tact_tuple_create_7(v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "__tact_tuple_create_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_to_tuple",
    "signature": "tuple $B$_to_tuple(((int, int, int, int, int, int, int)) v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $B$_to_tuple($B$_not_null(v)); ",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "$B$_to_tuple",
      "$B$_not_null",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_to_opt_tuple",
    "signature": "tuple $B$_to_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (int v'a, int v'b, int v'c, int v'd, int v'e, int v'f, int v'g) = __tact_tuple_destroy_7(v);
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "__tact_tuple_destroy_7",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_from_tuple",
    "signature": "(int, int, int, int, int, int, int) $B$_from_tuple(tuple v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $B$_as_optional($B$_from_tuple(v));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "$B$_as_optional",
      "$B$_from_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_from_opt_tuple",
    "signature": "tuple $B$_from_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v; 
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$B$_to_external",
    "signature": "(int, int, int, int, int, int, int) $B$_to_external(((int, int, int, int, int, int, int)) v)",
  },
  {
    "code": {
      "code": "var loaded = $B$_to_opt_tuple(v);
if (null?(loaded)) {
    return null();
} else {
    return (loaded);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:B",
    "depends": Set {
      "$B$_to_opt_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$B$_to_opt_external",
    "signature": "tuple $B$_to_opt_external(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'a;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_a",
    "signature": "_ $C$_get_a((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'b;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_b",
    "signature": "_ $C$_get_b((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'c;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_c",
    "signature": "_ $C$_get_c((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'd;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_d",
    "signature": "_ $C$_get_d((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'e;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_e",
    "signature": "_ $C$_get_e((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'f;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_f",
    "signature": "_ $C$_get_f((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'g;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_g",
    "signature": "_ $C$_get_g((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return v'h;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_get_h",
    "signature": "_ $C$_get_h((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "asm "NOP"",
      "kind": "asm",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {},
    "name": "$C$_tensor_cast",
    "signature": "((cell, cell, slice, slice, int, int, int, slice)) $C$_tensor_cast((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "throw_if(128, null?(v));
var (cell vvv'a, cell vvv'b, slice vvv'c, slice vvv'd, int vvv'e, int vvv'f, int vvv'g, slice vvv'h) = __tact_tuple_destroy_8(v);
return (vvv'a, vvv'b, vvv'c, vvv'd, vvv'e, vvv'f, vvv'g, vvv'h);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_tuple_destroy_8",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_not_null",
    "signature": "((cell, cell, slice, slice, int, int, int, slice)) $C$_not_null(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return __tact_tuple_create_8(v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_tuple_create_8",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_as_optional",
    "signature": "tuple $C$_as_optional((cell, cell, slice, slice, int, int, int, slice) v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
return __tact_tuple_create_8(v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_tuple_create_8",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_to_tuple",
    "signature": "tuple $C$_to_tuple(((cell, cell, slice, slice, int, int, int, slice)) v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $C$_to_tuple($C$_not_null(v)); ",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "$C$_to_tuple",
      "$C$_not_null",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_to_opt_tuple",
    "signature": "tuple $C$_to_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (cell v'a, cell v'b, slice v'c, slice v'd, int v'e, int v'f, int v'g, slice v'h) = __tact_tuple_destroy_8(v);
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g, __tact_verify_address(v'h));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_verify_address",
      "__tact_tuple_destroy_8",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_from_tuple",
    "signature": "(cell, cell, slice, slice, int, int, int, slice) $C$_from_tuple(tuple v)",
  },
  {
    "code": {
      "code": "if (null?(v)) { return null(); } 
return $C$_as_optional($C$_from_tuple(v));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "$C$_as_optional",
      "$C$_from_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_from_opt_tuple",
    "signature": "tuple $C$_from_opt_tuple(tuple v)",
  },
  {
    "code": {
      "code": "var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v; 
return (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h);",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {},
    "flags": Set {
      "inline",
    },
    "name": "$C$_to_external",
    "signature": "(cell, cell, slice, slice, int, int, int, slice) $C$_to_external(((cell, cell, slice, slice, int, int, int, slice)) v)",
  },
  {
    "code": {
      "code": "var loaded = $C$_to_opt_tuple(v);
if (null?(loaded)) {
    return null();
} else {
    return (loaded);
}",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "$C$_to_opt_tuple",
    },
    "flags": Set {
      "inline",
    },
    "name": "$C$_to_opt_external",
    "signature": "tuple $C$_to_opt_external(tuple v)",
  },
  {
    "code": {
      "code": "var v'a = sc_0~load_ref();
var v'b = sc_0~load_int(1) ? sc_0~load_ref() : null();
slice sc_1 = sc_0~load_ref().begin_parse();
var v'c = sc_1~load_int(1) ? sc_1~load_ref().begin_parse() : null();
var v'd = sc_1~load_int(1) ? sc_1~load_ref().begin_parse() : null();
var v'e = sc_1~load_int(1);
var v'f = sc_1~load_int(257);
var v'g = sc_1~load_int(257);
var v'h = sc_1~__tact_load_address();
return (sc_0, (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h));",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "__tact_load_address",
    },
    "flags": Set {},
    "name": "$C$_load",
    "signature": "(slice, ((cell, cell, slice, slice, int, int, int, slice))) $C$_load(slice sc_0)",
  },
  {
    "code": {
      "code": "var r = sc_0~$C$_load();
sc_0.end_parse();
return r;",
      "kind": "generic",
    },
    "comment": null,
    "context": "type:C",
    "depends": Set {
      "$C$_load",
    },
    "flags": Set {},
    "name": "$C$_load_not_mut",
    "signature": "((cell, cell, slice, slice, int, int, int, slice)) $C$_load_not_mut(slice sc_0)",
  },
]
`;
